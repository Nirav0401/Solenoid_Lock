
Solenoid_Lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a578  0800a578  0001a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa50  0800aa50  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa50  0800aa50  0001aa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa58  0800aa58  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa58  0800aa58  0001aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aa60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001d4  0800ac34  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800ac34  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0fe  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eea  00000000  00000000  0002d33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000932  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d69  00000000  00000000  0003073a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1e9  00000000  00000000  000464a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000864d7  00000000  00000000  0005468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f3c  00000000  00000000  000dab64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000deaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a55c 	.word	0x0800a55c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800a55c 	.word	0x0800a55c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f8b3 	bl	80015a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f803 	bl	8001458 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f8a5 	bl	80015a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f89b 	bl	80015a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f82b 	bl	80014dc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f821 	bl	80014dc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f001 feeb 	bl	8002334 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fb44 	bl	8001bf4 <__aeabi_dsub>
 800056c:	f001 fee2 	bl	8002334 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f853 	bl	8001670 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f001 ff16 	bl	8002400 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f84a 	bl	8001670 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb06 	bl	8001bf4 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f001 fecf 	bl	80023a0 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f833 	bl	8001670 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f001 fef6 	bl	8002400 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 f8d0 	bl	80007bc <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f001 ffa6 	bl	8002594 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f001 ffa1 	bl	8002594 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_dadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0004      	movs	r4, r0
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	001f      	movs	r7, r3
 80007ca:	030b      	lsls	r3, r1, #12
 80007cc:	0010      	movs	r0, r2
 80007ce:	004e      	lsls	r6, r1, #1
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	0fcd      	lsrs	r5, r1, #31
 80007d4:	0f61      	lsrs	r1, r4, #29
 80007d6:	007a      	lsls	r2, r7, #1
 80007d8:	4319      	orrs	r1, r3
 80007da:	00e3      	lsls	r3, r4, #3
 80007dc:	033c      	lsls	r4, r7, #12
 80007de:	0fff      	lsrs	r7, r7, #31
 80007e0:	46bc      	mov	ip, r7
 80007e2:	0a64      	lsrs	r4, r4, #9
 80007e4:	0f47      	lsrs	r7, r0, #29
 80007e6:	4327      	orrs	r7, r4
 80007e8:	0d76      	lsrs	r6, r6, #21
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	00c0      	lsls	r0, r0, #3
 80007ee:	46b9      	mov	r9, r7
 80007f0:	4680      	mov	r8, r0
 80007f2:	1ab7      	subs	r7, r6, r2
 80007f4:	4565      	cmp	r5, ip
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x3e>
 80007f8:	e09b      	b.n	8000932 <__aeabi_dadd+0x176>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x44>
 80007fe:	e084      	b.n	800090a <__aeabi_dadd+0x14e>
 8000800:	2a00      	cmp	r2, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x4a>
 8000804:	e0be      	b.n	8000984 <__aeabi_dadd+0x1c8>
 8000806:	4ac8      	ldr	r2, [pc, #800]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000808:	4296      	cmp	r6, r2
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x52>
 800080c:	e124      	b.n	8000a58 <__aeabi_dadd+0x29c>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	464c      	mov	r4, r9
 8000812:	0412      	lsls	r2, r2, #16
 8000814:	4314      	orrs	r4, r2
 8000816:	46a1      	mov	r9, r4
 8000818:	2f38      	cmp	r7, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_dadd+0x62>
 800081c:	e167      	b.n	8000aee <__aeabi_dadd+0x332>
 800081e:	2f1f      	cmp	r7, #31
 8000820:	dd00      	ble.n	8000824 <__aeabi_dadd+0x68>
 8000822:	e1d6      	b.n	8000bd2 <__aeabi_dadd+0x416>
 8000824:	2220      	movs	r2, #32
 8000826:	464c      	mov	r4, r9
 8000828:	1bd2      	subs	r2, r2, r7
 800082a:	4094      	lsls	r4, r2
 800082c:	46a2      	mov	sl, r4
 800082e:	4644      	mov	r4, r8
 8000830:	40fc      	lsrs	r4, r7
 8000832:	0020      	movs	r0, r4
 8000834:	4654      	mov	r4, sl
 8000836:	4304      	orrs	r4, r0
 8000838:	4640      	mov	r0, r8
 800083a:	4090      	lsls	r0, r2
 800083c:	1e42      	subs	r2, r0, #1
 800083e:	4190      	sbcs	r0, r2
 8000840:	464a      	mov	r2, r9
 8000842:	40fa      	lsrs	r2, r7
 8000844:	4304      	orrs	r4, r0
 8000846:	1a89      	subs	r1, r1, r2
 8000848:	1b1c      	subs	r4, r3, r4
 800084a:	42a3      	cmp	r3, r4
 800084c:	4192      	sbcs	r2, r2
 800084e:	4252      	negs	r2, r2
 8000850:	1a8b      	subs	r3, r1, r2
 8000852:	469a      	mov	sl, r3
 8000854:	4653      	mov	r3, sl
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	d400      	bmi.n	800085c <__aeabi_dadd+0xa0>
 800085a:	e0d4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 800085c:	4653      	mov	r3, sl
 800085e:	025a      	lsls	r2, r3, #9
 8000860:	0a53      	lsrs	r3, r2, #9
 8000862:	469a      	mov	sl, r3
 8000864:	4653      	mov	r3, sl
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <__aeabi_dadd+0xb0>
 800086a:	e104      	b.n	8000a76 <__aeabi_dadd+0x2ba>
 800086c:	4650      	mov	r0, sl
 800086e:	f001 fe73 	bl	8002558 <__clzsi2>
 8000872:	0003      	movs	r3, r0
 8000874:	3b08      	subs	r3, #8
 8000876:	2220      	movs	r2, #32
 8000878:	0020      	movs	r0, r4
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	4651      	mov	r1, sl
 800087e:	40d0      	lsrs	r0, r2
 8000880:	4099      	lsls	r1, r3
 8000882:	0002      	movs	r2, r0
 8000884:	409c      	lsls	r4, r3
 8000886:	430a      	orrs	r2, r1
 8000888:	42b3      	cmp	r3, r6
 800088a:	da00      	bge.n	800088e <__aeabi_dadd+0xd2>
 800088c:	e102      	b.n	8000a94 <__aeabi_dadd+0x2d8>
 800088e:	1b9b      	subs	r3, r3, r6
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	291f      	cmp	r1, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0xdc>
 8000896:	e0a7      	b.n	80009e8 <__aeabi_dadd+0x22c>
 8000898:	2320      	movs	r3, #32
 800089a:	0010      	movs	r0, r2
 800089c:	0026      	movs	r6, r4
 800089e:	1a5b      	subs	r3, r3, r1
 80008a0:	409c      	lsls	r4, r3
 80008a2:	4098      	lsls	r0, r3
 80008a4:	40ce      	lsrs	r6, r1
 80008a6:	40ca      	lsrs	r2, r1
 80008a8:	1e63      	subs	r3, r4, #1
 80008aa:	419c      	sbcs	r4, r3
 80008ac:	4330      	orrs	r0, r6
 80008ae:	4692      	mov	sl, r2
 80008b0:	2600      	movs	r6, #0
 80008b2:	4304      	orrs	r4, r0
 80008b4:	0763      	lsls	r3, r4, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008b8:	230f      	movs	r3, #15
 80008ba:	4023      	ands	r3, r4
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x110>
 80008c0:	1d23      	adds	r3, r4, #4
 80008c2:	42a3      	cmp	r3, r4
 80008c4:	41a4      	sbcs	r4, r4
 80008c6:	4264      	negs	r4, r4
 80008c8:	44a2      	add	sl, r4
 80008ca:	001c      	movs	r4, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x118>
 80008d2:	e09b      	b.n	8000a0c <__aeabi_dadd+0x250>
 80008d4:	4b94      	ldr	r3, [pc, #592]	; (8000b28 <__aeabi_dadd+0x36c>)
 80008d6:	3601      	adds	r6, #1
 80008d8:	429e      	cmp	r6, r3
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x122>
 80008dc:	e0b8      	b.n	8000a50 <__aeabi_dadd+0x294>
 80008de:	4653      	mov	r3, sl
 80008e0:	4992      	ldr	r1, [pc, #584]	; (8000b2c <__aeabi_dadd+0x370>)
 80008e2:	08e4      	lsrs	r4, r4, #3
 80008e4:	400b      	ands	r3, r1
 80008e6:	0019      	movs	r1, r3
 80008e8:	075b      	lsls	r3, r3, #29
 80008ea:	4323      	orrs	r3, r4
 80008ec:	0572      	lsls	r2, r6, #21
 80008ee:	024c      	lsls	r4, r1, #9
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	0512      	lsls	r2, r2, #20
 80008f6:	07ed      	lsls	r5, r5, #31
 80008f8:	4322      	orrs	r2, r4
 80008fa:	432a      	orrs	r2, r5
 80008fc:	0018      	movs	r0, r3
 80008fe:	0011      	movs	r1, r2
 8000900:	bce0      	pop	{r5, r6, r7}
 8000902:	46ba      	mov	sl, r7
 8000904:	46b1      	mov	r9, r6
 8000906:	46a8      	mov	r8, r5
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2f00      	cmp	r7, #0
 800090c:	d048      	beq.n	80009a0 <__aeabi_dadd+0x1e4>
 800090e:	1b97      	subs	r7, r2, r6
 8000910:	2e00      	cmp	r6, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x15a>
 8000914:	e10e      	b.n	8000b34 <__aeabi_dadd+0x378>
 8000916:	000c      	movs	r4, r1
 8000918:	431c      	orrs	r4, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x162>
 800091c:	e1b7      	b.n	8000c8e <__aeabi_dadd+0x4d2>
 800091e:	1e7c      	subs	r4, r7, #1
 8000920:	2f01      	cmp	r7, #1
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x16a>
 8000924:	e226      	b.n	8000d74 <__aeabi_dadd+0x5b8>
 8000926:	4d80      	ldr	r5, [pc, #512]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000928:	42af      	cmp	r7, r5
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x172>
 800092c:	e1d5      	b.n	8000cda <__aeabi_dadd+0x51e>
 800092e:	0027      	movs	r7, r4
 8000930:	e107      	b.n	8000b42 <__aeabi_dadd+0x386>
 8000932:	2f00      	cmp	r7, #0
 8000934:	dc00      	bgt.n	8000938 <__aeabi_dadd+0x17c>
 8000936:	e0b2      	b.n	8000a9e <__aeabi_dadd+0x2e2>
 8000938:	2a00      	cmp	r2, #0
 800093a:	d047      	beq.n	80009cc <__aeabi_dadd+0x210>
 800093c:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <__aeabi_dadd+0x36c>)
 800093e:	4296      	cmp	r6, r2
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x188>
 8000942:	e089      	b.n	8000a58 <__aeabi_dadd+0x29c>
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	464c      	mov	r4, r9
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	4314      	orrs	r4, r2
 800094c:	46a1      	mov	r9, r4
 800094e:	2f38      	cmp	r7, #56	; 0x38
 8000950:	dc6b      	bgt.n	8000a2a <__aeabi_dadd+0x26e>
 8000952:	2f1f      	cmp	r7, #31
 8000954:	dc00      	bgt.n	8000958 <__aeabi_dadd+0x19c>
 8000956:	e16e      	b.n	8000c36 <__aeabi_dadd+0x47a>
 8000958:	003a      	movs	r2, r7
 800095a:	4648      	mov	r0, r9
 800095c:	3a20      	subs	r2, #32
 800095e:	40d0      	lsrs	r0, r2
 8000960:	4684      	mov	ip, r0
 8000962:	2f20      	cmp	r7, #32
 8000964:	d007      	beq.n	8000976 <__aeabi_dadd+0x1ba>
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	4648      	mov	r0, r9
 800096a:	1bd2      	subs	r2, r2, r7
 800096c:	4090      	lsls	r0, r2
 800096e:	0002      	movs	r2, r0
 8000970:	4640      	mov	r0, r8
 8000972:	4310      	orrs	r0, r2
 8000974:	4680      	mov	r8, r0
 8000976:	4640      	mov	r0, r8
 8000978:	1e42      	subs	r2, r0, #1
 800097a:	4190      	sbcs	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	0004      	movs	r4, r0
 8000980:	4314      	orrs	r4, r2
 8000982:	e057      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000984:	464a      	mov	r2, r9
 8000986:	4302      	orrs	r2, r0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0x1d0>
 800098a:	e103      	b.n	8000b94 <__aeabi_dadd+0x3d8>
 800098c:	1e7a      	subs	r2, r7, #1
 800098e:	2f01      	cmp	r7, #1
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x1d8>
 8000992:	e193      	b.n	8000cbc <__aeabi_dadd+0x500>
 8000994:	4c64      	ldr	r4, [pc, #400]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000996:	42a7      	cmp	r7, r4
 8000998:	d100      	bne.n	800099c <__aeabi_dadd+0x1e0>
 800099a:	e18a      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 800099c:	0017      	movs	r7, r2
 800099e:	e73b      	b.n	8000818 <__aeabi_dadd+0x5c>
 80009a0:	4c63      	ldr	r4, [pc, #396]	; (8000b30 <__aeabi_dadd+0x374>)
 80009a2:	1c72      	adds	r2, r6, #1
 80009a4:	4222      	tst	r2, r4
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1ee>
 80009a8:	e0e0      	b.n	8000b6c <__aeabi_dadd+0x3b0>
 80009aa:	000a      	movs	r2, r1
 80009ac:	431a      	orrs	r2, r3
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x1f8>
 80009b2:	e174      	b.n	8000c9e <__aeabi_dadd+0x4e2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x1fe>
 80009b8:	e1d0      	b.n	8000d5c <__aeabi_dadd+0x5a0>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4302      	orrs	r2, r0
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x206>
 80009c0:	e1e3      	b.n	8000d8a <__aeabi_dadd+0x5ce>
 80009c2:	074a      	lsls	r2, r1, #29
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	08c9      	lsrs	r1, r1, #3
 80009ca:	e029      	b.n	8000a20 <__aeabi_dadd+0x264>
 80009cc:	464a      	mov	r2, r9
 80009ce:	4302      	orrs	r2, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x218>
 80009d2:	e17d      	b.n	8000cd0 <__aeabi_dadd+0x514>
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	2f01      	cmp	r7, #1
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x220>
 80009da:	e0e0      	b.n	8000b9e <__aeabi_dadd+0x3e2>
 80009dc:	4c52      	ldr	r4, [pc, #328]	; (8000b28 <__aeabi_dadd+0x36c>)
 80009de:	42a7      	cmp	r7, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x228>
 80009e2:	e166      	b.n	8000cb2 <__aeabi_dadd+0x4f6>
 80009e4:	0017      	movs	r7, r2
 80009e6:	e7b2      	b.n	800094e <__aeabi_dadd+0x192>
 80009e8:	0010      	movs	r0, r2
 80009ea:	3b1f      	subs	r3, #31
 80009ec:	40d8      	lsrs	r0, r3
 80009ee:	2920      	cmp	r1, #32
 80009f0:	d003      	beq.n	80009fa <__aeabi_dadd+0x23e>
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	409a      	lsls	r2, r3
 80009f8:	4314      	orrs	r4, r2
 80009fa:	1e63      	subs	r3, r4, #1
 80009fc:	419c      	sbcs	r4, r3
 80009fe:	2300      	movs	r3, #0
 8000a00:	2600      	movs	r6, #0
 8000a02:	469a      	mov	sl, r3
 8000a04:	4304      	orrs	r4, r0
 8000a06:	0763      	lsls	r3, r4, #29
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dadd+0x250>
 8000a0a:	e755      	b.n	80008b8 <__aeabi_dadd+0xfc>
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	08e3      	lsrs	r3, r4, #3
 8000a10:	0752      	lsls	r2, r2, #29
 8000a12:	4313      	orrs	r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	0037      	movs	r7, r6
 8000a18:	08d1      	lsrs	r1, r2, #3
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a1c:	4297      	cmp	r7, r2
 8000a1e:	d01f      	beq.n	8000a60 <__aeabi_dadd+0x2a4>
 8000a20:	0309      	lsls	r1, r1, #12
 8000a22:	057a      	lsls	r2, r7, #21
 8000a24:	0b0c      	lsrs	r4, r1, #12
 8000a26:	0d52      	lsrs	r2, r2, #21
 8000a28:	e764      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a2a:	4642      	mov	r2, r8
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	1e62      	subs	r2, r4, #1
 8000a32:	4194      	sbcs	r4, r2
 8000a34:	18e4      	adds	r4, r4, r3
 8000a36:	429c      	cmp	r4, r3
 8000a38:	4192      	sbcs	r2, r2
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	4692      	mov	sl, r2
 8000a3e:	448a      	add	sl, r1
 8000a40:	4653      	mov	r3, sl
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	d5df      	bpl.n	8000a06 <__aeabi_dadd+0x24a>
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a48:	3601      	adds	r6, #1
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x294>
 8000a4e:	e0b3      	b.n	8000bb8 <__aeabi_dadd+0x3fc>
 8000a50:	0032      	movs	r2, r6
 8000a52:	2400      	movs	r4, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	e74d      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a58:	074a      	lsls	r2, r1, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	001a      	movs	r2, r3
 8000a62:	430a      	orrs	r2, r1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x2ac>
 8000a66:	e200      	b.n	8000e6a <__aeabi_dadd+0x6ae>
 8000a68:	2480      	movs	r4, #128	; 0x80
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	0324      	lsls	r4, r4, #12
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	e73e      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000a76:	0020      	movs	r0, r4
 8000a78:	f001 fd6e 	bl	8002558 <__clzsi2>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	3318      	adds	r3, #24
 8000a80:	2b1f      	cmp	r3, #31
 8000a82:	dc00      	bgt.n	8000a86 <__aeabi_dadd+0x2ca>
 8000a84:	e6f7      	b.n	8000876 <__aeabi_dadd+0xba>
 8000a86:	0022      	movs	r2, r4
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4082      	lsls	r2, r0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	42b3      	cmp	r3, r6
 8000a90:	db00      	blt.n	8000a94 <__aeabi_dadd+0x2d8>
 8000a92:	e6fc      	b.n	800088e <__aeabi_dadd+0xd2>
 8000a94:	1af6      	subs	r6, r6, r3
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <__aeabi_dadd+0x370>)
 8000a98:	401a      	ands	r2, r3
 8000a9a:	4692      	mov	sl, r2
 8000a9c:	e70a      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d02b      	beq.n	8000afa <__aeabi_dadd+0x33e>
 8000aa2:	1b97      	subs	r7, r2, r6
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x2ee>
 8000aa8:	e0b8      	b.n	8000c1c <__aeabi_dadd+0x460>
 8000aaa:	4c1f      	ldr	r4, [pc, #124]	; (8000b28 <__aeabi_dadd+0x36c>)
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x2f6>
 8000ab0:	e11c      	b.n	8000cec <__aeabi_dadd+0x530>
 8000ab2:	2480      	movs	r4, #128	; 0x80
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	2f38      	cmp	r7, #56	; 0x38
 8000aba:	dd00      	ble.n	8000abe <__aeabi_dadd+0x302>
 8000abc:	e11e      	b.n	8000cfc <__aeabi_dadd+0x540>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x308>
 8000ac2:	e19e      	b.n	8000e02 <__aeabi_dadd+0x646>
 8000ac4:	2620      	movs	r6, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bf6      	subs	r6, r6, r7
 8000aca:	0018      	movs	r0, r3
 8000acc:	40b3      	lsls	r3, r6
 8000ace:	40b4      	lsls	r4, r6
 8000ad0:	40f8      	lsrs	r0, r7
 8000ad2:	1e5e      	subs	r6, r3, #1
 8000ad4:	41b3      	sbcs	r3, r6
 8000ad6:	40f9      	lsrs	r1, r7
 8000ad8:	4304      	orrs	r4, r0
 8000ada:	431c      	orrs	r4, r3
 8000adc:	4489      	add	r9, r1
 8000ade:	4444      	add	r4, r8
 8000ae0:	4544      	cmp	r4, r8
 8000ae2:	419b      	sbcs	r3, r3
 8000ae4:	425b      	negs	r3, r3
 8000ae6:	444b      	add	r3, r9
 8000ae8:	469a      	mov	sl, r3
 8000aea:	0016      	movs	r6, r2
 8000aec:	e7a8      	b.n	8000a40 <__aeabi_dadd+0x284>
 8000aee:	4642      	mov	r2, r8
 8000af0:	464c      	mov	r4, r9
 8000af2:	4314      	orrs	r4, r2
 8000af4:	1e62      	subs	r2, r4, #1
 8000af6:	4194      	sbcs	r4, r2
 8000af8:	e6a6      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000afa:	4c0d      	ldr	r4, [pc, #52]	; (8000b30 <__aeabi_dadd+0x374>)
 8000afc:	1c72      	adds	r2, r6, #1
 8000afe:	4222      	tst	r2, r4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x348>
 8000b02:	e0a8      	b.n	8000c56 <__aeabi_dadd+0x49a>
 8000b04:	000a      	movs	r2, r1
 8000b06:	431a      	orrs	r2, r3
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x352>
 8000b0c:	e10a      	b.n	8000d24 <__aeabi_dadd+0x568>
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_dadd+0x358>
 8000b12:	e15e      	b.n	8000dd2 <__aeabi_dadd+0x616>
 8000b14:	464a      	mov	r2, r9
 8000b16:	4302      	orrs	r2, r0
 8000b18:	d000      	beq.n	8000b1c <__aeabi_dadd+0x360>
 8000b1a:	e161      	b.n	8000de0 <__aeabi_dadd+0x624>
 8000b1c:	074a      	lsls	r2, r1, #29
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	08c9      	lsrs	r1, r1, #3
 8000b24:	e77c      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	000007ff 	.word	0x000007ff
 8000b2c:	ff7fffff 	.word	0xff7fffff
 8000b30:	000007fe 	.word	0x000007fe
 8000b34:	4ccf      	ldr	r4, [pc, #828]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000b36:	42a2      	cmp	r2, r4
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x380>
 8000b3a:	e0ce      	b.n	8000cda <__aeabi_dadd+0x51e>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4321      	orrs	r1, r4
 8000b42:	2f38      	cmp	r7, #56	; 0x38
 8000b44:	dc5b      	bgt.n	8000bfe <__aeabi_dadd+0x442>
 8000b46:	2f1f      	cmp	r7, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x390>
 8000b4a:	e0dc      	b.n	8000d06 <__aeabi_dadd+0x54a>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000c      	movs	r4, r1
 8000b50:	1bed      	subs	r5, r5, r7
 8000b52:	001e      	movs	r6, r3
 8000b54:	40ab      	lsls	r3, r5
 8000b56:	40ac      	lsls	r4, r5
 8000b58:	40fe      	lsrs	r6, r7
 8000b5a:	1e5d      	subs	r5, r3, #1
 8000b5c:	41ab      	sbcs	r3, r5
 8000b5e:	4334      	orrs	r4, r6
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	431c      	orrs	r4, r3
 8000b64:	464b      	mov	r3, r9
 8000b66:	1a5b      	subs	r3, r3, r1
 8000b68:	4699      	mov	r9, r3
 8000b6a:	e04c      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	1a1c      	subs	r4, r3, r0
 8000b70:	1a88      	subs	r0, r1, r2
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4252      	negs	r2, r2
 8000b78:	4692      	mov	sl, r2
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	4692      	mov	sl, r2
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	d478      	bmi.n	8000c78 <__aeabi_dadd+0x4bc>
 8000b86:	4653      	mov	r3, sl
 8000b88:	4323      	orrs	r3, r4
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_dadd+0x3d2>
 8000b8c:	e66a      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2500      	movs	r5, #0
 8000b92:	e745      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000b94:	074a      	lsls	r2, r1, #29
 8000b96:	08db      	lsrs	r3, r3, #3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e73d      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000b9e:	181c      	adds	r4, r3, r0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4449      	add	r1, r9
 8000ba6:	468a      	mov	sl, r1
 8000ba8:	425b      	negs	r3, r3
 8000baa:	449a      	add	sl, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	2601      	movs	r6, #1
 8000bb0:	021b      	lsls	r3, r3, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0x3fa>
 8000bb4:	e727      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000bb6:	2602      	movs	r6, #2
 8000bb8:	4652      	mov	r2, sl
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	4021      	ands	r1, r4
 8000bc4:	0862      	lsrs	r2, r4, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	07dc      	lsls	r4, r3, #31
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	4314      	orrs	r4, r2
 8000bd0:	e670      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	464c      	mov	r4, r9
 8000bd6:	3a20      	subs	r2, #32
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	46a4      	mov	ip, r4
 8000bdc:	2f20      	cmp	r7, #32
 8000bde:	d007      	beq.n	8000bf0 <__aeabi_dadd+0x434>
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	4648      	mov	r0, r9
 8000be4:	1bd2      	subs	r2, r2, r7
 8000be6:	4090      	lsls	r0, r2
 8000be8:	0002      	movs	r2, r0
 8000bea:	4640      	mov	r0, r8
 8000bec:	4310      	orrs	r0, r2
 8000bee:	4680      	mov	r8, r0
 8000bf0:	4640      	mov	r0, r8
 8000bf2:	1e42      	subs	r2, r0, #1
 8000bf4:	4190      	sbcs	r0, r2
 8000bf6:	4662      	mov	r2, ip
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	e624      	b.n	8000848 <__aeabi_dadd+0x8c>
 8000bfe:	4319      	orrs	r1, r3
 8000c00:	000c      	movs	r4, r1
 8000c02:	1e63      	subs	r3, r4, #1
 8000c04:	419c      	sbcs	r4, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	1b1c      	subs	r4, r3, r4
 8000c0a:	45a0      	cmp	r8, r4
 8000c0c:	419b      	sbcs	r3, r3
 8000c0e:	4649      	mov	r1, r9
 8000c10:	425b      	negs	r3, r3
 8000c12:	1acb      	subs	r3, r1, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	4665      	mov	r5, ip
 8000c18:	0016      	movs	r6, r2
 8000c1a:	e61b      	b.n	8000854 <__aeabi_dadd+0x98>
 8000c1c:	000c      	movs	r4, r1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	d100      	bne.n	8000c24 <__aeabi_dadd+0x468>
 8000c22:	e0c7      	b.n	8000db4 <__aeabi_dadd+0x5f8>
 8000c24:	1e7c      	subs	r4, r7, #1
 8000c26:	2f01      	cmp	r7, #1
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dadd+0x470>
 8000c2a:	e0f9      	b.n	8000e20 <__aeabi_dadd+0x664>
 8000c2c:	4e91      	ldr	r6, [pc, #580]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d05c      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000c32:	0027      	movs	r7, r4
 8000c34:	e740      	b.n	8000ab8 <__aeabi_dadd+0x2fc>
 8000c36:	2220      	movs	r2, #32
 8000c38:	464c      	mov	r4, r9
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1bd2      	subs	r2, r2, r7
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	40f8      	lsrs	r0, r7
 8000c42:	4304      	orrs	r4, r0
 8000c44:	4640      	mov	r0, r8
 8000c46:	4090      	lsls	r0, r2
 8000c48:	1e42      	subs	r2, r0, #1
 8000c4a:	4190      	sbcs	r0, r2
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	40fa      	lsrs	r2, r7
 8000c50:	4304      	orrs	r4, r0
 8000c52:	1889      	adds	r1, r1, r2
 8000c54:	e6ee      	b.n	8000a34 <__aeabi_dadd+0x278>
 8000c56:	4c87      	ldr	r4, [pc, #540]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000c58:	42a2      	cmp	r2, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x4a2>
 8000c5c:	e6f9      	b.n	8000a52 <__aeabi_dadd+0x296>
 8000c5e:	1818      	adds	r0, r3, r0
 8000c60:	4298      	cmp	r0, r3
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	4449      	add	r1, r9
 8000c66:	425b      	negs	r3, r3
 8000c68:	18cb      	adds	r3, r1, r3
 8000c6a:	07dc      	lsls	r4, r3, #31
 8000c6c:	0840      	lsrs	r0, r0, #1
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	469a      	mov	sl, r3
 8000c72:	0016      	movs	r6, r2
 8000c74:	4304      	orrs	r4, r0
 8000c76:	e6c6      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	1ad4      	subs	r4, r2, r3
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	4180      	sbcs	r0, r0
 8000c80:	464b      	mov	r3, r9
 8000c82:	4240      	negs	r0, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	1a0b      	subs	r3, r1, r0
 8000c88:	469a      	mov	sl, r3
 8000c8a:	4665      	mov	r5, ip
 8000c8c:	e5ea      	b.n	8000864 <__aeabi_dadd+0xa8>
 8000c8e:	464b      	mov	r3, r9
 8000c90:	464a      	mov	r2, r9
 8000c92:	08c0      	lsrs	r0, r0, #3
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4665      	mov	r5, ip
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	08d1      	lsrs	r1, r2, #3
 8000c9c:	e6bd      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_dadd+0x4e8>
 8000ca2:	e08e      	b.n	8000dc2 <__aeabi_dadd+0x606>
 8000ca4:	464b      	mov	r3, r9
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	d117      	bne.n	8000cda <__aeabi_dadd+0x51e>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	2500      	movs	r5, #0
 8000cae:	0309      	lsls	r1, r1, #12
 8000cb0:	e6da      	b.n	8000a68 <__aeabi_dadd+0x2ac>
 8000cb2:	074a      	lsls	r2, r1, #29
 8000cb4:	08db      	lsrs	r3, r3, #3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	e6d1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cbc:	1a1c      	subs	r4, r3, r0
 8000cbe:	464a      	mov	r2, r9
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	1a89      	subs	r1, r1, r2
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	1acb      	subs	r3, r1, r3
 8000cca:	469a      	mov	sl, r3
 8000ccc:	2601      	movs	r6, #1
 8000cce:	e5c1      	b.n	8000854 <__aeabi_dadd+0x98>
 8000cd0:	074a      	lsls	r2, r1, #29
 8000cd2:	08db      	lsrs	r3, r3, #3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	e69f      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	464b      	mov	r3, r9
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e6b9      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cec:	4643      	mov	r3, r8
 8000cee:	08d8      	lsrs	r0, r3, #3
 8000cf0:	464b      	mov	r3, r9
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	075b      	lsls	r3, r3, #29
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	08d1      	lsrs	r1, r2, #3
 8000cfa:	e6b1      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	e6eb      	b.n	8000ade <__aeabi_dadd+0x322>
 8000d06:	003c      	movs	r4, r7
 8000d08:	000d      	movs	r5, r1
 8000d0a:	3c20      	subs	r4, #32
 8000d0c:	40e5      	lsrs	r5, r4
 8000d0e:	2f20      	cmp	r7, #32
 8000d10:	d003      	beq.n	8000d1a <__aeabi_dadd+0x55e>
 8000d12:	2440      	movs	r4, #64	; 0x40
 8000d14:	1be4      	subs	r4, r4, r7
 8000d16:	40a1      	lsls	r1, r4
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	1e63      	subs	r3, r4, #1
 8000d1e:	419c      	sbcs	r4, r3
 8000d20:	432c      	orrs	r4, r5
 8000d22:	e770      	b.n	8000c06 <__aeabi_dadd+0x44a>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d0e1      	beq.n	8000cec <__aeabi_dadd+0x530>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	4302      	orrs	r2, r0
 8000d2c:	d0c1      	beq.n	8000cb2 <__aeabi_dadd+0x4f6>
 8000d2e:	074a      	lsls	r2, r1, #29
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	08c9      	lsrs	r1, r1, #3
 8000d38:	0312      	lsls	r2, r2, #12
 8000d3a:	4211      	tst	r1, r2
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x594>
 8000d3e:	4648      	mov	r0, r9
 8000d40:	08c4      	lsrs	r4, r0, #3
 8000d42:	4214      	tst	r4, r2
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x594>
 8000d46:	4643      	mov	r3, r8
 8000d48:	0021      	movs	r1, r4
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	0742      	lsls	r2, r0, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	0752      	lsls	r2, r2, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e681      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000d5c:	464b      	mov	r3, r9
 8000d5e:	4303      	orrs	r3, r0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x5a8>
 8000d62:	e714      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000d64:	464b      	mov	r3, r9
 8000d66:	464a      	mov	r2, r9
 8000d68:	08c0      	lsrs	r0, r0, #3
 8000d6a:	075b      	lsls	r3, r3, #29
 8000d6c:	4665      	mov	r5, ip
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	08d1      	lsrs	r1, r2, #3
 8000d72:	e655      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000d74:	1ac4      	subs	r4, r0, r3
 8000d76:	45a0      	cmp	r8, r4
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	1a59      	subs	r1, r3, r1
 8000d80:	1a0b      	subs	r3, r1, r0
 8000d82:	469a      	mov	sl, r3
 8000d84:	4665      	mov	r5, ip
 8000d86:	2601      	movs	r6, #1
 8000d88:	e564      	b.n	8000854 <__aeabi_dadd+0x98>
 8000d8a:	1a1c      	subs	r4, r3, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	4180      	sbcs	r0, r0
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4240      	negs	r0, r0
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	4692      	mov	sl, r2
 8000d9a:	0212      	lsls	r2, r2, #8
 8000d9c:	d549      	bpl.n	8000e32 <__aeabi_dadd+0x676>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	1ad4      	subs	r4, r2, r3
 8000da2:	45a0      	cmp	r8, r4
 8000da4:	4180      	sbcs	r0, r0
 8000da6:	464b      	mov	r3, r9
 8000da8:	4240      	negs	r0, r0
 8000daa:	1a59      	subs	r1, r3, r1
 8000dac:	1a0b      	subs	r3, r1, r0
 8000dae:	469a      	mov	sl, r3
 8000db0:	4665      	mov	r5, ip
 8000db2:	e57f      	b.n	80008b4 <__aeabi_dadd+0xf8>
 8000db4:	464b      	mov	r3, r9
 8000db6:	464a      	mov	r2, r9
 8000db8:	08c0      	lsrs	r0, r0, #3
 8000dba:	075b      	lsls	r3, r3, #29
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	08d1      	lsrs	r1, r2, #3
 8000dc0:	e62b      	b.n	8000a1a <__aeabi_dadd+0x25e>
 8000dc2:	464a      	mov	r2, r9
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	4302      	orrs	r2, r0
 8000dc8:	d138      	bne.n	8000e3c <__aeabi_dadd+0x680>
 8000dca:	074a      	lsls	r2, r1, #29
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	08c9      	lsrs	r1, r1, #3
 8000dd0:	e646      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	08c0      	lsrs	r0, r0, #3
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	4303      	orrs	r3, r0
 8000ddc:	08d1      	lsrs	r1, r2, #3
 8000dde:	e61f      	b.n	8000a20 <__aeabi_dadd+0x264>
 8000de0:	181c      	adds	r4, r3, r0
 8000de2:	429c      	cmp	r4, r3
 8000de4:	419b      	sbcs	r3, r3
 8000de6:	4449      	add	r1, r9
 8000de8:	468a      	mov	sl, r1
 8000dea:	425b      	negs	r3, r3
 8000dec:	449a      	add	sl, r3
 8000dee:	4653      	mov	r3, sl
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	d400      	bmi.n	8000df6 <__aeabi_dadd+0x63a>
 8000df4:	e607      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000df6:	4652      	mov	r2, sl
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <__aeabi_dadd+0x6bc>)
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4692      	mov	sl, r2
 8000e00:	e601      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e02:	003c      	movs	r4, r7
 8000e04:	000e      	movs	r6, r1
 8000e06:	3c20      	subs	r4, #32
 8000e08:	40e6      	lsrs	r6, r4
 8000e0a:	2f20      	cmp	r7, #32
 8000e0c:	d003      	beq.n	8000e16 <__aeabi_dadd+0x65a>
 8000e0e:	2440      	movs	r4, #64	; 0x40
 8000e10:	1be4      	subs	r4, r4, r7
 8000e12:	40a1      	lsls	r1, r4
 8000e14:	430b      	orrs	r3, r1
 8000e16:	001c      	movs	r4, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4334      	orrs	r4, r6
 8000e1e:	e65e      	b.n	8000ade <__aeabi_dadd+0x322>
 8000e20:	4443      	add	r3, r8
 8000e22:	4283      	cmp	r3, r0
 8000e24:	4180      	sbcs	r0, r0
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4482      	add	sl, r0
 8000e30:	e6bc      	b.n	8000bac <__aeabi_dadd+0x3f0>
 8000e32:	4653      	mov	r3, sl
 8000e34:	4323      	orrs	r3, r4
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dadd+0x67e>
 8000e38:	e6a9      	b.n	8000b8e <__aeabi_dadd+0x3d2>
 8000e3a:	e5e4      	b.n	8000a06 <__aeabi_dadd+0x24a>
 8000e3c:	074a      	lsls	r2, r1, #29
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	08c9      	lsrs	r1, r1, #3
 8000e44:	0312      	lsls	r2, r2, #12
 8000e46:	4211      	tst	r1, r2
 8000e48:	d009      	beq.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e4a:	4648      	mov	r0, r9
 8000e4c:	08c4      	lsrs	r4, r0, #3
 8000e4e:	4214      	tst	r4, r2
 8000e50:	d105      	bne.n	8000e5e <__aeabi_dadd+0x6a2>
 8000e52:	4643      	mov	r3, r8
 8000e54:	4665      	mov	r5, ip
 8000e56:	0021      	movs	r1, r4
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	0742      	lsls	r2, r0, #29
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	0f5a      	lsrs	r2, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	0752      	lsls	r2, r2, #29
 8000e66:	4313      	orrs	r3, r2
 8000e68:	e5fa      	b.n	8000a60 <__aeabi_dadd+0x2a4>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	4a01      	ldr	r2, [pc, #4]	; (8000e74 <__aeabi_dadd+0x6b8>)
 8000e6e:	001c      	movs	r4, r3
 8000e70:	e540      	b.n	80008f4 <__aeabi_dadd+0x138>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	000007ff 	.word	0x000007ff
 8000e78:	ff7fffff 	.word	0xff7fffff

08000e7c <__aeabi_ddiv>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	4645      	mov	r5, r8
 8000e84:	46de      	mov	lr, fp
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	030c      	lsls	r4, r1, #12
 8000e8a:	001f      	movs	r7, r3
 8000e8c:	004b      	lsls	r3, r1, #1
 8000e8e:	4681      	mov	r9, r0
 8000e90:	4692      	mov	sl, r2
 8000e92:	0005      	movs	r5, r0
 8000e94:	b085      	sub	sp, #20
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	0d5b      	lsrs	r3, r3, #21
 8000e9a:	0fce      	lsrs	r6, r1, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x26>
 8000ea0:	e152      	b.n	8001148 <__aeabi_ddiv+0x2cc>
 8000ea2:	4ad2      	ldr	r2, [pc, #840]	; (80011ec <__aeabi_ddiv+0x370>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x2e>
 8000ea8:	e16e      	b.n	8001188 <__aeabi_ddiv+0x30c>
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00e4      	lsls	r4, r4, #3
 8000eae:	4314      	orrs	r4, r2
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	0412      	lsls	r2, r2, #16
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	4acd      	ldr	r2, [pc, #820]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eba:	00c5      	lsls	r5, r0, #3
 8000ebc:	4693      	mov	fp, r2
 8000ebe:	449b      	add	fp, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	4699      	mov	r9, r3
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	033c      	lsls	r4, r7, #12
 8000ec8:	007b      	lsls	r3, r7, #1
 8000eca:	4650      	mov	r0, sl
 8000ecc:	0b24      	lsrs	r4, r4, #12
 8000ece:	0d5b      	lsrs	r3, r3, #21
 8000ed0:	0fff      	lsrs	r7, r7, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x5c>
 8000ed6:	e11a      	b.n	800110e <__aeabi_ddiv+0x292>
 8000ed8:	4ac4      	ldr	r2, [pc, #784]	; (80011ec <__aeabi_ddiv+0x370>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_ddiv+0x64>
 8000ede:	e15e      	b.n	800119e <__aeabi_ddiv+0x322>
 8000ee0:	0f42      	lsrs	r2, r0, #29
 8000ee2:	00e4      	lsls	r4, r4, #3
 8000ee4:	4322      	orrs	r2, r4
 8000ee6:	2480      	movs	r4, #128	; 0x80
 8000ee8:	0424      	lsls	r4, r4, #16
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4ac0      	ldr	r2, [pc, #768]	; (80011f0 <__aeabi_ddiv+0x374>)
 8000eee:	00c1      	lsls	r1, r0, #3
 8000ef0:	4694      	mov	ip, r2
 8000ef2:	465a      	mov	r2, fp
 8000ef4:	4463      	add	r3, ip
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	469b      	mov	fp, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	0033      	movs	r3, r6
 8000efe:	407b      	eors	r3, r7
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d827      	bhi.n	8000f58 <__aeabi_ddiv+0xdc>
 8000f08:	4aba      	ldr	r2, [pc, #744]	; (80011f4 <__aeabi_ddiv+0x378>)
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	469f      	mov	pc, r3
 8000f10:	46b2      	mov	sl, r6
 8000f12:	9b00      	ldr	r3, [sp, #0]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d016      	beq.n	8000f46 <__aeabi_ddiv+0xca>
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_ddiv+0xa2>
 8000f1c:	e287      	b.n	800142e <__aeabi_ddiv+0x5b2>
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d000      	beq.n	8000f24 <__aeabi_ddiv+0xa8>
 8000f22:	e0d5      	b.n	80010d0 <__aeabi_ddiv+0x254>
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	051b      	lsls	r3, r3, #20
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	0028      	movs	r0, r5
 8000f36:	0019      	movs	r1, r3
 8000f38:	b005      	add	sp, #20
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	46bb      	mov	fp, r7
 8000f3e:	46b2      	mov	sl, r6
 8000f40:	46a9      	mov	r9, r5
 8000f42:	46a0      	mov	r8, r4
 8000f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f46:	2200      	movs	r2, #0
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4ba8      	ldr	r3, [pc, #672]	; (80011ec <__aeabi_ddiv+0x370>)
 8000f4c:	e7ed      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	46a0      	mov	r8, r4
 8000f52:	000d      	movs	r5, r1
 8000f54:	9000      	str	r0, [sp, #0]
 8000f56:	e7dc      	b.n	8000f12 <__aeabi_ddiv+0x96>
 8000f58:	4544      	cmp	r4, r8
 8000f5a:	d200      	bcs.n	8000f5e <__aeabi_ddiv+0xe2>
 8000f5c:	e1c4      	b.n	80012e8 <__aeabi_ddiv+0x46c>
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0xe6>
 8000f60:	e1bf      	b.n	80012e2 <__aeabi_ddiv+0x466>
 8000f62:	2301      	movs	r3, #1
 8000f64:	425b      	negs	r3, r3
 8000f66:	469c      	mov	ip, r3
 8000f68:	002e      	movs	r6, r5
 8000f6a:	4640      	mov	r0, r8
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	44e3      	add	fp, ip
 8000f70:	0223      	lsls	r3, r4, #8
 8000f72:	0e0c      	lsrs	r4, r1, #24
 8000f74:	431c      	orrs	r4, r3
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	4699      	mov	r9, r3
 8000f7a:	0423      	lsls	r3, r4, #16
 8000f7c:	020a      	lsls	r2, r1, #8
 8000f7e:	0c1f      	lsrs	r7, r3, #16
 8000f80:	4649      	mov	r1, r9
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9701      	str	r7, [sp, #4]
 8000f86:	f7ff f961 	bl	800024c <__aeabi_uidivmod>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	437a      	muls	r2, r7
 8000f8e:	040b      	lsls	r3, r1, #16
 8000f90:	0c31      	lsrs	r1, r6, #16
 8000f92:	4680      	mov	r8, r0
 8000f94:	4319      	orrs	r1, r3
 8000f96:	428a      	cmp	r2, r1
 8000f98:	d907      	bls.n	8000faa <__aeabi_ddiv+0x12e>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	1909      	adds	r1, r1, r4
 8000fa2:	44e0      	add	r8, ip
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d800      	bhi.n	8000faa <__aeabi_ddiv+0x12e>
 8000fa8:	e201      	b.n	80013ae <__aeabi_ddiv+0x532>
 8000faa:	1a88      	subs	r0, r1, r2
 8000fac:	4649      	mov	r1, r9
 8000fae:	f7ff f94d 	bl	800024c <__aeabi_uidivmod>
 8000fb2:	9a01      	ldr	r2, [sp, #4]
 8000fb4:	0436      	lsls	r6, r6, #16
 8000fb6:	4342      	muls	r2, r0
 8000fb8:	0409      	lsls	r1, r1, #16
 8000fba:	0c36      	lsrs	r6, r6, #16
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	430e      	orrs	r6, r1
 8000fc0:	42b2      	cmp	r2, r6
 8000fc2:	d904      	bls.n	8000fce <__aeabi_ddiv+0x152>
 8000fc4:	1936      	adds	r6, r6, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	42b4      	cmp	r4, r6
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x152>
 8000fcc:	e1e9      	b.n	80013a2 <__aeabi_ddiv+0x526>
 8000fce:	1ab0      	subs	r0, r6, r2
 8000fd0:	4642      	mov	r2, r8
 8000fd2:	9e00      	ldr	r6, [sp, #0]
 8000fd4:	0412      	lsls	r2, r2, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	0c33      	lsrs	r3, r6, #16
 8000fda:	001f      	movs	r7, r3
 8000fdc:	0c11      	lsrs	r1, r2, #16
 8000fde:	4690      	mov	r8, r2
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	0413      	lsls	r3, r2, #16
 8000fe4:	0432      	lsls	r2, r6, #16
 8000fe6:	0c16      	lsrs	r6, r2, #16
 8000fe8:	0032      	movs	r2, r6
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	435a      	muls	r2, r3
 8000fee:	9603      	str	r6, [sp, #12]
 8000ff0:	437b      	muls	r3, r7
 8000ff2:	434e      	muls	r6, r1
 8000ff4:	4379      	muls	r1, r7
 8000ff6:	0c17      	lsrs	r7, r2, #16
 8000ff8:	46bc      	mov	ip, r7
 8000ffa:	199b      	adds	r3, r3, r6
 8000ffc:	4463      	add	r3, ip
 8000ffe:	429e      	cmp	r6, r3
 8001000:	d903      	bls.n	800100a <__aeabi_ddiv+0x18e>
 8001002:	2680      	movs	r6, #128	; 0x80
 8001004:	0276      	lsls	r6, r6, #9
 8001006:	46b4      	mov	ip, r6
 8001008:	4461      	add	r1, ip
 800100a:	0c1e      	lsrs	r6, r3, #16
 800100c:	1871      	adds	r1, r6, r1
 800100e:	0416      	lsls	r6, r2, #16
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	0c36      	lsrs	r6, r6, #16
 8001014:	199e      	adds	r6, r3, r6
 8001016:	4288      	cmp	r0, r1
 8001018:	d302      	bcc.n	8001020 <__aeabi_ddiv+0x1a4>
 800101a:	d112      	bne.n	8001042 <__aeabi_ddiv+0x1c6>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d210      	bcs.n	8001042 <__aeabi_ddiv+0x1c6>
 8001020:	4643      	mov	r3, r8
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	469c      	mov	ip, r3
 8001028:	4465      	add	r5, ip
 800102a:	001f      	movs	r7, r3
 800102c:	429d      	cmp	r5, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	191b      	adds	r3, r3, r4
 8001034:	18c0      	adds	r0, r0, r3
 8001036:	4284      	cmp	r4, r0
 8001038:	d200      	bcs.n	800103c <__aeabi_ddiv+0x1c0>
 800103a:	e19e      	b.n	800137a <__aeabi_ddiv+0x4fe>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x1c4>
 800103e:	e199      	b.n	8001374 <__aeabi_ddiv+0x4f8>
 8001040:	4690      	mov	r8, r2
 8001042:	1bae      	subs	r6, r5, r6
 8001044:	42b5      	cmp	r5, r6
 8001046:	41ad      	sbcs	r5, r5
 8001048:	1a40      	subs	r0, r0, r1
 800104a:	426d      	negs	r5, r5
 800104c:	1b40      	subs	r0, r0, r5
 800104e:	4284      	cmp	r4, r0
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x1d8>
 8001052:	e1d2      	b.n	80013fa <__aeabi_ddiv+0x57e>
 8001054:	4649      	mov	r1, r9
 8001056:	f7ff f8f9 	bl	800024c <__aeabi_uidivmod>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	040b      	lsls	r3, r1, #16
 800105e:	4342      	muls	r2, r0
 8001060:	0c31      	lsrs	r1, r6, #16
 8001062:	0005      	movs	r5, r0
 8001064:	4319      	orrs	r1, r3
 8001066:	428a      	cmp	r2, r1
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x1f0>
 800106a:	e16c      	b.n	8001346 <__aeabi_ddiv+0x4ca>
 800106c:	1a88      	subs	r0, r1, r2
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff f8ec 	bl	800024c <__aeabi_uidivmod>
 8001074:	9a01      	ldr	r2, [sp, #4]
 8001076:	0436      	lsls	r6, r6, #16
 8001078:	4342      	muls	r2, r0
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	0c36      	lsrs	r6, r6, #16
 800107e:	0003      	movs	r3, r0
 8001080:	430e      	orrs	r6, r1
 8001082:	42b2      	cmp	r2, r6
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x20c>
 8001086:	e153      	b.n	8001330 <__aeabi_ddiv+0x4b4>
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	1ab6      	subs	r6, r6, r2
 800108c:	0002      	movs	r2, r0
 800108e:	042d      	lsls	r5, r5, #16
 8001090:	431d      	orrs	r5, r3
 8001092:	9f02      	ldr	r7, [sp, #8]
 8001094:	042b      	lsls	r3, r5, #16
 8001096:	0c1b      	lsrs	r3, r3, #16
 8001098:	435a      	muls	r2, r3
 800109a:	437b      	muls	r3, r7
 800109c:	469c      	mov	ip, r3
 800109e:	0c29      	lsrs	r1, r5, #16
 80010a0:	4348      	muls	r0, r1
 80010a2:	0c13      	lsrs	r3, r2, #16
 80010a4:	4484      	add	ip, r0
 80010a6:	4463      	add	r3, ip
 80010a8:	4379      	muls	r1, r7
 80010aa:	4298      	cmp	r0, r3
 80010ac:	d903      	bls.n	80010b6 <__aeabi_ddiv+0x23a>
 80010ae:	2080      	movs	r0, #128	; 0x80
 80010b0:	0240      	lsls	r0, r0, #9
 80010b2:	4684      	mov	ip, r0
 80010b4:	4461      	add	r1, ip
 80010b6:	0c18      	lsrs	r0, r3, #16
 80010b8:	0412      	lsls	r2, r2, #16
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	0c12      	lsrs	r2, r2, #16
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	4286      	cmp	r6, r0
 80010c4:	d200      	bcs.n	80010c8 <__aeabi_ddiv+0x24c>
 80010c6:	e100      	b.n	80012ca <__aeabi_ddiv+0x44e>
 80010c8:	d100      	bne.n	80010cc <__aeabi_ddiv+0x250>
 80010ca:	e0fb      	b.n	80012c4 <__aeabi_ddiv+0x448>
 80010cc:	2301      	movs	r3, #1
 80010ce:	431d      	orrs	r5, r3
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <__aeabi_ddiv+0x37c>)
 80010d2:	445b      	add	r3, fp
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dc00      	bgt.n	80010da <__aeabi_ddiv+0x25e>
 80010d8:	e0aa      	b.n	8001230 <__aeabi_ddiv+0x3b4>
 80010da:	076a      	lsls	r2, r5, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x264>
 80010de:	e13d      	b.n	800135c <__aeabi_ddiv+0x4e0>
 80010e0:	08e9      	lsrs	r1, r5, #3
 80010e2:	4642      	mov	r2, r8
 80010e4:	01d2      	lsls	r2, r2, #7
 80010e6:	d506      	bpl.n	80010f6 <__aeabi_ddiv+0x27a>
 80010e8:	4642      	mov	r2, r8
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <__aeabi_ddiv+0x380>)
 80010ec:	401a      	ands	r2, r3
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	4690      	mov	r8, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	445b      	add	r3, fp
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <__aeabi_ddiv+0x384>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	dd00      	ble.n	80010fe <__aeabi_ddiv+0x282>
 80010fc:	e723      	b.n	8000f46 <__aeabi_ddiv+0xca>
 80010fe:	4642      	mov	r2, r8
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	0755      	lsls	r5, r2, #29
 8001104:	0252      	lsls	r2, r2, #9
 8001106:	430d      	orrs	r5, r1
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	0d5b      	lsrs	r3, r3, #21
 800110c:	e70d      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800110e:	4651      	mov	r1, sl
 8001110:	4321      	orrs	r1, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_ddiv+0x29a>
 8001114:	e07c      	b.n	8001210 <__aeabi_ddiv+0x394>
 8001116:	2c00      	cmp	r4, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x2a0>
 800111a:	e0fb      	b.n	8001314 <__aeabi_ddiv+0x498>
 800111c:	0020      	movs	r0, r4
 800111e:	f001 fa1b 	bl	8002558 <__clzsi2>
 8001122:	0002      	movs	r2, r0
 8001124:	3a0b      	subs	r2, #11
 8001126:	231d      	movs	r3, #29
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	4652      	mov	r2, sl
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	4653      	mov	r3, sl
 8001132:	3908      	subs	r1, #8
 8001134:	408b      	lsls	r3, r1
 8001136:	408c      	lsls	r4, r1
 8001138:	0019      	movs	r1, r3
 800113a:	4314      	orrs	r4, r2
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <__aeabi_ddiv+0x388>)
 800113e:	4458      	add	r0, fp
 8001140:	469b      	mov	fp, r3
 8001142:	4483      	add	fp, r0
 8001144:	2000      	movs	r0, #0
 8001146:	e6d9      	b.n	8000efc <__aeabi_ddiv+0x80>
 8001148:	0003      	movs	r3, r0
 800114a:	4323      	orrs	r3, r4
 800114c:	4698      	mov	r8, r3
 800114e:	d044      	beq.n	80011da <__aeabi_ddiv+0x35e>
 8001150:	2c00      	cmp	r4, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x2da>
 8001154:	e0cf      	b.n	80012f6 <__aeabi_ddiv+0x47a>
 8001156:	0020      	movs	r0, r4
 8001158:	f001 f9fe 	bl	8002558 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0002      	movs	r2, r0
 8001160:	390b      	subs	r1, #11
 8001162:	231d      	movs	r3, #29
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	4649      	mov	r1, r9
 8001168:	0010      	movs	r0, r2
 800116a:	40d9      	lsrs	r1, r3
 800116c:	3808      	subs	r0, #8
 800116e:	4084      	lsls	r4, r0
 8001170:	000b      	movs	r3, r1
 8001172:	464d      	mov	r5, r9
 8001174:	4323      	orrs	r3, r4
 8001176:	4698      	mov	r8, r3
 8001178:	4085      	lsls	r5, r0
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <__aeabi_ddiv+0x38c>)
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	469b      	mov	fp, r3
 8001180:	2300      	movs	r3, #0
 8001182:	4699      	mov	r9, r3
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	e69e      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 8001188:	0002      	movs	r2, r0
 800118a:	4322      	orrs	r2, r4
 800118c:	4690      	mov	r8, r2
 800118e:	d11d      	bne.n	80011cc <__aeabi_ddiv+0x350>
 8001190:	2208      	movs	r2, #8
 8001192:	469b      	mov	fp, r3
 8001194:	2302      	movs	r3, #2
 8001196:	2500      	movs	r5, #0
 8001198:	4691      	mov	r9, r2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	e693      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 800119e:	4651      	mov	r1, sl
 80011a0:	4321      	orrs	r1, r4
 80011a2:	d109      	bne.n	80011b8 <__aeabi_ddiv+0x33c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	464a      	mov	r2, r9
 80011a8:	431a      	orrs	r2, r3
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <__aeabi_ddiv+0x390>)
 80011ac:	4691      	mov	r9, r2
 80011ae:	469c      	mov	ip, r3
 80011b0:	2400      	movs	r4, #0
 80011b2:	2002      	movs	r0, #2
 80011b4:	44e3      	add	fp, ip
 80011b6:	e6a1      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011b8:	2303      	movs	r3, #3
 80011ba:	464a      	mov	r2, r9
 80011bc:	431a      	orrs	r2, r3
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <__aeabi_ddiv+0x390>)
 80011c0:	4691      	mov	r9, r2
 80011c2:	469c      	mov	ip, r3
 80011c4:	4651      	mov	r1, sl
 80011c6:	2003      	movs	r0, #3
 80011c8:	44e3      	add	fp, ip
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x80>
 80011cc:	220c      	movs	r2, #12
 80011ce:	469b      	mov	fp, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	46a0      	mov	r8, r4
 80011d4:	4691      	mov	r9, r2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	e675      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011da:	2304      	movs	r3, #4
 80011dc:	4699      	mov	r9, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	469b      	mov	fp, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	2500      	movs	r5, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	e66d      	b.n	8000ec6 <__aeabi_ddiv+0x4a>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	fffffc01 	.word	0xfffffc01
 80011f4:	0800a578 	.word	0x0800a578
 80011f8:	000003ff 	.word	0x000003ff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	000007fe 	.word	0x000007fe
 8001204:	000003f3 	.word	0x000003f3
 8001208:	fffffc0d 	.word	0xfffffc0d
 800120c:	fffff801 	.word	0xfffff801
 8001210:	464a      	mov	r2, r9
 8001212:	2301      	movs	r3, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	4691      	mov	r9, r2
 8001218:	2400      	movs	r4, #0
 800121a:	2001      	movs	r0, #1
 800121c:	e66e      	b.n	8000efc <__aeabi_ddiv+0x80>
 800121e:	2300      	movs	r3, #0
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	469a      	mov	sl, r3
 8001224:	2500      	movs	r5, #0
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <__aeabi_ddiv+0x5cc>)
 8001228:	0312      	lsls	r2, r2, #12
 800122a:	e67e      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800122c:	2501      	movs	r5, #1
 800122e:	426d      	negs	r5, r5
 8001230:	2201      	movs	r2, #1
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	2a38      	cmp	r2, #56	; 0x38
 8001236:	dd00      	ble.n	800123a <__aeabi_ddiv+0x3be>
 8001238:	e674      	b.n	8000f24 <__aeabi_ddiv+0xa8>
 800123a:	2a1f      	cmp	r2, #31
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x3c4>
 800123e:	e0bd      	b.n	80013bc <__aeabi_ddiv+0x540>
 8001240:	211f      	movs	r1, #31
 8001242:	4249      	negs	r1, r1
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	4641      	mov	r1, r8
 8001248:	40d9      	lsrs	r1, r3
 800124a:	000b      	movs	r3, r1
 800124c:	2a20      	cmp	r2, #32
 800124e:	d004      	beq.n	800125a <__aeabi_ddiv+0x3de>
 8001250:	4641      	mov	r1, r8
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <__aeabi_ddiv+0x5d0>)
 8001254:	445a      	add	r2, fp
 8001256:	4091      	lsls	r1, r2
 8001258:	430d      	orrs	r5, r1
 800125a:	0029      	movs	r1, r5
 800125c:	1e4a      	subs	r2, r1, #1
 800125e:	4191      	sbcs	r1, r2
 8001260:	4319      	orrs	r1, r3
 8001262:	2307      	movs	r3, #7
 8001264:	001d      	movs	r5, r3
 8001266:	2200      	movs	r2, #0
 8001268:	400d      	ands	r5, r1
 800126a:	420b      	tst	r3, r1
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x3f4>
 800126e:	e0d0      	b.n	8001412 <__aeabi_ddiv+0x596>
 8001270:	220f      	movs	r2, #15
 8001272:	2300      	movs	r3, #0
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x400>
 800127a:	e0c7      	b.n	800140c <__aeabi_ddiv+0x590>
 800127c:	1d0a      	adds	r2, r1, #4
 800127e:	428a      	cmp	r2, r1
 8001280:	4189      	sbcs	r1, r1
 8001282:	4249      	negs	r1, r1
 8001284:	185b      	adds	r3, r3, r1
 8001286:	0011      	movs	r1, r2
 8001288:	021a      	lsls	r2, r3, #8
 800128a:	d400      	bmi.n	800128e <__aeabi_ddiv+0x412>
 800128c:	e0be      	b.n	800140c <__aeabi_ddiv+0x590>
 800128e:	2301      	movs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	2500      	movs	r5, #0
 8001294:	e649      	b.n	8000f2a <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	4213      	tst	r3, r2
 800129e:	d008      	beq.n	80012b2 <__aeabi_ddiv+0x436>
 80012a0:	4214      	tst	r4, r2
 80012a2:	d106      	bne.n	80012b2 <__aeabi_ddiv+0x436>
 80012a4:	4322      	orrs	r2, r4
 80012a6:	0312      	lsls	r2, r2, #12
 80012a8:	46ba      	mov	sl, r7
 80012aa:	000d      	movs	r5, r1
 80012ac:	4b66      	ldr	r3, [pc, #408]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012ae:	0b12      	lsrs	r2, r2, #12
 80012b0:	e63b      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	4643      	mov	r3, r8
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	431a      	orrs	r2, r3
 80012ba:	0312      	lsls	r2, r2, #12
 80012bc:	46b2      	mov	sl, r6
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <__aeabi_ddiv+0x5cc>)
 80012c0:	0b12      	lsrs	r2, r2, #12
 80012c2:	e632      	b.n	8000f2a <__aeabi_ddiv+0xae>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_ddiv+0x44e>
 80012c8:	e702      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80012ca:	19a6      	adds	r6, r4, r6
 80012cc:	1e6a      	subs	r2, r5, #1
 80012ce:	42a6      	cmp	r6, r4
 80012d0:	d200      	bcs.n	80012d4 <__aeabi_ddiv+0x458>
 80012d2:	e089      	b.n	80013e8 <__aeabi_ddiv+0x56c>
 80012d4:	4286      	cmp	r6, r0
 80012d6:	d200      	bcs.n	80012da <__aeabi_ddiv+0x45e>
 80012d8:	e09f      	b.n	800141a <__aeabi_ddiv+0x59e>
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x462>
 80012dc:	e0af      	b.n	800143e <__aeabi_ddiv+0x5c2>
 80012de:	0015      	movs	r5, r2
 80012e0:	e6f4      	b.n	80010cc <__aeabi_ddiv+0x250>
 80012e2:	42a9      	cmp	r1, r5
 80012e4:	d900      	bls.n	80012e8 <__aeabi_ddiv+0x46c>
 80012e6:	e63c      	b.n	8000f62 <__aeabi_ddiv+0xe6>
 80012e8:	4643      	mov	r3, r8
 80012ea:	07de      	lsls	r6, r3, #31
 80012ec:	0858      	lsrs	r0, r3, #1
 80012ee:	086b      	lsrs	r3, r5, #1
 80012f0:	431e      	orrs	r6, r3
 80012f2:	07ed      	lsls	r5, r5, #31
 80012f4:	e63c      	b.n	8000f70 <__aeabi_ddiv+0xf4>
 80012f6:	f001 f92f 	bl	8002558 <__clzsi2>
 80012fa:	0001      	movs	r1, r0
 80012fc:	0002      	movs	r2, r0
 80012fe:	3115      	adds	r1, #21
 8001300:	3220      	adds	r2, #32
 8001302:	291c      	cmp	r1, #28
 8001304:	dc00      	bgt.n	8001308 <__aeabi_ddiv+0x48c>
 8001306:	e72c      	b.n	8001162 <__aeabi_ddiv+0x2e6>
 8001308:	464b      	mov	r3, r9
 800130a:	3808      	subs	r0, #8
 800130c:	4083      	lsls	r3, r0
 800130e:	2500      	movs	r5, #0
 8001310:	4698      	mov	r8, r3
 8001312:	e732      	b.n	800117a <__aeabi_ddiv+0x2fe>
 8001314:	f001 f920 	bl	8002558 <__clzsi2>
 8001318:	0003      	movs	r3, r0
 800131a:	001a      	movs	r2, r3
 800131c:	3215      	adds	r2, #21
 800131e:	3020      	adds	r0, #32
 8001320:	2a1c      	cmp	r2, #28
 8001322:	dc00      	bgt.n	8001326 <__aeabi_ddiv+0x4aa>
 8001324:	e6ff      	b.n	8001126 <__aeabi_ddiv+0x2aa>
 8001326:	4654      	mov	r4, sl
 8001328:	3b08      	subs	r3, #8
 800132a:	2100      	movs	r1, #0
 800132c:	409c      	lsls	r4, r3
 800132e:	e705      	b.n	800113c <__aeabi_ddiv+0x2c0>
 8001330:	1936      	adds	r6, r6, r4
 8001332:	3b01      	subs	r3, #1
 8001334:	42b4      	cmp	r4, r6
 8001336:	d900      	bls.n	800133a <__aeabi_ddiv+0x4be>
 8001338:	e6a6      	b.n	8001088 <__aeabi_ddiv+0x20c>
 800133a:	42b2      	cmp	r2, r6
 800133c:	d800      	bhi.n	8001340 <__aeabi_ddiv+0x4c4>
 800133e:	e6a3      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001340:	1e83      	subs	r3, r0, #2
 8001342:	1936      	adds	r6, r6, r4
 8001344:	e6a0      	b.n	8001088 <__aeabi_ddiv+0x20c>
 8001346:	1909      	adds	r1, r1, r4
 8001348:	3d01      	subs	r5, #1
 800134a:	428c      	cmp	r4, r1
 800134c:	d900      	bls.n	8001350 <__aeabi_ddiv+0x4d4>
 800134e:	e68d      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001350:	428a      	cmp	r2, r1
 8001352:	d800      	bhi.n	8001356 <__aeabi_ddiv+0x4da>
 8001354:	e68a      	b.n	800106c <__aeabi_ddiv+0x1f0>
 8001356:	1e85      	subs	r5, r0, #2
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e687      	b.n	800106c <__aeabi_ddiv+0x1f0>
 800135c:	220f      	movs	r2, #15
 800135e:	402a      	ands	r2, r5
 8001360:	2a04      	cmp	r2, #4
 8001362:	d100      	bne.n	8001366 <__aeabi_ddiv+0x4ea>
 8001364:	e6bc      	b.n	80010e0 <__aeabi_ddiv+0x264>
 8001366:	1d29      	adds	r1, r5, #4
 8001368:	42a9      	cmp	r1, r5
 800136a:	41ad      	sbcs	r5, r5
 800136c:	426d      	negs	r5, r5
 800136e:	08c9      	lsrs	r1, r1, #3
 8001370:	44a8      	add	r8, r5
 8001372:	e6b6      	b.n	80010e2 <__aeabi_ddiv+0x266>
 8001374:	42af      	cmp	r7, r5
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4fe>
 8001378:	e662      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 800137a:	4281      	cmp	r1, r0
 800137c:	d804      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 800137e:	d000      	beq.n	8001382 <__aeabi_ddiv+0x506>
 8001380:	e65e      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001382:	42ae      	cmp	r6, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x50c>
 8001386:	e65b      	b.n	8001040 <__aeabi_ddiv+0x1c4>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9b00      	ldr	r3, [sp, #0]
 8001390:	44e0      	add	r8, ip
 8001392:	469c      	mov	ip, r3
 8001394:	4465      	add	r5, ip
 8001396:	429d      	cmp	r5, r3
 8001398:	419b      	sbcs	r3, r3
 800139a:	425b      	negs	r3, r3
 800139c:	191b      	adds	r3, r3, r4
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e64f      	b.n	8001042 <__aeabi_ddiv+0x1c6>
 80013a2:	42b2      	cmp	r2, r6
 80013a4:	d800      	bhi.n	80013a8 <__aeabi_ddiv+0x52c>
 80013a6:	e612      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013a8:	1e83      	subs	r3, r0, #2
 80013aa:	1936      	adds	r6, r6, r4
 80013ac:	e60f      	b.n	8000fce <__aeabi_ddiv+0x152>
 80013ae:	428a      	cmp	r2, r1
 80013b0:	d800      	bhi.n	80013b4 <__aeabi_ddiv+0x538>
 80013b2:	e5fa      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013b4:	1e83      	subs	r3, r0, #2
 80013b6:	4698      	mov	r8, r3
 80013b8:	1909      	adds	r1, r1, r4
 80013ba:	e5f6      	b.n	8000faa <__aeabi_ddiv+0x12e>
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <__aeabi_ddiv+0x5d4>)
 80013be:	0028      	movs	r0, r5
 80013c0:	445b      	add	r3, fp
 80013c2:	4641      	mov	r1, r8
 80013c4:	409d      	lsls	r5, r3
 80013c6:	4099      	lsls	r1, r3
 80013c8:	40d0      	lsrs	r0, r2
 80013ca:	1e6b      	subs	r3, r5, #1
 80013cc:	419d      	sbcs	r5, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4301      	orrs	r1, r0
 80013d2:	4329      	orrs	r1, r5
 80013d4:	40d3      	lsrs	r3, r2
 80013d6:	074a      	lsls	r2, r1, #29
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x560>
 80013da:	e755      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013dc:	220f      	movs	r2, #15
 80013de:	400a      	ands	r2, r1
 80013e0:	2a04      	cmp	r2, #4
 80013e2:	d000      	beq.n	80013e6 <__aeabi_ddiv+0x56a>
 80013e4:	e74a      	b.n	800127c <__aeabi_ddiv+0x400>
 80013e6:	e74f      	b.n	8001288 <__aeabi_ddiv+0x40c>
 80013e8:	0015      	movs	r5, r2
 80013ea:	4286      	cmp	r6, r0
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0x574>
 80013ee:	e66d      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f0:	9a00      	ldr	r2, [sp, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x57c>
 80013f6:	e669      	b.n	80010cc <__aeabi_ddiv+0x250>
 80013f8:	e66a      	b.n	80010d0 <__aeabi_ddiv+0x254>
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <__aeabi_ddiv+0x5d8>)
 80013fc:	445b      	add	r3, fp
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc00      	bgt.n	8001404 <__aeabi_ddiv+0x588>
 8001402:	e713      	b.n	800122c <__aeabi_ddiv+0x3b0>
 8001404:	2501      	movs	r5, #1
 8001406:	2100      	movs	r1, #0
 8001408:	44a8      	add	r8, r5
 800140a:	e66a      	b.n	80010e2 <__aeabi_ddiv+0x266>
 800140c:	075d      	lsls	r5, r3, #29
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	0b1a      	lsrs	r2, r3, #12
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	2300      	movs	r3, #0
 8001416:	430d      	orrs	r5, r1
 8001418:	e587      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800141a:	9900      	ldr	r1, [sp, #0]
 800141c:	3d02      	subs	r5, #2
 800141e:	004a      	lsls	r2, r1, #1
 8001420:	428a      	cmp	r2, r1
 8001422:	41bf      	sbcs	r7, r7
 8001424:	427f      	negs	r7, r7
 8001426:	193f      	adds	r7, r7, r4
 8001428:	19f6      	adds	r6, r6, r7
 800142a:	9200      	str	r2, [sp, #0]
 800142c:	e7dd      	b.n	80013ea <__aeabi_ddiv+0x56e>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	4643      	mov	r3, r8
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	431a      	orrs	r2, r3
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <__aeabi_ddiv+0x5cc>)
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	e575      	b.n	8000f2a <__aeabi_ddiv+0xae>
 800143e:	9900      	ldr	r1, [sp, #0]
 8001440:	4299      	cmp	r1, r3
 8001442:	d3ea      	bcc.n	800141a <__aeabi_ddiv+0x59e>
 8001444:	0015      	movs	r5, r2
 8001446:	e7d3      	b.n	80013f0 <__aeabi_ddiv+0x574>
 8001448:	000007ff 	.word	0x000007ff
 800144c:	0000043e 	.word	0x0000043e
 8001450:	0000041e 	.word	0x0000041e
 8001454:	000003ff 	.word	0x000003ff

08001458 <__eqdf2>:
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	464e      	mov	r6, r9
 800145c:	4645      	mov	r5, r8
 800145e:	46de      	mov	lr, fp
 8001460:	4657      	mov	r7, sl
 8001462:	4690      	mov	r8, r2
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	0017      	movs	r7, r2
 8001468:	031a      	lsls	r2, r3, #12
 800146a:	0b12      	lsrs	r2, r2, #12
 800146c:	0005      	movs	r5, r0
 800146e:	4684      	mov	ip, r0
 8001470:	4819      	ldr	r0, [pc, #100]	; (80014d8 <__eqdf2+0x80>)
 8001472:	030e      	lsls	r6, r1, #12
 8001474:	004c      	lsls	r4, r1, #1
 8001476:	4691      	mov	r9, r2
 8001478:	005a      	lsls	r2, r3, #1
 800147a:	0fdb      	lsrs	r3, r3, #31
 800147c:	469b      	mov	fp, r3
 800147e:	0b36      	lsrs	r6, r6, #12
 8001480:	0d64      	lsrs	r4, r4, #21
 8001482:	0fc9      	lsrs	r1, r1, #31
 8001484:	0d52      	lsrs	r2, r2, #21
 8001486:	4284      	cmp	r4, r0
 8001488:	d019      	beq.n	80014be <__eqdf2+0x66>
 800148a:	4282      	cmp	r2, r0
 800148c:	d010      	beq.n	80014b0 <__eqdf2+0x58>
 800148e:	2001      	movs	r0, #1
 8001490:	4294      	cmp	r4, r2
 8001492:	d10e      	bne.n	80014b2 <__eqdf2+0x5a>
 8001494:	454e      	cmp	r6, r9
 8001496:	d10c      	bne.n	80014b2 <__eqdf2+0x5a>
 8001498:	2001      	movs	r0, #1
 800149a:	45c4      	cmp	ip, r8
 800149c:	d109      	bne.n	80014b2 <__eqdf2+0x5a>
 800149e:	4559      	cmp	r1, fp
 80014a0:	d017      	beq.n	80014d2 <__eqdf2+0x7a>
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d105      	bne.n	80014b2 <__eqdf2+0x5a>
 80014a6:	0030      	movs	r0, r6
 80014a8:	4328      	orrs	r0, r5
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
 80014ae:	e000      	b.n	80014b2 <__eqdf2+0x5a>
 80014b0:	2001      	movs	r0, #1
 80014b2:	bcf0      	pop	{r4, r5, r6, r7}
 80014b4:	46bb      	mov	fp, r7
 80014b6:	46b2      	mov	sl, r6
 80014b8:	46a9      	mov	r9, r5
 80014ba:	46a0      	mov	r8, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	0033      	movs	r3, r6
 80014c0:	2001      	movs	r0, #1
 80014c2:	432b      	orrs	r3, r5
 80014c4:	d1f5      	bne.n	80014b2 <__eqdf2+0x5a>
 80014c6:	42a2      	cmp	r2, r4
 80014c8:	d1f3      	bne.n	80014b2 <__eqdf2+0x5a>
 80014ca:	464b      	mov	r3, r9
 80014cc:	433b      	orrs	r3, r7
 80014ce:	d1f0      	bne.n	80014b2 <__eqdf2+0x5a>
 80014d0:	e7e2      	b.n	8001498 <__eqdf2+0x40>
 80014d2:	2000      	movs	r0, #0
 80014d4:	e7ed      	b.n	80014b2 <__eqdf2+0x5a>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__gedf2>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4647      	mov	r7, r8
 80014e0:	46ce      	mov	lr, r9
 80014e2:	0004      	movs	r4, r0
 80014e4:	0018      	movs	r0, r3
 80014e6:	0016      	movs	r6, r2
 80014e8:	031b      	lsls	r3, r3, #12
 80014ea:	0b1b      	lsrs	r3, r3, #12
 80014ec:	4d2d      	ldr	r5, [pc, #180]	; (80015a4 <__gedf2+0xc8>)
 80014ee:	004a      	lsls	r2, r1, #1
 80014f0:	4699      	mov	r9, r3
 80014f2:	b580      	push	{r7, lr}
 80014f4:	0043      	lsls	r3, r0, #1
 80014f6:	030f      	lsls	r7, r1, #12
 80014f8:	46a4      	mov	ip, r4
 80014fa:	46b0      	mov	r8, r6
 80014fc:	0b3f      	lsrs	r7, r7, #12
 80014fe:	0d52      	lsrs	r2, r2, #21
 8001500:	0fc9      	lsrs	r1, r1, #31
 8001502:	0d5b      	lsrs	r3, r3, #21
 8001504:	0fc0      	lsrs	r0, r0, #31
 8001506:	42aa      	cmp	r2, r5
 8001508:	d021      	beq.n	800154e <__gedf2+0x72>
 800150a:	42ab      	cmp	r3, r5
 800150c:	d013      	beq.n	8001536 <__gedf2+0x5a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d122      	bne.n	8001558 <__gedf2+0x7c>
 8001512:	433c      	orrs	r4, r7
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <__gedf2+0x42>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d022      	beq.n	8001564 <__gedf2+0x88>
 800151e:	2c00      	cmp	r4, #0
 8001520:	d010      	beq.n	8001544 <__gedf2+0x68>
 8001522:	4281      	cmp	r1, r0
 8001524:	d022      	beq.n	800156c <__gedf2+0x90>
 8001526:	2002      	movs	r0, #2
 8001528:	3901      	subs	r1, #1
 800152a:	4008      	ands	r0, r1
 800152c:	3801      	subs	r0, #1
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	464d      	mov	r5, r9
 8001538:	432e      	orrs	r6, r5
 800153a:	d129      	bne.n	8001590 <__gedf2+0xb4>
 800153c:	2a00      	cmp	r2, #0
 800153e:	d1f0      	bne.n	8001522 <__gedf2+0x46>
 8001540:	433c      	orrs	r4, r7
 8001542:	d1ee      	bne.n	8001522 <__gedf2+0x46>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f2      	bne.n	800152e <__gedf2+0x52>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7ef      	b.n	800152e <__gedf2+0x52>
 800154e:	003d      	movs	r5, r7
 8001550:	4325      	orrs	r5, r4
 8001552:	d11d      	bne.n	8001590 <__gedf2+0xb4>
 8001554:	4293      	cmp	r3, r2
 8001556:	d0ee      	beq.n	8001536 <__gedf2+0x5a>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e2      	bne.n	8001522 <__gedf2+0x46>
 800155c:	464c      	mov	r4, r9
 800155e:	4326      	orrs	r6, r4
 8001560:	d1df      	bne.n	8001522 <__gedf2+0x46>
 8001562:	e7e0      	b.n	8001526 <__gedf2+0x4a>
 8001564:	2000      	movs	r0, #0
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0e1      	beq.n	800152e <__gedf2+0x52>
 800156a:	e7dc      	b.n	8001526 <__gedf2+0x4a>
 800156c:	429a      	cmp	r2, r3
 800156e:	dc0a      	bgt.n	8001586 <__gedf2+0xaa>
 8001570:	dbe8      	blt.n	8001544 <__gedf2+0x68>
 8001572:	454f      	cmp	r7, r9
 8001574:	d8d7      	bhi.n	8001526 <__gedf2+0x4a>
 8001576:	d00e      	beq.n	8001596 <__gedf2+0xba>
 8001578:	2000      	movs	r0, #0
 800157a:	454f      	cmp	r7, r9
 800157c:	d2d7      	bcs.n	800152e <__gedf2+0x52>
 800157e:	2900      	cmp	r1, #0
 8001580:	d0e2      	beq.n	8001548 <__gedf2+0x6c>
 8001582:	0008      	movs	r0, r1
 8001584:	e7d3      	b.n	800152e <__gedf2+0x52>
 8001586:	4243      	negs	r3, r0
 8001588:	4158      	adcs	r0, r3
 800158a:	0040      	lsls	r0, r0, #1
 800158c:	3801      	subs	r0, #1
 800158e:	e7ce      	b.n	800152e <__gedf2+0x52>
 8001590:	2002      	movs	r0, #2
 8001592:	4240      	negs	r0, r0
 8001594:	e7cb      	b.n	800152e <__gedf2+0x52>
 8001596:	45c4      	cmp	ip, r8
 8001598:	d8c5      	bhi.n	8001526 <__gedf2+0x4a>
 800159a:	2000      	movs	r0, #0
 800159c:	45c4      	cmp	ip, r8
 800159e:	d2c6      	bcs.n	800152e <__gedf2+0x52>
 80015a0:	e7ed      	b.n	800157e <__gedf2+0xa2>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	000007ff 	.word	0x000007ff

080015a8 <__ledf2>:
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	4647      	mov	r7, r8
 80015ac:	46ce      	mov	lr, r9
 80015ae:	0004      	movs	r4, r0
 80015b0:	0018      	movs	r0, r3
 80015b2:	0016      	movs	r6, r2
 80015b4:	031b      	lsls	r3, r3, #12
 80015b6:	0b1b      	lsrs	r3, r3, #12
 80015b8:	4d2c      	ldr	r5, [pc, #176]	; (800166c <__ledf2+0xc4>)
 80015ba:	004a      	lsls	r2, r1, #1
 80015bc:	4699      	mov	r9, r3
 80015be:	b580      	push	{r7, lr}
 80015c0:	0043      	lsls	r3, r0, #1
 80015c2:	030f      	lsls	r7, r1, #12
 80015c4:	46a4      	mov	ip, r4
 80015c6:	46b0      	mov	r8, r6
 80015c8:	0b3f      	lsrs	r7, r7, #12
 80015ca:	0d52      	lsrs	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	0d5b      	lsrs	r3, r3, #21
 80015d0:	0fc0      	lsrs	r0, r0, #31
 80015d2:	42aa      	cmp	r2, r5
 80015d4:	d00d      	beq.n	80015f2 <__ledf2+0x4a>
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	d010      	beq.n	80015fc <__ledf2+0x54>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d127      	bne.n	800162e <__ledf2+0x86>
 80015de:	433c      	orrs	r4, r7
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <__ledf2+0x60>
 80015e4:	464d      	mov	r5, r9
 80015e6:	432e      	orrs	r6, r5
 80015e8:	d10e      	bne.n	8001608 <__ledf2+0x60>
 80015ea:	2000      	movs	r0, #0
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d015      	beq.n	800161c <__ledf2+0x74>
 80015f0:	e00e      	b.n	8001610 <__ledf2+0x68>
 80015f2:	003d      	movs	r5, r7
 80015f4:	4325      	orrs	r5, r4
 80015f6:	d110      	bne.n	800161a <__ledf2+0x72>
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d118      	bne.n	800162e <__ledf2+0x86>
 80015fc:	464d      	mov	r5, r9
 80015fe:	432e      	orrs	r6, r5
 8001600:	d10b      	bne.n	800161a <__ledf2+0x72>
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <__ledf2+0x64>
 8001606:	433c      	orrs	r4, r7
 8001608:	2c00      	cmp	r4, #0
 800160a:	d00b      	beq.n	8001624 <__ledf2+0x7c>
 800160c:	4281      	cmp	r1, r0
 800160e:	d014      	beq.n	800163a <__ledf2+0x92>
 8001610:	2002      	movs	r0, #2
 8001612:	3901      	subs	r1, #1
 8001614:	4008      	ands	r0, r1
 8001616:	3801      	subs	r0, #1
 8001618:	e000      	b.n	800161c <__ledf2+0x74>
 800161a:	2002      	movs	r0, #2
 800161c:	bcc0      	pop	{r6, r7}
 800161e:	46b9      	mov	r9, r7
 8001620:	46b0      	mov	r8, r6
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f9      	bne.n	800161c <__ledf2+0x74>
 8001628:	2001      	movs	r0, #1
 800162a:	4240      	negs	r0, r0
 800162c:	e7f6      	b.n	800161c <__ledf2+0x74>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <__ledf2+0x64>
 8001632:	464c      	mov	r4, r9
 8001634:	4326      	orrs	r6, r4
 8001636:	d1e9      	bne.n	800160c <__ledf2+0x64>
 8001638:	e7ea      	b.n	8001610 <__ledf2+0x68>
 800163a:	429a      	cmp	r2, r3
 800163c:	dd04      	ble.n	8001648 <__ledf2+0xa0>
 800163e:	4243      	negs	r3, r0
 8001640:	4158      	adcs	r0, r3
 8001642:	0040      	lsls	r0, r0, #1
 8001644:	3801      	subs	r0, #1
 8001646:	e7e9      	b.n	800161c <__ledf2+0x74>
 8001648:	429a      	cmp	r2, r3
 800164a:	dbeb      	blt.n	8001624 <__ledf2+0x7c>
 800164c:	454f      	cmp	r7, r9
 800164e:	d8df      	bhi.n	8001610 <__ledf2+0x68>
 8001650:	d006      	beq.n	8001660 <__ledf2+0xb8>
 8001652:	2000      	movs	r0, #0
 8001654:	454f      	cmp	r7, r9
 8001656:	d2e1      	bcs.n	800161c <__ledf2+0x74>
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e5      	beq.n	8001628 <__ledf2+0x80>
 800165c:	0008      	movs	r0, r1
 800165e:	e7dd      	b.n	800161c <__ledf2+0x74>
 8001660:	45c4      	cmp	ip, r8
 8001662:	d8d5      	bhi.n	8001610 <__ledf2+0x68>
 8001664:	2000      	movs	r0, #0
 8001666:	45c4      	cmp	ip, r8
 8001668:	d2d8      	bcs.n	800161c <__ledf2+0x74>
 800166a:	e7f5      	b.n	8001658 <__ledf2+0xb0>
 800166c:	000007ff 	.word	0x000007ff

08001670 <__aeabi_dmul>:
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	b5e0      	push	{r5, r6, r7, lr}
 800167c:	001f      	movs	r7, r3
 800167e:	030b      	lsls	r3, r1, #12
 8001680:	0b1b      	lsrs	r3, r3, #12
 8001682:	469b      	mov	fp, r3
 8001684:	004d      	lsls	r5, r1, #1
 8001686:	0fcb      	lsrs	r3, r1, #31
 8001688:	0004      	movs	r4, r0
 800168a:	4691      	mov	r9, r2
 800168c:	4698      	mov	r8, r3
 800168e:	b087      	sub	sp, #28
 8001690:	0d6d      	lsrs	r5, r5, #21
 8001692:	d100      	bne.n	8001696 <__aeabi_dmul+0x26>
 8001694:	e1cd      	b.n	8001a32 <__aeabi_dmul+0x3c2>
 8001696:	4bce      	ldr	r3, [pc, #824]	; (80019d0 <__aeabi_dmul+0x360>)
 8001698:	429d      	cmp	r5, r3
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x2e>
 800169c:	e1e9      	b.n	8001a72 <__aeabi_dmul+0x402>
 800169e:	465a      	mov	r2, fp
 80016a0:	0f43      	lsrs	r3, r0, #29
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0412      	lsls	r2, r2, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	00c3      	lsls	r3, r0, #3
 80016ae:	469a      	mov	sl, r3
 80016b0:	4bc8      	ldr	r3, [pc, #800]	; (80019d4 <__aeabi_dmul+0x364>)
 80016b2:	4693      	mov	fp, r2
 80016b4:	469c      	mov	ip, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	2600      	movs	r6, #0
 80016ba:	4465      	add	r5, ip
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033c      	lsls	r4, r7, #12
 80016c0:	007b      	lsls	r3, r7, #1
 80016c2:	4648      	mov	r0, r9
 80016c4:	0b24      	lsrs	r4, r4, #12
 80016c6:	0d5b      	lsrs	r3, r3, #21
 80016c8:	0fff      	lsrs	r7, r7, #31
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dmul+0x60>
 80016ce:	e189      	b.n	80019e4 <__aeabi_dmul+0x374>
 80016d0:	4abf      	ldr	r2, [pc, #764]	; (80019d0 <__aeabi_dmul+0x360>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d019      	beq.n	800170a <__aeabi_dmul+0x9a>
 80016d6:	0f42      	lsrs	r2, r0, #29
 80016d8:	00e4      	lsls	r4, r4, #3
 80016da:	4322      	orrs	r2, r4
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	0424      	lsls	r4, r4, #16
 80016e0:	4314      	orrs	r4, r2
 80016e2:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <__aeabi_dmul+0x364>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4694      	mov	ip, r2
 80016e8:	4642      	mov	r2, r8
 80016ea:	4463      	add	r3, ip
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	407a      	eors	r2, r7
 80016f4:	3301      	adds	r3, #1
 80016f6:	00c0      	lsls	r0, r0, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd1c      	ble.n	800173a <__aeabi_dmul+0xca>
 8001700:	003a      	movs	r2, r7
 8001702:	2e0b      	cmp	r6, #11
 8001704:	d05e      	beq.n	80017c4 <__aeabi_dmul+0x154>
 8001706:	4647      	mov	r7, r8
 8001708:	e056      	b.n	80017b8 <__aeabi_dmul+0x148>
 800170a:	4649      	mov	r1, r9
 800170c:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <__aeabi_dmul+0x360>)
 800170e:	4321      	orrs	r1, r4
 8001710:	18eb      	adds	r3, r5, r3
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	2900      	cmp	r1, #0
 8001716:	d12a      	bne.n	800176e <__aeabi_dmul+0xfe>
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	2202      	movs	r2, #2
 800171c:	0100      	lsls	r0, r0, #4
 800171e:	002b      	movs	r3, r5
 8001720:	4684      	mov	ip, r0
 8001722:	4316      	orrs	r6, r2
 8001724:	4642      	mov	r2, r8
 8001726:	4463      	add	r3, ip
 8001728:	407a      	eors	r2, r7
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2e0a      	cmp	r6, #10
 8001730:	dd00      	ble.n	8001734 <__aeabi_dmul+0xc4>
 8001732:	e231      	b.n	8001b98 <__aeabi_dmul+0x528>
 8001734:	2000      	movs	r0, #0
 8001736:	2400      	movs	r4, #0
 8001738:	2102      	movs	r1, #2
 800173a:	2e02      	cmp	r6, #2
 800173c:	dc26      	bgt.n	800178c <__aeabi_dmul+0x11c>
 800173e:	3e01      	subs	r6, #1
 8001740:	2e01      	cmp	r6, #1
 8001742:	d852      	bhi.n	80017ea <__aeabi_dmul+0x17a>
 8001744:	2902      	cmp	r1, #2
 8001746:	d04c      	beq.n	80017e2 <__aeabi_dmul+0x172>
 8001748:	2901      	cmp	r1, #1
 800174a:	d000      	beq.n	800174e <__aeabi_dmul+0xde>
 800174c:	e118      	b.n	8001980 <__aeabi_dmul+0x310>
 800174e:	2300      	movs	r3, #0
 8001750:	2400      	movs	r4, #0
 8001752:	2500      	movs	r5, #0
 8001754:	051b      	lsls	r3, r3, #20
 8001756:	4323      	orrs	r3, r4
 8001758:	07d2      	lsls	r2, r2, #31
 800175a:	4313      	orrs	r3, r2
 800175c:	0028      	movs	r0, r5
 800175e:	0019      	movs	r1, r3
 8001760:	b007      	add	sp, #28
 8001762:	bcf0      	pop	{r4, r5, r6, r7}
 8001764:	46bb      	mov	fp, r7
 8001766:	46b2      	mov	sl, r6
 8001768:	46a9      	mov	r9, r5
 800176a:	46a0      	mov	r8, r4
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	2203      	movs	r2, #3
 8001772:	0109      	lsls	r1, r1, #4
 8001774:	002b      	movs	r3, r5
 8001776:	468c      	mov	ip, r1
 8001778:	4316      	orrs	r6, r2
 800177a:	4642      	mov	r2, r8
 800177c:	4463      	add	r3, ip
 800177e:	407a      	eors	r2, r7
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	9302      	str	r3, [sp, #8]
 8001784:	2e0a      	cmp	r6, #10
 8001786:	dd00      	ble.n	800178a <__aeabi_dmul+0x11a>
 8001788:	e228      	b.n	8001bdc <__aeabi_dmul+0x56c>
 800178a:	2103      	movs	r1, #3
 800178c:	2501      	movs	r5, #1
 800178e:	40b5      	lsls	r5, r6
 8001790:	46ac      	mov	ip, r5
 8001792:	26a6      	movs	r6, #166	; 0xa6
 8001794:	4663      	mov	r3, ip
 8001796:	00f6      	lsls	r6, r6, #3
 8001798:	4035      	ands	r5, r6
 800179a:	4233      	tst	r3, r6
 800179c:	d10b      	bne.n	80017b6 <__aeabi_dmul+0x146>
 800179e:	2690      	movs	r6, #144	; 0x90
 80017a0:	00b6      	lsls	r6, r6, #2
 80017a2:	4233      	tst	r3, r6
 80017a4:	d118      	bne.n	80017d8 <__aeabi_dmul+0x168>
 80017a6:	3eb9      	subs	r6, #185	; 0xb9
 80017a8:	3eff      	subs	r6, #255	; 0xff
 80017aa:	421e      	tst	r6, r3
 80017ac:	d01d      	beq.n	80017ea <__aeabi_dmul+0x17a>
 80017ae:	46a3      	mov	fp, r4
 80017b0:	4682      	mov	sl, r0
 80017b2:	9100      	str	r1, [sp, #0]
 80017b4:	e000      	b.n	80017b8 <__aeabi_dmul+0x148>
 80017b6:	0017      	movs	r7, r2
 80017b8:	9900      	ldr	r1, [sp, #0]
 80017ba:	003a      	movs	r2, r7
 80017bc:	2902      	cmp	r1, #2
 80017be:	d010      	beq.n	80017e2 <__aeabi_dmul+0x172>
 80017c0:	465c      	mov	r4, fp
 80017c2:	4650      	mov	r0, sl
 80017c4:	2903      	cmp	r1, #3
 80017c6:	d1bf      	bne.n	8001748 <__aeabi_dmul+0xd8>
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	031b      	lsls	r3, r3, #12
 80017cc:	431c      	orrs	r4, r3
 80017ce:	0324      	lsls	r4, r4, #12
 80017d0:	0005      	movs	r5, r0
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <__aeabi_dmul+0x360>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e7bd      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	2200      	movs	r2, #0
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <__aeabi_dmul+0x360>)
 80017de:	0324      	lsls	r4, r4, #12
 80017e0:	e7b8      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017e2:	2400      	movs	r4, #0
 80017e4:	2500      	movs	r5, #0
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <__aeabi_dmul+0x360>)
 80017e8:	e7b4      	b.n	8001754 <__aeabi_dmul+0xe4>
 80017ea:	4653      	mov	r3, sl
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	0c1f      	lsrs	r7, r3, #16
 80017f2:	0033      	movs	r3, r6
 80017f4:	0c01      	lsrs	r1, r0, #16
 80017f6:	0400      	lsls	r0, r0, #16
 80017f8:	0c00      	lsrs	r0, r0, #16
 80017fa:	4343      	muls	r3, r0
 80017fc:	4698      	mov	r8, r3
 80017fe:	0003      	movs	r3, r0
 8001800:	437b      	muls	r3, r7
 8001802:	4699      	mov	r9, r3
 8001804:	0033      	movs	r3, r6
 8001806:	434b      	muls	r3, r1
 8001808:	469c      	mov	ip, r3
 800180a:	4643      	mov	r3, r8
 800180c:	000d      	movs	r5, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	469a      	mov	sl, r3
 8001812:	437d      	muls	r5, r7
 8001814:	44cc      	add	ip, r9
 8001816:	44d4      	add	ip, sl
 8001818:	9500      	str	r5, [sp, #0]
 800181a:	45e1      	cmp	r9, ip
 800181c:	d904      	bls.n	8001828 <__aeabi_dmul+0x1b8>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444d      	add	r5, r9
 8001826:	9500      	str	r5, [sp, #0]
 8001828:	4663      	mov	r3, ip
 800182a:	0c1b      	lsrs	r3, r3, #16
 800182c:	001d      	movs	r5, r3
 800182e:	4663      	mov	r3, ip
 8001830:	041b      	lsls	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	4643      	mov	r3, r8
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	4698      	mov	r8, r3
 800183c:	4663      	mov	r3, ip
 800183e:	4443      	add	r3, r8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	0c23      	lsrs	r3, r4, #16
 8001844:	4698      	mov	r8, r3
 8001846:	0033      	movs	r3, r6
 8001848:	0424      	lsls	r4, r4, #16
 800184a:	0c24      	lsrs	r4, r4, #16
 800184c:	4363      	muls	r3, r4
 800184e:	469c      	mov	ip, r3
 8001850:	0023      	movs	r3, r4
 8001852:	437b      	muls	r3, r7
 8001854:	4699      	mov	r9, r3
 8001856:	4643      	mov	r3, r8
 8001858:	435e      	muls	r6, r3
 800185a:	435f      	muls	r7, r3
 800185c:	444e      	add	r6, r9
 800185e:	4663      	mov	r3, ip
 8001860:	46b2      	mov	sl, r6
 8001862:	0c1e      	lsrs	r6, r3, #16
 8001864:	4456      	add	r6, sl
 8001866:	45b1      	cmp	r9, r6
 8001868:	d903      	bls.n	8001872 <__aeabi_dmul+0x202>
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4699      	mov	r9, r3
 8001870:	444f      	add	r7, r9
 8001872:	0c33      	lsrs	r3, r6, #16
 8001874:	4699      	mov	r9, r3
 8001876:	003b      	movs	r3, r7
 8001878:	444b      	add	r3, r9
 800187a:	9305      	str	r3, [sp, #20]
 800187c:	4663      	mov	r3, ip
 800187e:	46ac      	mov	ip, r5
 8001880:	041f      	lsls	r7, r3, #16
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	0436      	lsls	r6, r6, #16
 8001886:	19f6      	adds	r6, r6, r7
 8001888:	44b4      	add	ip, r6
 800188a:	4663      	mov	r3, ip
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	465b      	mov	r3, fp
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	469c      	mov	ip, r3
 8001894:	465b      	mov	r3, fp
 8001896:	041f      	lsls	r7, r3, #16
 8001898:	0c3f      	lsrs	r7, r7, #16
 800189a:	003b      	movs	r3, r7
 800189c:	4343      	muls	r3, r0
 800189e:	4699      	mov	r9, r3
 80018a0:	4663      	mov	r3, ip
 80018a2:	4343      	muls	r3, r0
 80018a4:	469a      	mov	sl, r3
 80018a6:	464b      	mov	r3, r9
 80018a8:	4660      	mov	r0, ip
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	469b      	mov	fp, r3
 80018ae:	4348      	muls	r0, r1
 80018b0:	4379      	muls	r1, r7
 80018b2:	4451      	add	r1, sl
 80018b4:	4459      	add	r1, fp
 80018b6:	458a      	cmp	sl, r1
 80018b8:	d903      	bls.n	80018c2 <__aeabi_dmul+0x252>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	469a      	mov	sl, r3
 80018c0:	4450      	add	r0, sl
 80018c2:	0c0b      	lsrs	r3, r1, #16
 80018c4:	469a      	mov	sl, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	4699      	mov	r9, r3
 80018ce:	003b      	movs	r3, r7
 80018d0:	4363      	muls	r3, r4
 80018d2:	0409      	lsls	r1, r1, #16
 80018d4:	4645      	mov	r5, r8
 80018d6:	4449      	add	r1, r9
 80018d8:	4699      	mov	r9, r3
 80018da:	4663      	mov	r3, ip
 80018dc:	435c      	muls	r4, r3
 80018de:	436b      	muls	r3, r5
 80018e0:	469c      	mov	ip, r3
 80018e2:	464b      	mov	r3, r9
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	4698      	mov	r8, r3
 80018e8:	436f      	muls	r7, r5
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	4447      	add	r7, r8
 80018ee:	4450      	add	r0, sl
 80018f0:	42bc      	cmp	r4, r7
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x28c>
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	4698      	mov	r8, r3
 80018fa:	44c4      	add	ip, r8
 80018fc:	9b04      	ldr	r3, [sp, #16]
 80018fe:	9d00      	ldr	r5, [sp, #0]
 8001900:	4698      	mov	r8, r3
 8001902:	4445      	add	r5, r8
 8001904:	42b5      	cmp	r5, r6
 8001906:	41b6      	sbcs	r6, r6
 8001908:	4273      	negs	r3, r6
 800190a:	4698      	mov	r8, r3
 800190c:	464b      	mov	r3, r9
 800190e:	041e      	lsls	r6, r3, #16
 8001910:	9b05      	ldr	r3, [sp, #20]
 8001912:	043c      	lsls	r4, r7, #16
 8001914:	4699      	mov	r9, r3
 8001916:	0c36      	lsrs	r6, r6, #16
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	444c      	add	r4, r9
 800191c:	46a1      	mov	r9, r4
 800191e:	4683      	mov	fp, r0
 8001920:	186e      	adds	r6, r5, r1
 8001922:	44c1      	add	r9, r8
 8001924:	428e      	cmp	r6, r1
 8001926:	4189      	sbcs	r1, r1
 8001928:	44cb      	add	fp, r9
 800192a:	465d      	mov	r5, fp
 800192c:	4249      	negs	r1, r1
 800192e:	186d      	adds	r5, r5, r1
 8001930:	429c      	cmp	r4, r3
 8001932:	41a4      	sbcs	r4, r4
 8001934:	45c1      	cmp	r9, r8
 8001936:	419b      	sbcs	r3, r3
 8001938:	4583      	cmp	fp, r0
 800193a:	4180      	sbcs	r0, r0
 800193c:	428d      	cmp	r5, r1
 800193e:	4189      	sbcs	r1, r1
 8001940:	425b      	negs	r3, r3
 8001942:	4264      	negs	r4, r4
 8001944:	431c      	orrs	r4, r3
 8001946:	4240      	negs	r0, r0
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	4249      	negs	r1, r1
 800194c:	4301      	orrs	r1, r0
 800194e:	0270      	lsls	r0, r6, #9
 8001950:	0c3f      	lsrs	r7, r7, #16
 8001952:	4318      	orrs	r0, r3
 8001954:	19e4      	adds	r4, r4, r7
 8001956:	1e47      	subs	r7, r0, #1
 8001958:	41b8      	sbcs	r0, r7
 800195a:	1864      	adds	r4, r4, r1
 800195c:	4464      	add	r4, ip
 800195e:	0df6      	lsrs	r6, r6, #23
 8001960:	0261      	lsls	r1, r4, #9
 8001962:	4330      	orrs	r0, r6
 8001964:	0dec      	lsrs	r4, r5, #23
 8001966:	026e      	lsls	r6, r5, #9
 8001968:	430c      	orrs	r4, r1
 800196a:	4330      	orrs	r0, r6
 800196c:	01c9      	lsls	r1, r1, #7
 800196e:	d400      	bmi.n	8001972 <__aeabi_dmul+0x302>
 8001970:	e0f1      	b.n	8001b56 <__aeabi_dmul+0x4e6>
 8001972:	2101      	movs	r1, #1
 8001974:	0843      	lsrs	r3, r0, #1
 8001976:	4001      	ands	r1, r0
 8001978:	430b      	orrs	r3, r1
 800197a:	07e0      	lsls	r0, r4, #31
 800197c:	4318      	orrs	r0, r3
 800197e:	0864      	lsrs	r4, r4, #1
 8001980:	4915      	ldr	r1, [pc, #84]	; (80019d8 <__aeabi_dmul+0x368>)
 8001982:	9b02      	ldr	r3, [sp, #8]
 8001984:	468c      	mov	ip, r1
 8001986:	4463      	add	r3, ip
 8001988:	2b00      	cmp	r3, #0
 800198a:	dc00      	bgt.n	800198e <__aeabi_dmul+0x31e>
 800198c:	e097      	b.n	8001abe <__aeabi_dmul+0x44e>
 800198e:	0741      	lsls	r1, r0, #29
 8001990:	d009      	beq.n	80019a6 <__aeabi_dmul+0x336>
 8001992:	210f      	movs	r1, #15
 8001994:	4001      	ands	r1, r0
 8001996:	2904      	cmp	r1, #4
 8001998:	d005      	beq.n	80019a6 <__aeabi_dmul+0x336>
 800199a:	1d01      	adds	r1, r0, #4
 800199c:	4281      	cmp	r1, r0
 800199e:	4180      	sbcs	r0, r0
 80019a0:	4240      	negs	r0, r0
 80019a2:	1824      	adds	r4, r4, r0
 80019a4:	0008      	movs	r0, r1
 80019a6:	01e1      	lsls	r1, r4, #7
 80019a8:	d506      	bpl.n	80019b8 <__aeabi_dmul+0x348>
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	00c9      	lsls	r1, r1, #3
 80019ae:	468c      	mov	ip, r1
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <__aeabi_dmul+0x36c>)
 80019b2:	401c      	ands	r4, r3
 80019b4:	9b02      	ldr	r3, [sp, #8]
 80019b6:	4463      	add	r3, ip
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <__aeabi_dmul+0x370>)
 80019ba:	428b      	cmp	r3, r1
 80019bc:	dd00      	ble.n	80019c0 <__aeabi_dmul+0x350>
 80019be:	e710      	b.n	80017e2 <__aeabi_dmul+0x172>
 80019c0:	0761      	lsls	r1, r4, #29
 80019c2:	08c5      	lsrs	r5, r0, #3
 80019c4:	0264      	lsls	r4, r4, #9
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	430d      	orrs	r5, r1
 80019ca:	0b24      	lsrs	r4, r4, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	e6c1      	b.n	8001754 <__aeabi_dmul+0xe4>
 80019d0:	000007ff 	.word	0x000007ff
 80019d4:	fffffc01 	.word	0xfffffc01
 80019d8:	000003ff 	.word	0x000003ff
 80019dc:	feffffff 	.word	0xfeffffff
 80019e0:	000007fe 	.word	0x000007fe
 80019e4:	464b      	mov	r3, r9
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d059      	beq.n	8001a9e <__aeabi_dmul+0x42e>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x380>
 80019ee:	e0a3      	b.n	8001b38 <__aeabi_dmul+0x4c8>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f000 fdb1 	bl	8002558 <__clzsi2>
 80019f6:	0001      	movs	r1, r0
 80019f8:	0003      	movs	r3, r0
 80019fa:	390b      	subs	r1, #11
 80019fc:	221d      	movs	r2, #29
 80019fe:	1a52      	subs	r2, r2, r1
 8001a00:	4649      	mov	r1, r9
 8001a02:	0018      	movs	r0, r3
 8001a04:	40d1      	lsrs	r1, r2
 8001a06:	464a      	mov	r2, r9
 8001a08:	3808      	subs	r0, #8
 8001a0a:	4082      	lsls	r2, r0
 8001a0c:	4084      	lsls	r4, r0
 8001a0e:	0010      	movs	r0, r2
 8001a10:	430c      	orrs	r4, r1
 8001a12:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	4694      	mov	ip, r2
 8001a18:	4642      	mov	r2, r8
 8001a1a:	4463      	add	r3, ip
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2e0a      	cmp	r6, #10
 8001a2c:	dd00      	ble.n	8001a30 <__aeabi_dmul+0x3c0>
 8001a2e:	e667      	b.n	8001700 <__aeabi_dmul+0x90>
 8001a30:	e683      	b.n	800173a <__aeabi_dmul+0xca>
 8001a32:	465b      	mov	r3, fp
 8001a34:	4303      	orrs	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	d02a      	beq.n	8001a90 <__aeabi_dmul+0x420>
 8001a3a:	465b      	mov	r3, fp
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d06d      	beq.n	8001b1c <__aeabi_dmul+0x4ac>
 8001a40:	4658      	mov	r0, fp
 8001a42:	f000 fd89 	bl	8002558 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0003      	movs	r3, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	221d      	movs	r2, #29
 8001a4e:	1a52      	subs	r2, r2, r1
 8001a50:	0021      	movs	r1, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	465d      	mov	r5, fp
 8001a56:	40d1      	lsrs	r1, r2
 8001a58:	3808      	subs	r0, #8
 8001a5a:	4085      	lsls	r5, r0
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	4084      	lsls	r4, r0
 8001a60:	432a      	orrs	r2, r5
 8001a62:	4693      	mov	fp, r2
 8001a64:	46a2      	mov	sl, r4
 8001a66:	4d5f      	ldr	r5, [pc, #380]	; (8001be4 <__aeabi_dmul+0x574>)
 8001a68:	2600      	movs	r6, #0
 8001a6a:	1aed      	subs	r5, r5, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	e625      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d105      	bne.n	8001a86 <__aeabi_dmul+0x416>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	3302      	adds	r3, #2
 8001a80:	2608      	movs	r6, #8
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e61b      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a86:	2303      	movs	r3, #3
 8001a88:	4682      	mov	sl, r0
 8001a8a:	260c      	movs	r6, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	e616      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a90:	2300      	movs	r3, #0
 8001a92:	469b      	mov	fp, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	2604      	movs	r6, #4
 8001a98:	2500      	movs	r5, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	e60f      	b.n	80016be <__aeabi_dmul+0x4e>
 8001a9e:	4642      	mov	r2, r8
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	9501      	str	r5, [sp, #4]
 8001aa4:	431e      	orrs	r6, r3
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	407a      	eors	r2, r7
 8001aaa:	3301      	adds	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	dd00      	ble.n	8001abc <__aeabi_dmul+0x44c>
 8001aba:	e621      	b.n	8001700 <__aeabi_dmul+0x90>
 8001abc:	e63d      	b.n	800173a <__aeabi_dmul+0xca>
 8001abe:	2101      	movs	r1, #1
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	2938      	cmp	r1, #56	; 0x38
 8001ac4:	dd00      	ble.n	8001ac8 <__aeabi_dmul+0x458>
 8001ac6:	e642      	b.n	800174e <__aeabi_dmul+0xde>
 8001ac8:	291f      	cmp	r1, #31
 8001aca:	dd47      	ble.n	8001b5c <__aeabi_dmul+0x4ec>
 8001acc:	261f      	movs	r6, #31
 8001ace:	0025      	movs	r5, r4
 8001ad0:	4276      	negs	r6, r6
 8001ad2:	1af3      	subs	r3, r6, r3
 8001ad4:	40dd      	lsrs	r5, r3
 8001ad6:	002b      	movs	r3, r5
 8001ad8:	2920      	cmp	r1, #32
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dmul+0x478>
 8001adc:	4942      	ldr	r1, [pc, #264]	; (8001be8 <__aeabi_dmul+0x578>)
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	4465      	add	r5, ip
 8001ae4:	40ac      	lsls	r4, r5
 8001ae6:	4320      	orrs	r0, r4
 8001ae8:	1e41      	subs	r1, r0, #1
 8001aea:	4188      	sbcs	r0, r1
 8001aec:	4318      	orrs	r0, r3
 8001aee:	2307      	movs	r3, #7
 8001af0:	001d      	movs	r5, r3
 8001af2:	2400      	movs	r4, #0
 8001af4:	4005      	ands	r5, r0
 8001af6:	4203      	tst	r3, r0
 8001af8:	d04a      	beq.n	8001b90 <__aeabi_dmul+0x520>
 8001afa:	230f      	movs	r3, #15
 8001afc:	2400      	movs	r4, #0
 8001afe:	4003      	ands	r3, r0
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d042      	beq.n	8001b8a <__aeabi_dmul+0x51a>
 8001b04:	1d03      	adds	r3, r0, #4
 8001b06:	4283      	cmp	r3, r0
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1824      	adds	r4, r4, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	d53a      	bpl.n	8001b8a <__aeabi_dmul+0x51a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	2400      	movs	r4, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	e61b      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b1c:	f000 fd1c 	bl	8002558 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dd8f      	ble.n	8001a4c <__aeabi_dmul+0x3dc>
 8001b2c:	3808      	subs	r0, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	4084      	lsls	r4, r0
 8001b32:	4692      	mov	sl, r2
 8001b34:	46a3      	mov	fp, r4
 8001b36:	e796      	b.n	8001a66 <__aeabi_dmul+0x3f6>
 8001b38:	f000 fd0e 	bl	8002558 <__clzsi2>
 8001b3c:	0001      	movs	r1, r0
 8001b3e:	0003      	movs	r3, r0
 8001b40:	3115      	adds	r1, #21
 8001b42:	3320      	adds	r3, #32
 8001b44:	291c      	cmp	r1, #28
 8001b46:	dc00      	bgt.n	8001b4a <__aeabi_dmul+0x4da>
 8001b48:	e758      	b.n	80019fc <__aeabi_dmul+0x38c>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	464c      	mov	r4, r9
 8001b4e:	3a08      	subs	r2, #8
 8001b50:	2000      	movs	r0, #0
 8001b52:	4094      	lsls	r4, r2
 8001b54:	e75d      	b.n	8001a12 <__aeabi_dmul+0x3a2>
 8001b56:	9b01      	ldr	r3, [sp, #4]
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e711      	b.n	8001980 <__aeabi_dmul+0x310>
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <__aeabi_dmul+0x57c>)
 8001b5e:	0026      	movs	r6, r4
 8001b60:	469c      	mov	ip, r3
 8001b62:	0003      	movs	r3, r0
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	4465      	add	r5, ip
 8001b6a:	40ae      	lsls	r6, r5
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	0003      	movs	r3, r0
 8001b70:	40ab      	lsls	r3, r5
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	4183      	sbcs	r3, r0
 8001b76:	0030      	movs	r0, r6
 8001b78:	4318      	orrs	r0, r3
 8001b7a:	40cc      	lsrs	r4, r1
 8001b7c:	0743      	lsls	r3, r0, #29
 8001b7e:	d0c7      	beq.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b80:	230f      	movs	r3, #15
 8001b82:	4003      	ands	r3, r0
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d1bd      	bne.n	8001b04 <__aeabi_dmul+0x494>
 8001b88:	e7c2      	b.n	8001b10 <__aeabi_dmul+0x4a0>
 8001b8a:	0765      	lsls	r5, r4, #29
 8001b8c:	0264      	lsls	r4, r4, #9
 8001b8e:	0b24      	lsrs	r4, r4, #12
 8001b90:	08c0      	lsrs	r0, r0, #3
 8001b92:	2300      	movs	r3, #0
 8001b94:	4305      	orrs	r5, r0
 8001b96:	e5dd      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001b98:	2500      	movs	r5, #0
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	2e0f      	cmp	r6, #15
 8001b9e:	d10c      	bne.n	8001bba <__aeabi_dmul+0x54a>
 8001ba0:	2480      	movs	r4, #128	; 0x80
 8001ba2:	465b      	mov	r3, fp
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	4223      	tst	r3, r4
 8001ba8:	d00e      	beq.n	8001bc8 <__aeabi_dmul+0x558>
 8001baa:	4221      	tst	r1, r4
 8001bac:	d10c      	bne.n	8001bc8 <__aeabi_dmul+0x558>
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	003a      	movs	r2, r7
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bb6:	0b24      	lsrs	r4, r4, #12
 8001bb8:	e5cc      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bba:	2e0b      	cmp	r6, #11
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_dmul+0x550>
 8001bbe:	e5a2      	b.n	8001706 <__aeabi_dmul+0x96>
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	46aa      	mov	sl, r5
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	e5f7      	b.n	80017b8 <__aeabi_dmul+0x148>
 8001bc8:	2480      	movs	r4, #128	; 0x80
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	0324      	lsls	r4, r4, #12
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	4655      	mov	r5, sl
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__aeabi_dmul+0x580>)
 8001bd8:	0b24      	lsrs	r4, r4, #12
 8001bda:	e5bb      	b.n	8001754 <__aeabi_dmul+0xe4>
 8001bdc:	464d      	mov	r5, r9
 8001bde:	0021      	movs	r1, r4
 8001be0:	2303      	movs	r3, #3
 8001be2:	e7db      	b.n	8001b9c <__aeabi_dmul+0x52c>
 8001be4:	fffffc0d 	.word	0xfffffc0d
 8001be8:	0000043e 	.word	0x0000043e
 8001bec:	0000041e 	.word	0x0000041e
 8001bf0:	000007ff 	.word	0x000007ff

08001bf4 <__aeabi_dsub>:
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	4657      	mov	r7, sl
 8001bf8:	464e      	mov	r6, r9
 8001bfa:	4645      	mov	r5, r8
 8001bfc:	46de      	mov	lr, fp
 8001bfe:	b5e0      	push	{r5, r6, r7, lr}
 8001c00:	000d      	movs	r5, r1
 8001c02:	0004      	movs	r4, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	032b      	lsls	r3, r5, #12
 8001c0a:	0a5b      	lsrs	r3, r3, #9
 8001c0c:	0f62      	lsrs	r2, r4, #29
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	00e3      	lsls	r3, r4, #3
 8001c12:	030c      	lsls	r4, r1, #12
 8001c14:	0a64      	lsrs	r4, r4, #9
 8001c16:	0f47      	lsrs	r7, r0, #29
 8001c18:	4327      	orrs	r7, r4
 8001c1a:	4cd0      	ldr	r4, [pc, #832]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c1c:	006e      	lsls	r6, r5, #1
 8001c1e:	4691      	mov	r9, r2
 8001c20:	b083      	sub	sp, #12
 8001c22:	004a      	lsls	r2, r1, #1
 8001c24:	00c0      	lsls	r0, r0, #3
 8001c26:	4698      	mov	r8, r3
 8001c28:	46a2      	mov	sl, r4
 8001c2a:	0d76      	lsrs	r6, r6, #21
 8001c2c:	0fed      	lsrs	r5, r5, #31
 8001c2e:	0d52      	lsrs	r2, r2, #21
 8001c30:	0fc9      	lsrs	r1, r1, #31
 8001c32:	9001      	str	r0, [sp, #4]
 8001c34:	42a2      	cmp	r2, r4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x46>
 8001c38:	e0b9      	b.n	8001dae <__aeabi_dsub+0x1ba>
 8001c3a:	2401      	movs	r4, #1
 8001c3c:	4061      	eors	r1, r4
 8001c3e:	468b      	mov	fp, r1
 8001c40:	428d      	cmp	r5, r1
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dsub+0x52>
 8001c44:	e08d      	b.n	8001d62 <__aeabi_dsub+0x16e>
 8001c46:	1ab4      	subs	r4, r6, r2
 8001c48:	46a4      	mov	ip, r4
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	dc00      	bgt.n	8001c50 <__aeabi_dsub+0x5c>
 8001c4e:	e0b7      	b.n	8001dc0 <__aeabi_dsub+0x1cc>
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x62>
 8001c54:	e0cb      	b.n	8001dee <__aeabi_dsub+0x1fa>
 8001c56:	4ac1      	ldr	r2, [pc, #772]	; (8001f5c <__aeabi_dsub+0x368>)
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x6a>
 8001c5c:	e186      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0412      	lsls	r2, r2, #16
 8001c62:	4317      	orrs	r7, r2
 8001c64:	4662      	mov	r2, ip
 8001c66:	2a38      	cmp	r2, #56	; 0x38
 8001c68:	dd00      	ble.n	8001c6c <__aeabi_dsub+0x78>
 8001c6a:	e1a4      	b.n	8001fb6 <__aeabi_dsub+0x3c2>
 8001c6c:	2a1f      	cmp	r2, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x7e>
 8001c70:	e21d      	b.n	80020ae <__aeabi_dsub+0x4ba>
 8001c72:	4661      	mov	r1, ip
 8001c74:	2220      	movs	r2, #32
 8001c76:	003c      	movs	r4, r7
 8001c78:	1a52      	subs	r2, r2, r1
 8001c7a:	0001      	movs	r1, r0
 8001c7c:	4090      	lsls	r0, r2
 8001c7e:	4094      	lsls	r4, r2
 8001c80:	1e42      	subs	r2, r0, #1
 8001c82:	4190      	sbcs	r0, r2
 8001c84:	4662      	mov	r2, ip
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4664      	mov	r4, ip
 8001c8a:	40d7      	lsrs	r7, r2
 8001c8c:	464a      	mov	r2, r9
 8001c8e:	40e1      	lsrs	r1, r4
 8001c90:	4644      	mov	r4, r8
 8001c92:	1bd2      	subs	r2, r2, r7
 8001c94:	4691      	mov	r9, r2
 8001c96:	430c      	orrs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	1b1c      	subs	r4, r3, r4
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4653      	mov	r3, sl
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	d400      	bmi.n	8001cb0 <__aeabi_dsub+0xbc>
 8001cae:	e12b      	b.n	8001f08 <__aeabi_dsub+0x314>
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	0a53      	lsrs	r3, r2, #9
 8001cb6:	469a      	mov	sl, r3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0xcc>
 8001cbe:	e166      	b.n	8001f8e <__aeabi_dsub+0x39a>
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f000 fc49 	bl	8002558 <__clzsi2>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	3b08      	subs	r3, #8
 8001cca:	2220      	movs	r2, #32
 8001ccc:	0020      	movs	r0, r4
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	4651      	mov	r1, sl
 8001cd2:	40d0      	lsrs	r0, r2
 8001cd4:	4099      	lsls	r1, r3
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	429e      	cmp	r6, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_dsub+0xee>
 8001ce0:	e164      	b.n	8001fac <__aeabi_dsub+0x3b8>
 8001ce2:	1b9b      	subs	r3, r3, r6
 8001ce4:	1c59      	adds	r1, r3, #1
 8001ce6:	291f      	cmp	r1, #31
 8001ce8:	dd00      	ble.n	8001cec <__aeabi_dsub+0xf8>
 8001cea:	e0fe      	b.n	8001eea <__aeabi_dsub+0x2f6>
 8001cec:	2320      	movs	r3, #32
 8001cee:	0010      	movs	r0, r2
 8001cf0:	0026      	movs	r6, r4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	409c      	lsls	r4, r3
 8001cf6:	4098      	lsls	r0, r3
 8001cf8:	40ce      	lsrs	r6, r1
 8001cfa:	40ca      	lsrs	r2, r1
 8001cfc:	1e63      	subs	r3, r4, #1
 8001cfe:	419c      	sbcs	r4, r3
 8001d00:	4330      	orrs	r0, r6
 8001d02:	4692      	mov	sl, r2
 8001d04:	2600      	movs	r6, #0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	0763      	lsls	r3, r4, #29
 8001d0a:	d009      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	4023      	ands	r3, r4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d005      	beq.n	8001d20 <__aeabi_dsub+0x12c>
 8001d14:	1d23      	adds	r3, r4, #4
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	41a4      	sbcs	r4, r4
 8001d1a:	4264      	negs	r4, r4
 8001d1c:	44a2      	add	sl, r4
 8001d1e:	001c      	movs	r4, r3
 8001d20:	4653      	mov	r3, sl
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	d400      	bmi.n	8001d28 <__aeabi_dsub+0x134>
 8001d26:	e0f2      	b.n	8001f0e <__aeabi_dsub+0x31a>
 8001d28:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <__aeabi_dsub+0x368>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x13e>
 8001d30:	e10f      	b.n	8001f52 <__aeabi_dsub+0x35e>
 8001d32:	4653      	mov	r3, sl
 8001d34:	498a      	ldr	r1, [pc, #552]	; (8001f60 <__aeabi_dsub+0x36c>)
 8001d36:	08e4      	lsrs	r4, r4, #3
 8001d38:	400b      	ands	r3, r1
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	0572      	lsls	r2, r6, #21
 8001d42:	024c      	lsls	r4, r1, #9
 8001d44:	0b24      	lsrs	r4, r4, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0512      	lsls	r2, r2, #20
 8001d4a:	4322      	orrs	r2, r4
 8001d4c:	07ed      	lsls	r5, r5, #31
 8001d4e:	432a      	orrs	r2, r5
 8001d50:	0018      	movs	r0, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	b003      	add	sp, #12
 8001d56:	bcf0      	pop	{r4, r5, r6, r7}
 8001d58:	46bb      	mov	fp, r7
 8001d5a:	46b2      	mov	sl, r6
 8001d5c:	46a9      	mov	r9, r5
 8001d5e:	46a0      	mov	r8, r4
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d62:	1ab4      	subs	r4, r6, r2
 8001d64:	46a4      	mov	ip, r4
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dd59      	ble.n	8001e1e <__aeabi_dsub+0x22a>
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x17c>
 8001d6e:	e0b0      	b.n	8001ed2 <__aeabi_dsub+0x2de>
 8001d70:	4556      	cmp	r6, sl
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x182>
 8001d74:	e0fa      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0412      	lsls	r2, r2, #16
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	4662      	mov	r2, ip
 8001d7e:	2a38      	cmp	r2, #56	; 0x38
 8001d80:	dd00      	ble.n	8001d84 <__aeabi_dsub+0x190>
 8001d82:	e0d4      	b.n	8001f2e <__aeabi_dsub+0x33a>
 8001d84:	2a1f      	cmp	r2, #31
 8001d86:	dc00      	bgt.n	8001d8a <__aeabi_dsub+0x196>
 8001d88:	e1c0      	b.n	800210c <__aeabi_dsub+0x518>
 8001d8a:	0039      	movs	r1, r7
 8001d8c:	3a20      	subs	r2, #32
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	4662      	mov	r2, ip
 8001d92:	2a20      	cmp	r2, #32
 8001d94:	d006      	beq.n	8001da4 <__aeabi_dsub+0x1b0>
 8001d96:	4664      	mov	r4, ip
 8001d98:	2240      	movs	r2, #64	; 0x40
 8001d9a:	1b12      	subs	r2, r2, r4
 8001d9c:	003c      	movs	r4, r7
 8001d9e:	4094      	lsls	r4, r2
 8001da0:	4304      	orrs	r4, r0
 8001da2:	9401      	str	r4, [sp, #4]
 8001da4:	9c01      	ldr	r4, [sp, #4]
 8001da6:	1e62      	subs	r2, r4, #1
 8001da8:	4194      	sbcs	r4, r2
 8001daa:	430c      	orrs	r4, r1
 8001dac:	e0c3      	b.n	8001f36 <__aeabi_dsub+0x342>
 8001dae:	003c      	movs	r4, r7
 8001db0:	4304      	orrs	r4, r0
 8001db2:	d02b      	beq.n	8001e0c <__aeabi_dsub+0x218>
 8001db4:	468b      	mov	fp, r1
 8001db6:	428d      	cmp	r5, r1
 8001db8:	d02e      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001dba:	4c6a      	ldr	r4, [pc, #424]	; (8001f64 <__aeabi_dsub+0x370>)
 8001dbc:	46a4      	mov	ip, r4
 8001dbe:	44b4      	add	ip, r6
 8001dc0:	4664      	mov	r4, ip
 8001dc2:	2c00      	cmp	r4, #0
 8001dc4:	d05f      	beq.n	8001e86 <__aeabi_dsub+0x292>
 8001dc6:	1b94      	subs	r4, r2, r6
 8001dc8:	46a4      	mov	ip, r4
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d000      	beq.n	8001dd0 <__aeabi_dsub+0x1dc>
 8001dce:	e120      	b.n	8002012 <__aeabi_dsub+0x41e>
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x1e4>
 8001dd6:	e1c7      	b.n	8002168 <__aeabi_dsub+0x574>
 8001dd8:	4661      	mov	r1, ip
 8001dda:	1e4c      	subs	r4, r1, #1
 8001ddc:	2901      	cmp	r1, #1
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x1ee>
 8001de0:	e223      	b.n	800222a <__aeabi_dsub+0x636>
 8001de2:	4d5e      	ldr	r5, [pc, #376]	; (8001f5c <__aeabi_dsub+0x368>)
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x1f6>
 8001de8:	e1d8      	b.n	800219c <__aeabi_dsub+0x5a8>
 8001dea:	46a4      	mov	ip, r4
 8001dec:	e11a      	b.n	8002024 <__aeabi_dsub+0x430>
 8001dee:	003a      	movs	r2, r7
 8001df0:	4302      	orrs	r2, r0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x202>
 8001df4:	e0e4      	b.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001df6:	0022      	movs	r2, r4
 8001df8:	3a01      	subs	r2, #1
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x20c>
 8001dfe:	e1c3      	b.n	8002188 <__aeabi_dsub+0x594>
 8001e00:	4956      	ldr	r1, [pc, #344]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e02:	428c      	cmp	r4, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x214>
 8001e06:	e0b1      	b.n	8001f6c <__aeabi_dsub+0x378>
 8001e08:	4694      	mov	ip, r2
 8001e0a:	e72b      	b.n	8001c64 <__aeabi_dsub+0x70>
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	4061      	eors	r1, r4
 8001e10:	468b      	mov	fp, r1
 8001e12:	428d      	cmp	r5, r1
 8001e14:	d000      	beq.n	8001e18 <__aeabi_dsub+0x224>
 8001e16:	e716      	b.n	8001c46 <__aeabi_dsub+0x52>
 8001e18:	4952      	ldr	r1, [pc, #328]	; (8001f64 <__aeabi_dsub+0x370>)
 8001e1a:	468c      	mov	ip, r1
 8001e1c:	44b4      	add	ip, r6
 8001e1e:	4664      	mov	r4, ip
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x232>
 8001e24:	e0d3      	b.n	8001fce <__aeabi_dsub+0x3da>
 8001e26:	1b91      	subs	r1, r2, r6
 8001e28:	468c      	mov	ip, r1
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x23c>
 8001e2e:	e15e      	b.n	80020ee <__aeabi_dsub+0x4fa>
 8001e30:	494a      	ldr	r1, [pc, #296]	; (8001f5c <__aeabi_dsub+0x368>)
 8001e32:	428a      	cmp	r2, r1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x244>
 8001e36:	e1be      	b.n	80021b6 <__aeabi_dsub+0x5c2>
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	0409      	lsls	r1, r1, #16
 8001e3e:	430c      	orrs	r4, r1
 8001e40:	46a1      	mov	r9, r4
 8001e42:	4661      	mov	r1, ip
 8001e44:	2938      	cmp	r1, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x256>
 8001e48:	e1ba      	b.n	80021c0 <__aeabi_dsub+0x5cc>
 8001e4a:	291f      	cmp	r1, #31
 8001e4c:	dd00      	ble.n	8001e50 <__aeabi_dsub+0x25c>
 8001e4e:	e227      	b.n	80022a0 <__aeabi_dsub+0x6ac>
 8001e50:	2420      	movs	r4, #32
 8001e52:	1a64      	subs	r4, r4, r1
 8001e54:	4649      	mov	r1, r9
 8001e56:	40a1      	lsls	r1, r4
 8001e58:	001e      	movs	r6, r3
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	40a3      	lsls	r3, r4
 8001e60:	40ce      	lsrs	r6, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1e5c      	subs	r4, r3, #1
 8001e66:	41a3      	sbcs	r3, r4
 8001e68:	4331      	orrs	r1, r6
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	4663      	mov	r3, ip
 8001e70:	4649      	mov	r1, r9
 8001e72:	40d9      	lsrs	r1, r3
 8001e74:	187f      	adds	r7, r7, r1
 8001e76:	1824      	adds	r4, r4, r0
 8001e78:	4284      	cmp	r4, r0
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	469a      	mov	sl, r3
 8001e80:	0016      	movs	r6, r2
 8001e82:	44ba      	add	sl, r7
 8001e84:	e05d      	b.n	8001f42 <__aeabi_dsub+0x34e>
 8001e86:	4c38      	ldr	r4, [pc, #224]	; (8001f68 <__aeabi_dsub+0x374>)
 8001e88:	1c72      	adds	r2, r6, #1
 8001e8a:	4222      	tst	r2, r4
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x29c>
 8001e8e:	e0df      	b.n	8002050 <__aeabi_dsub+0x45c>
 8001e90:	464a      	mov	r2, r9
 8001e92:	431a      	orrs	r2, r3
 8001e94:	2e00      	cmp	r6, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x2a6>
 8001e98:	e15c      	b.n	8002154 <__aeabi_dsub+0x560>
 8001e9a:	2a00      	cmp	r2, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x2ac>
 8001e9e:	e1cf      	b.n	8002240 <__aeabi_dsub+0x64c>
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x2b4>
 8001ea6:	e17f      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ea8:	1a1c      	subs	r4, r3, r0
 8001eaa:	464a      	mov	r2, r9
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	4189      	sbcs	r1, r1
 8001eb0:	1bd2      	subs	r2, r2, r7
 8001eb2:	4249      	negs	r1, r1
 8001eb4:	1a52      	subs	r2, r2, r1
 8001eb6:	4692      	mov	sl, r2
 8001eb8:	0212      	lsls	r2, r2, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x2ca>
 8001ebc:	e20a      	b.n	80022d4 <__aeabi_dsub+0x6e0>
 8001ebe:	1ac4      	subs	r4, r0, r3
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	1aff      	subs	r7, r7, r3
 8001eca:	1a3b      	subs	r3, r7, r0
 8001ecc:	469a      	mov	sl, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e71a      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	d073      	beq.n	8001fc0 <__aeabi_dsub+0x3cc>
 8001ed8:	0022      	movs	r2, r4
 8001eda:	3a01      	subs	r2, #1
 8001edc:	2c01      	cmp	r4, #1
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_dsub+0x2ee>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_dsub+0x486>
 8001ee2:	4554      	cmp	r4, sl
 8001ee4:	d042      	beq.n	8001f6c <__aeabi_dsub+0x378>
 8001ee6:	4694      	mov	ip, r2
 8001ee8:	e748      	b.n	8001d7c <__aeabi_dsub+0x188>
 8001eea:	0010      	movs	r0, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d003      	beq.n	8001efc <__aeabi_dsub+0x308>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	4314      	orrs	r4, r2
 8001efc:	1e63      	subs	r3, r4, #1
 8001efe:	419c      	sbcs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	2600      	movs	r6, #0
 8001f04:	469a      	mov	sl, r3
 8001f06:	4304      	orrs	r4, r0
 8001f08:	0763      	lsls	r3, r4, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x31a>
 8001f0c:	e6fe      	b.n	8001d0c <__aeabi_dsub+0x118>
 8001f0e:	4652      	mov	r2, sl
 8001f10:	08e3      	lsrs	r3, r4, #3
 8001f12:	0752      	lsls	r2, r2, #29
 8001f14:	4313      	orrs	r3, r2
 8001f16:	4652      	mov	r2, sl
 8001f18:	46b4      	mov	ip, r6
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	490f      	ldr	r1, [pc, #60]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f1e:	458c      	cmp	ip, r1
 8001f20:	d02a      	beq.n	8001f78 <__aeabi_dsub+0x384>
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	0b14      	lsrs	r4, r2, #12
 8001f26:	4662      	mov	r2, ip
 8001f28:	0552      	lsls	r2, r2, #21
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	e70c      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	18e4      	adds	r4, r4, r3
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	4192      	sbcs	r2, r2
 8001f3c:	4252      	negs	r2, r2
 8001f3e:	444a      	add	r2, r9
 8001f40:	4692      	mov	sl, r2
 8001f42:	4653      	mov	r3, sl
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	d5df      	bpl.n	8001f08 <__aeabi_dsub+0x314>
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__aeabi_dsub+0x368>)
 8001f4a:	3601      	adds	r6, #1
 8001f4c:	429e      	cmp	r6, r3
 8001f4e:	d000      	beq.n	8001f52 <__aeabi_dsub+0x35e>
 8001f50:	e0a0      	b.n	8002094 <__aeabi_dsub+0x4a0>
 8001f52:	0032      	movs	r2, r6
 8001f54:	2400      	movs	r4, #0
 8001f56:	2300      	movs	r3, #0
 8001f58:	e6f6      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff
 8001f60:	ff7fffff 	.word	0xff7fffff
 8001f64:	fffff801 	.word	0xfffff801
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	464a      	mov	r2, r9
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	464a      	mov	r2, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
 8001f78:	0019      	movs	r1, r3
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x38c>
 8001f7e:	e1b5      	b.n	80022ec <__aeabi_dsub+0x6f8>
 8001f80:	2480      	movs	r4, #128	; 0x80
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4ad5      	ldr	r2, [pc, #852]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e6dc      	b.n	8001d48 <__aeabi_dsub+0x154>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 fae2 	bl	8002558 <__clzsi2>
 8001f94:	0003      	movs	r3, r0
 8001f96:	3318      	adds	r3, #24
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x3aa>
 8001f9c:	e695      	b.n	8001cca <__aeabi_dsub+0xd6>
 8001f9e:	0022      	movs	r2, r4
 8001fa0:	3808      	subs	r0, #8
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_dsub+0x3b8>
 8001faa:	e69a      	b.n	8001ce2 <__aeabi_dsub+0xee>
 8001fac:	1af6      	subs	r6, r6, r3
 8001fae:	4bcd      	ldr	r3, [pc, #820]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4692      	mov	sl, r2
 8001fb4:	e6a8      	b.n	8001d08 <__aeabi_dsub+0x114>
 8001fb6:	003c      	movs	r4, r7
 8001fb8:	4304      	orrs	r4, r0
 8001fba:	1e62      	subs	r2, r4, #1
 8001fbc:	4194      	sbcs	r4, r2
 8001fbe:	e66c      	b.n	8001c9a <__aeabi_dsub+0xa6>
 8001fc0:	464a      	mov	r2, r9
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	0752      	lsls	r2, r2, #29
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	464a      	mov	r2, r9
 8001fca:	08d2      	lsrs	r2, r2, #3
 8001fcc:	e7a6      	b.n	8001f1c <__aeabi_dsub+0x328>
 8001fce:	4cc6      	ldr	r4, [pc, #792]	; (80022e8 <__aeabi_dsub+0x6f4>)
 8001fd0:	1c72      	adds	r2, r6, #1
 8001fd2:	4222      	tst	r2, r4
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x3e4>
 8001fd6:	e0ac      	b.n	8002132 <__aeabi_dsub+0x53e>
 8001fd8:	464a      	mov	r2, r9
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_dsub+0x3ee>
 8001fe0:	e105      	b.n	80021ee <__aeabi_dsub+0x5fa>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x3f4>
 8001fe6:	e156      	b.n	8002296 <__aeabi_dsub+0x6a2>
 8001fe8:	003a      	movs	r2, r7
 8001fea:	4302      	orrs	r2, r0
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x3fc>
 8001fee:	e0db      	b.n	80021a8 <__aeabi_dsub+0x5b4>
 8001ff0:	181c      	adds	r4, r3, r0
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	419b      	sbcs	r3, r3
 8001ff6:	444f      	add	r7, r9
 8001ff8:	46ba      	mov	sl, r7
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	449a      	add	sl, r3
 8001ffe:	4653      	mov	r3, sl
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x412>
 8002004:	e780      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002006:	4652      	mov	r2, sl
 8002008:	4bb6      	ldr	r3, [pc, #728]	; (80022e4 <__aeabi_dsub+0x6f0>)
 800200a:	2601      	movs	r6, #1
 800200c:	401a      	ands	r2, r3
 800200e:	4692      	mov	sl, r2
 8002010:	e77a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002012:	4cb3      	ldr	r4, [pc, #716]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x426>
 8002018:	e0c0      	b.n	800219c <__aeabi_dsub+0x5a8>
 800201a:	2480      	movs	r4, #128	; 0x80
 800201c:	464d      	mov	r5, r9
 800201e:	0424      	lsls	r4, r4, #16
 8002020:	4325      	orrs	r5, r4
 8002022:	46a9      	mov	r9, r5
 8002024:	4664      	mov	r4, ip
 8002026:	2c38      	cmp	r4, #56	; 0x38
 8002028:	dc53      	bgt.n	80020d2 <__aeabi_dsub+0x4de>
 800202a:	4661      	mov	r1, ip
 800202c:	2c1f      	cmp	r4, #31
 800202e:	dd00      	ble.n	8002032 <__aeabi_dsub+0x43e>
 8002030:	e0cd      	b.n	80021ce <__aeabi_dsub+0x5da>
 8002032:	2520      	movs	r5, #32
 8002034:	001e      	movs	r6, r3
 8002036:	1b2d      	subs	r5, r5, r4
 8002038:	464c      	mov	r4, r9
 800203a:	40ab      	lsls	r3, r5
 800203c:	40ac      	lsls	r4, r5
 800203e:	40ce      	lsrs	r6, r1
 8002040:	1e5d      	subs	r5, r3, #1
 8002042:	41ab      	sbcs	r3, r5
 8002044:	4334      	orrs	r4, r6
 8002046:	4323      	orrs	r3, r4
 8002048:	464c      	mov	r4, r9
 800204a:	40cc      	lsrs	r4, r1
 800204c:	1b3f      	subs	r7, r7, r4
 800204e:	e045      	b.n	80020dc <__aeabi_dsub+0x4e8>
 8002050:	464a      	mov	r2, r9
 8002052:	1a1c      	subs	r4, r3, r0
 8002054:	1bd1      	subs	r1, r2, r7
 8002056:	42a3      	cmp	r3, r4
 8002058:	4192      	sbcs	r2, r2
 800205a:	4252      	negs	r2, r2
 800205c:	4692      	mov	sl, r2
 800205e:	000a      	movs	r2, r1
 8002060:	4651      	mov	r1, sl
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4692      	mov	sl, r2
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	d500      	bpl.n	800206c <__aeabi_dsub+0x478>
 800206a:	e083      	b.n	8002174 <__aeabi_dsub+0x580>
 800206c:	4653      	mov	r3, sl
 800206e:	4323      	orrs	r3, r4
 8002070:	d000      	beq.n	8002074 <__aeabi_dsub+0x480>
 8002072:	e621      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002074:	2200      	movs	r2, #0
 8002076:	2500      	movs	r5, #0
 8002078:	e753      	b.n	8001f22 <__aeabi_dsub+0x32e>
 800207a:	181c      	adds	r4, r3, r0
 800207c:	429c      	cmp	r4, r3
 800207e:	419b      	sbcs	r3, r3
 8002080:	444f      	add	r7, r9
 8002082:	46ba      	mov	sl, r7
 8002084:	425b      	negs	r3, r3
 8002086:	449a      	add	sl, r3
 8002088:	4653      	mov	r3, sl
 800208a:	2601      	movs	r6, #1
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x49e>
 8002090:	e73a      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002092:	2602      	movs	r6, #2
 8002094:	4652      	mov	r2, sl
 8002096:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <__aeabi_dsub+0x6f0>)
 8002098:	2101      	movs	r1, #1
 800209a:	401a      	ands	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4021      	ands	r1, r4
 80020a0:	0862      	lsrs	r2, r4, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	07dc      	lsls	r4, r3, #31
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	469a      	mov	sl, r3
 80020aa:	4314      	orrs	r4, r2
 80020ac:	e62c      	b.n	8001d08 <__aeabi_dsub+0x114>
 80020ae:	0039      	movs	r1, r7
 80020b0:	3a20      	subs	r2, #32
 80020b2:	40d1      	lsrs	r1, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a20      	cmp	r2, #32
 80020b8:	d006      	beq.n	80020c8 <__aeabi_dsub+0x4d4>
 80020ba:	4664      	mov	r4, ip
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	1b12      	subs	r2, r2, r4
 80020c0:	003c      	movs	r4, r7
 80020c2:	4094      	lsls	r4, r2
 80020c4:	4304      	orrs	r4, r0
 80020c6:	9401      	str	r4, [sp, #4]
 80020c8:	9c01      	ldr	r4, [sp, #4]
 80020ca:	1e62      	subs	r2, r4, #1
 80020cc:	4194      	sbcs	r4, r2
 80020ce:	430c      	orrs	r4, r1
 80020d0:	e5e3      	b.n	8001c9a <__aeabi_dsub+0xa6>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	000b      	movs	r3, r1
 80020d8:	1e5c      	subs	r4, r3, #1
 80020da:	41a3      	sbcs	r3, r4
 80020dc:	1ac4      	subs	r4, r0, r3
 80020de:	42a0      	cmp	r0, r4
 80020e0:	419b      	sbcs	r3, r3
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	465d      	mov	r5, fp
 80020ea:	0016      	movs	r6, r2
 80020ec:	e5dc      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 80020ee:	4649      	mov	r1, r9
 80020f0:	4319      	orrs	r1, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x502>
 80020f4:	e0ae      	b.n	8002254 <__aeabi_dsub+0x660>
 80020f6:	4661      	mov	r1, ip
 80020f8:	4664      	mov	r4, ip
 80020fa:	3901      	subs	r1, #1
 80020fc:	2c01      	cmp	r4, #1
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x50e>
 8002100:	e0e0      	b.n	80022c4 <__aeabi_dsub+0x6d0>
 8002102:	4c77      	ldr	r4, [pc, #476]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002104:	45a4      	cmp	ip, r4
 8002106:	d056      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 8002108:	468c      	mov	ip, r1
 800210a:	e69a      	b.n	8001e42 <__aeabi_dsub+0x24e>
 800210c:	4661      	mov	r1, ip
 800210e:	2220      	movs	r2, #32
 8002110:	003c      	movs	r4, r7
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	4094      	lsls	r4, r2
 8002116:	0001      	movs	r1, r0
 8002118:	4090      	lsls	r0, r2
 800211a:	46a0      	mov	r8, r4
 800211c:	4664      	mov	r4, ip
 800211e:	1e42      	subs	r2, r0, #1
 8002120:	4190      	sbcs	r0, r2
 8002122:	4662      	mov	r2, ip
 8002124:	40e1      	lsrs	r1, r4
 8002126:	4644      	mov	r4, r8
 8002128:	40d7      	lsrs	r7, r2
 800212a:	430c      	orrs	r4, r1
 800212c:	4304      	orrs	r4, r0
 800212e:	44b9      	add	r9, r7
 8002130:	e701      	b.n	8001f36 <__aeabi_dsub+0x342>
 8002132:	496b      	ldr	r1, [pc, #428]	; (80022e0 <__aeabi_dsub+0x6ec>)
 8002134:	428a      	cmp	r2, r1
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x546>
 8002138:	e70c      	b.n	8001f54 <__aeabi_dsub+0x360>
 800213a:	1818      	adds	r0, r3, r0
 800213c:	4298      	cmp	r0, r3
 800213e:	419b      	sbcs	r3, r3
 8002140:	444f      	add	r7, r9
 8002142:	425b      	negs	r3, r3
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	07dc      	lsls	r4, r3, #31
 8002148:	0840      	lsrs	r0, r0, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	469a      	mov	sl, r3
 800214e:	0016      	movs	r6, r2
 8002150:	4304      	orrs	r4, r0
 8002152:	e6d9      	b.n	8001f08 <__aeabi_dsub+0x314>
 8002154:	2a00      	cmp	r2, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x566>
 8002158:	e081      	b.n	800225e <__aeabi_dsub+0x66a>
 800215a:	003b      	movs	r3, r7
 800215c:	4303      	orrs	r3, r0
 800215e:	d11d      	bne.n	800219c <__aeabi_dsub+0x5a8>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	2500      	movs	r5, #0
 8002164:	0312      	lsls	r2, r2, #12
 8002166:	e70b      	b.n	8001f80 <__aeabi_dsub+0x38c>
 8002168:	08c0      	lsrs	r0, r0, #3
 800216a:	077b      	lsls	r3, r7, #29
 800216c:	465d      	mov	r5, fp
 800216e:	4303      	orrs	r3, r0
 8002170:	08fa      	lsrs	r2, r7, #3
 8002172:	e6d3      	b.n	8001f1c <__aeabi_dsub+0x328>
 8002174:	1ac4      	subs	r4, r0, r3
 8002176:	42a0      	cmp	r0, r4
 8002178:	4180      	sbcs	r0, r0
 800217a:	464b      	mov	r3, r9
 800217c:	4240      	negs	r0, r0
 800217e:	1aff      	subs	r7, r7, r3
 8002180:	1a3b      	subs	r3, r7, r0
 8002182:	469a      	mov	sl, r3
 8002184:	465d      	mov	r5, fp
 8002186:	e597      	b.n	8001cb8 <__aeabi_dsub+0xc4>
 8002188:	1a1c      	subs	r4, r3, r0
 800218a:	464a      	mov	r2, r9
 800218c:	42a3      	cmp	r3, r4
 800218e:	419b      	sbcs	r3, r3
 8002190:	1bd7      	subs	r7, r2, r7
 8002192:	425b      	negs	r3, r3
 8002194:	1afb      	subs	r3, r7, r3
 8002196:	469a      	mov	sl, r3
 8002198:	2601      	movs	r6, #1
 800219a:	e585      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 800219c:	08c0      	lsrs	r0, r0, #3
 800219e:	077b      	lsls	r3, r7, #29
 80021a0:	465d      	mov	r5, fp
 80021a2:	4303      	orrs	r3, r0
 80021a4:	08fa      	lsrs	r2, r7, #3
 80021a6:	e6e7      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021a8:	464a      	mov	r2, r9
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	4313      	orrs	r3, r2
 80021b0:	464a      	mov	r2, r9
 80021b2:	08d2      	lsrs	r2, r2, #3
 80021b4:	e6b5      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	077b      	lsls	r3, r7, #29
 80021ba:	4303      	orrs	r3, r0
 80021bc:	08fa      	lsrs	r2, r7, #3
 80021be:	e6db      	b.n	8001f78 <__aeabi_dsub+0x384>
 80021c0:	4649      	mov	r1, r9
 80021c2:	4319      	orrs	r1, r3
 80021c4:	000b      	movs	r3, r1
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	418b      	sbcs	r3, r1
 80021ca:	001c      	movs	r4, r3
 80021cc:	e653      	b.n	8001e76 <__aeabi_dsub+0x282>
 80021ce:	464d      	mov	r5, r9
 80021d0:	3c20      	subs	r4, #32
 80021d2:	40e5      	lsrs	r5, r4
 80021d4:	2920      	cmp	r1, #32
 80021d6:	d005      	beq.n	80021e4 <__aeabi_dsub+0x5f0>
 80021d8:	2440      	movs	r4, #64	; 0x40
 80021da:	1a64      	subs	r4, r4, r1
 80021dc:	4649      	mov	r1, r9
 80021de:	40a1      	lsls	r1, r4
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4698      	mov	r8, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	1e5c      	subs	r4, r3, #1
 80021e8:	41a3      	sbcs	r3, r4
 80021ea:	432b      	orrs	r3, r5
 80021ec:	e776      	b.n	80020dc <__aeabi_dsub+0x4e8>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d0e1      	beq.n	80021b6 <__aeabi_dsub+0x5c2>
 80021f2:	003a      	movs	r2, r7
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	4302      	orrs	r2, r0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x608>
 80021fa:	e6b8      	b.n	8001f6e <__aeabi_dsub+0x37a>
 80021fc:	464a      	mov	r2, r9
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	2480      	movs	r4, #128	; 0x80
 8002202:	4313      	orrs	r3, r2
 8002204:	464a      	mov	r2, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	08d2      	lsrs	r2, r2, #3
 800220a:	4222      	tst	r2, r4
 800220c:	d007      	beq.n	800221e <__aeabi_dsub+0x62a>
 800220e:	08fe      	lsrs	r6, r7, #3
 8002210:	4226      	tst	r6, r4
 8002212:	d104      	bne.n	800221e <__aeabi_dsub+0x62a>
 8002214:	465d      	mov	r5, fp
 8002216:	0032      	movs	r2, r6
 8002218:	08c3      	lsrs	r3, r0, #3
 800221a:	077f      	lsls	r7, r7, #29
 800221c:	433b      	orrs	r3, r7
 800221e:	0f59      	lsrs	r1, r3, #29
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	0749      	lsls	r1, r1, #29
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	430b      	orrs	r3, r1
 8002228:	e6a6      	b.n	8001f78 <__aeabi_dsub+0x384>
 800222a:	1ac4      	subs	r4, r0, r3
 800222c:	42a0      	cmp	r0, r4
 800222e:	4180      	sbcs	r0, r0
 8002230:	464b      	mov	r3, r9
 8002232:	4240      	negs	r0, r0
 8002234:	1aff      	subs	r7, r7, r3
 8002236:	1a3b      	subs	r3, r7, r0
 8002238:	469a      	mov	sl, r3
 800223a:	465d      	mov	r5, fp
 800223c:	2601      	movs	r6, #1
 800223e:	e533      	b.n	8001ca8 <__aeabi_dsub+0xb4>
 8002240:	003b      	movs	r3, r7
 8002242:	4303      	orrs	r3, r0
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x654>
 8002246:	e715      	b.n	8002074 <__aeabi_dsub+0x480>
 8002248:	08c0      	lsrs	r0, r0, #3
 800224a:	077b      	lsls	r3, r7, #29
 800224c:	465d      	mov	r5, fp
 800224e:	4303      	orrs	r3, r0
 8002250:	08fa      	lsrs	r2, r7, #3
 8002252:	e666      	b.n	8001f22 <__aeabi_dsub+0x32e>
 8002254:	08c0      	lsrs	r0, r0, #3
 8002256:	077b      	lsls	r3, r7, #29
 8002258:	4303      	orrs	r3, r0
 800225a:	08fa      	lsrs	r2, r7, #3
 800225c:	e65e      	b.n	8001f1c <__aeabi_dsub+0x328>
 800225e:	003a      	movs	r2, r7
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	4302      	orrs	r2, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x674>
 8002266:	e682      	b.n	8001f6e <__aeabi_dsub+0x37a>
 8002268:	464a      	mov	r2, r9
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	2480      	movs	r4, #128	; 0x80
 800226e:	4313      	orrs	r3, r2
 8002270:	464a      	mov	r2, r9
 8002272:	0324      	lsls	r4, r4, #12
 8002274:	08d2      	lsrs	r2, r2, #3
 8002276:	4222      	tst	r2, r4
 8002278:	d007      	beq.n	800228a <__aeabi_dsub+0x696>
 800227a:	08fe      	lsrs	r6, r7, #3
 800227c:	4226      	tst	r6, r4
 800227e:	d104      	bne.n	800228a <__aeabi_dsub+0x696>
 8002280:	465d      	mov	r5, fp
 8002282:	0032      	movs	r2, r6
 8002284:	08c3      	lsrs	r3, r0, #3
 8002286:	077f      	lsls	r7, r7, #29
 8002288:	433b      	orrs	r3, r7
 800228a:	0f59      	lsrs	r1, r3, #29
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	08db      	lsrs	r3, r3, #3
 8002290:	0749      	lsls	r1, r1, #29
 8002292:	430b      	orrs	r3, r1
 8002294:	e670      	b.n	8001f78 <__aeabi_dsub+0x384>
 8002296:	08c0      	lsrs	r0, r0, #3
 8002298:	077b      	lsls	r3, r7, #29
 800229a:	4303      	orrs	r3, r0
 800229c:	08fa      	lsrs	r2, r7, #3
 800229e:	e640      	b.n	8001f22 <__aeabi_dsub+0x32e>
 80022a0:	464c      	mov	r4, r9
 80022a2:	3920      	subs	r1, #32
 80022a4:	40cc      	lsrs	r4, r1
 80022a6:	4661      	mov	r1, ip
 80022a8:	2920      	cmp	r1, #32
 80022aa:	d006      	beq.n	80022ba <__aeabi_dsub+0x6c6>
 80022ac:	4666      	mov	r6, ip
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	1b89      	subs	r1, r1, r6
 80022b2:	464e      	mov	r6, r9
 80022b4:	408e      	lsls	r6, r1
 80022b6:	4333      	orrs	r3, r6
 80022b8:	4698      	mov	r8, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	1e59      	subs	r1, r3, #1
 80022be:	418b      	sbcs	r3, r1
 80022c0:	431c      	orrs	r4, r3
 80022c2:	e5d8      	b.n	8001e76 <__aeabi_dsub+0x282>
 80022c4:	181c      	adds	r4, r3, r0
 80022c6:	4284      	cmp	r4, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	444f      	add	r7, r9
 80022cc:	46ba      	mov	sl, r7
 80022ce:	4240      	negs	r0, r0
 80022d0:	4482      	add	sl, r0
 80022d2:	e6d9      	b.n	8002088 <__aeabi_dsub+0x494>
 80022d4:	4653      	mov	r3, sl
 80022d6:	4323      	orrs	r3, r4
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x6e8>
 80022da:	e6cb      	b.n	8002074 <__aeabi_dsub+0x480>
 80022dc:	e614      	b.n	8001f08 <__aeabi_dsub+0x314>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	4a01      	ldr	r2, [pc, #4]	; (80022f4 <__aeabi_dsub+0x700>)
 80022f0:	001c      	movs	r4, r3
 80022f2:	e529      	b.n	8001d48 <__aeabi_dsub+0x154>
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__aeabi_dcmpun>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <__aeabi_dcmpun+0x38>)
 80022fe:	031c      	lsls	r4, r3, #12
 8002300:	0016      	movs	r6, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	030a      	lsls	r2, r1, #12
 8002306:	0049      	lsls	r1, r1, #1
 8002308:	0b12      	lsrs	r2, r2, #12
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b24      	lsrs	r4, r4, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d008      	beq.n	8002326 <__aeabi_dcmpun+0x2e>
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <__aeabi_dcmpun+0x38>)
 8002316:	2000      	movs	r0, #0
 8002318:	4293      	cmp	r3, r2
 800231a:	d103      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800231c:	0020      	movs	r0, r4
 800231e:	4330      	orrs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	2001      	movs	r0, #1
 8002328:	432a      	orrs	r2, r5
 800232a:	d1fb      	bne.n	8002324 <__aeabi_dcmpun+0x2c>
 800232c:	e7f2      	b.n	8002314 <__aeabi_dcmpun+0x1c>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff

08002334 <__aeabi_d2iz>:
 8002334:	000a      	movs	r2, r1
 8002336:	b530      	push	{r4, r5, lr}
 8002338:	4c13      	ldr	r4, [pc, #76]	; (8002388 <__aeabi_d2iz+0x54>)
 800233a:	0053      	lsls	r3, r2, #1
 800233c:	0309      	lsls	r1, r1, #12
 800233e:	0005      	movs	r5, r0
 8002340:	0b09      	lsrs	r1, r1, #12
 8002342:	2000      	movs	r0, #0
 8002344:	0d5b      	lsrs	r3, r3, #21
 8002346:	0fd2      	lsrs	r2, r2, #31
 8002348:	42a3      	cmp	r3, r4
 800234a:	dd04      	ble.n	8002356 <__aeabi_d2iz+0x22>
 800234c:	480f      	ldr	r0, [pc, #60]	; (800238c <__aeabi_d2iz+0x58>)
 800234e:	4283      	cmp	r3, r0
 8002350:	dd02      	ble.n	8002358 <__aeabi_d2iz+0x24>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <__aeabi_d2iz+0x5c>)
 8002354:	18d0      	adds	r0, r2, r3
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2080      	movs	r0, #128	; 0x80
 800235a:	0340      	lsls	r0, r0, #13
 800235c:	4301      	orrs	r1, r0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <__aeabi_d2iz+0x60>)
 8002360:	1ac0      	subs	r0, r0, r3
 8002362:	281f      	cmp	r0, #31
 8002364:	dd08      	ble.n	8002378 <__aeabi_d2iz+0x44>
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <__aeabi_d2iz+0x64>)
 8002368:	1ac3      	subs	r3, r0, r3
 800236a:	40d9      	lsrs	r1, r3
 800236c:	000b      	movs	r3, r1
 800236e:	4258      	negs	r0, r3
 8002370:	2a00      	cmp	r2, #0
 8002372:	d1f0      	bne.n	8002356 <__aeabi_d2iz+0x22>
 8002374:	0018      	movs	r0, r3
 8002376:	e7ee      	b.n	8002356 <__aeabi_d2iz+0x22>
 8002378:	4c08      	ldr	r4, [pc, #32]	; (800239c <__aeabi_d2iz+0x68>)
 800237a:	40c5      	lsrs	r5, r0
 800237c:	46a4      	mov	ip, r4
 800237e:	4463      	add	r3, ip
 8002380:	4099      	lsls	r1, r3
 8002382:	000b      	movs	r3, r1
 8002384:	432b      	orrs	r3, r5
 8002386:	e7f2      	b.n	800236e <__aeabi_d2iz+0x3a>
 8002388:	000003fe 	.word	0x000003fe
 800238c:	0000041d 	.word	0x0000041d
 8002390:	7fffffff 	.word	0x7fffffff
 8002394:	00000433 	.word	0x00000433
 8002398:	00000413 	.word	0x00000413
 800239c:	fffffbed 	.word	0xfffffbed

080023a0 <__aeabi_i2d>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d016      	beq.n	80023d4 <__aeabi_i2d+0x34>
 80023a6:	17c3      	asrs	r3, r0, #31
 80023a8:	18c5      	adds	r5, r0, r3
 80023aa:	405d      	eors	r5, r3
 80023ac:	0fc4      	lsrs	r4, r0, #31
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 f8d2 	bl	8002558 <__clzsi2>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <__aeabi_i2d+0x5c>)
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	280a      	cmp	r0, #10
 80023ba:	dc16      	bgt.n	80023ea <__aeabi_i2d+0x4a>
 80023bc:	0002      	movs	r2, r0
 80023be:	002e      	movs	r6, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4096      	lsls	r6, r2
 80023c4:	220b      	movs	r2, #11
 80023c6:	1a12      	subs	r2, r2, r0
 80023c8:	40d5      	lsrs	r5, r2
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	0d5b      	lsrs	r3, r3, #21
 80023d2:	e003      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023d4:	2400      	movs	r4, #0
 80023d6:	2300      	movs	r3, #0
 80023d8:	2500      	movs	r5, #0
 80023da:	2600      	movs	r6, #0
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	432b      	orrs	r3, r5
 80023e0:	07e4      	lsls	r4, r4, #31
 80023e2:	4323      	orrs	r3, r4
 80023e4:	0030      	movs	r0, r6
 80023e6:	0019      	movs	r1, r3
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	380b      	subs	r0, #11
 80023ec:	4085      	lsls	r5, r0
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	2600      	movs	r6, #0
 80023f4:	0b2d      	lsrs	r5, r5, #12
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	e7f0      	b.n	80023dc <__aeabi_i2d+0x3c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	0000041e 	.word	0x0000041e

08002400 <__aeabi_ui2d>:
 8002400:	b510      	push	{r4, lr}
 8002402:	1e04      	subs	r4, r0, #0
 8002404:	d010      	beq.n	8002428 <__aeabi_ui2d+0x28>
 8002406:	f000 f8a7 	bl	8002558 <__clzsi2>
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <__aeabi_ui2d+0x48>)
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	280a      	cmp	r0, #10
 8002410:	dc11      	bgt.n	8002436 <__aeabi_ui2d+0x36>
 8002412:	220b      	movs	r2, #11
 8002414:	0021      	movs	r1, r4
 8002416:	1a12      	subs	r2, r2, r0
 8002418:	40d1      	lsrs	r1, r2
 800241a:	3015      	adds	r0, #21
 800241c:	030a      	lsls	r2, r1, #12
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4084      	lsls	r4, r0
 8002422:	0b12      	lsrs	r2, r2, #12
 8002424:	0d5b      	lsrs	r3, r3, #21
 8002426:	e001      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	4313      	orrs	r3, r2
 8002430:	0020      	movs	r0, r4
 8002432:	0019      	movs	r1, r3
 8002434:	bd10      	pop	{r4, pc}
 8002436:	0022      	movs	r2, r4
 8002438:	380b      	subs	r0, #11
 800243a:	4082      	lsls	r2, r0
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	0312      	lsls	r2, r2, #12
 8002440:	2400      	movs	r4, #0
 8002442:	0b12      	lsrs	r2, r2, #12
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	e7f1      	b.n	800242c <__aeabi_ui2d+0x2c>
 8002448:	0000041e 	.word	0x0000041e

0800244c <__aeabi_d2f>:
 800244c:	0002      	movs	r2, r0
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	004b      	lsls	r3, r1, #1
 8002452:	030d      	lsls	r5, r1, #12
 8002454:	0f40      	lsrs	r0, r0, #29
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	0fcc      	lsrs	r4, r1, #31
 800245a:	0a6d      	lsrs	r5, r5, #9
 800245c:	493a      	ldr	r1, [pc, #232]	; (8002548 <__aeabi_d2f+0xfc>)
 800245e:	4305      	orrs	r5, r0
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	00d7      	lsls	r7, r2, #3
 8002464:	4208      	tst	r0, r1
 8002466:	d00a      	beq.n	800247e <__aeabi_d2f+0x32>
 8002468:	4938      	ldr	r1, [pc, #224]	; (800254c <__aeabi_d2f+0x100>)
 800246a:	1859      	adds	r1, r3, r1
 800246c:	29fe      	cmp	r1, #254	; 0xfe
 800246e:	dd16      	ble.n	800249e <__aeabi_d2f+0x52>
 8002470:	20ff      	movs	r0, #255	; 0xff
 8002472:	2200      	movs	r2, #0
 8002474:	05c0      	lsls	r0, r0, #23
 8002476:	4310      	orrs	r0, r2
 8002478:	07e4      	lsls	r4, r4, #31
 800247a:	4320      	orrs	r0, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <__aeabi_d2f+0x44>
 8002482:	433d      	orrs	r5, r7
 8002484:	d026      	beq.n	80024d4 <__aeabi_d2f+0x88>
 8002486:	2205      	movs	r2, #5
 8002488:	0192      	lsls	r2, r2, #6
 800248a:	0a52      	lsrs	r2, r2, #9
 800248c:	b2d8      	uxtb	r0, r3
 800248e:	e7f1      	b.n	8002474 <__aeabi_d2f+0x28>
 8002490:	432f      	orrs	r7, r5
 8002492:	d0ed      	beq.n	8002470 <__aeabi_d2f+0x24>
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	03d2      	lsls	r2, r2, #15
 8002498:	20ff      	movs	r0, #255	; 0xff
 800249a:	432a      	orrs	r2, r5
 800249c:	e7ea      	b.n	8002474 <__aeabi_d2f+0x28>
 800249e:	2900      	cmp	r1, #0
 80024a0:	dd1b      	ble.n	80024da <__aeabi_d2f+0x8e>
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	1e50      	subs	r0, r2, #1
 80024a6:	4182      	sbcs	r2, r0
 80024a8:	00ed      	lsls	r5, r5, #3
 80024aa:	0f7f      	lsrs	r7, r7, #29
 80024ac:	432a      	orrs	r2, r5
 80024ae:	433a      	orrs	r2, r7
 80024b0:	0753      	lsls	r3, r2, #29
 80024b2:	d047      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d000      	beq.n	80024be <__aeabi_d2f+0x72>
 80024bc:	3204      	adds	r2, #4
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	4013      	ands	r3, r2
 80024c4:	d03e      	beq.n	8002544 <__aeabi_d2f+0xf8>
 80024c6:	1c48      	adds	r0, r1, #1
 80024c8:	29fe      	cmp	r1, #254	; 0xfe
 80024ca:	d0d1      	beq.n	8002470 <__aeabi_d2f+0x24>
 80024cc:	0192      	lsls	r2, r2, #6
 80024ce:	0a52      	lsrs	r2, r2, #9
 80024d0:	b2c0      	uxtb	r0, r0
 80024d2:	e7cf      	b.n	8002474 <__aeabi_d2f+0x28>
 80024d4:	2000      	movs	r0, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	e7cc      	b.n	8002474 <__aeabi_d2f+0x28>
 80024da:	000a      	movs	r2, r1
 80024dc:	3217      	adds	r2, #23
 80024de:	db2f      	blt.n	8002540 <__aeabi_d2f+0xf4>
 80024e0:	2680      	movs	r6, #128	; 0x80
 80024e2:	0436      	lsls	r6, r6, #16
 80024e4:	432e      	orrs	r6, r5
 80024e6:	251e      	movs	r5, #30
 80024e8:	1a6d      	subs	r5, r5, r1
 80024ea:	2d1f      	cmp	r5, #31
 80024ec:	dd11      	ble.n	8002512 <__aeabi_d2f+0xc6>
 80024ee:	2202      	movs	r2, #2
 80024f0:	4252      	negs	r2, r2
 80024f2:	1a52      	subs	r2, r2, r1
 80024f4:	0031      	movs	r1, r6
 80024f6:	40d1      	lsrs	r1, r2
 80024f8:	2d20      	cmp	r5, #32
 80024fa:	d004      	beq.n	8002506 <__aeabi_d2f+0xba>
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <__aeabi_d2f+0x104>)
 80024fe:	4694      	mov	ip, r2
 8002500:	4463      	add	r3, ip
 8002502:	409e      	lsls	r6, r3
 8002504:	4337      	orrs	r7, r6
 8002506:	003a      	movs	r2, r7
 8002508:	1e53      	subs	r3, r2, #1
 800250a:	419a      	sbcs	r2, r3
 800250c:	430a      	orrs	r2, r1
 800250e:	2100      	movs	r1, #0
 8002510:	e7ce      	b.n	80024b0 <__aeabi_d2f+0x64>
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <__aeabi_d2f+0x108>)
 8002514:	0038      	movs	r0, r7
 8002516:	4694      	mov	ip, r2
 8002518:	4463      	add	r3, ip
 800251a:	4098      	lsls	r0, r3
 800251c:	003a      	movs	r2, r7
 800251e:	1e41      	subs	r1, r0, #1
 8002520:	4188      	sbcs	r0, r1
 8002522:	409e      	lsls	r6, r3
 8002524:	40ea      	lsrs	r2, r5
 8002526:	4330      	orrs	r0, r6
 8002528:	4302      	orrs	r2, r0
 800252a:	2100      	movs	r1, #0
 800252c:	0753      	lsls	r3, r2, #29
 800252e:	d1c1      	bne.n	80024b4 <__aeabi_d2f+0x68>
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	0013      	movs	r3, r2
 8002534:	04c9      	lsls	r1, r1, #19
 8002536:	2001      	movs	r0, #1
 8002538:	400b      	ands	r3, r1
 800253a:	420a      	tst	r2, r1
 800253c:	d1c6      	bne.n	80024cc <__aeabi_d2f+0x80>
 800253e:	e7a3      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002540:	2300      	movs	r3, #0
 8002542:	e7a0      	b.n	8002486 <__aeabi_d2f+0x3a>
 8002544:	000b      	movs	r3, r1
 8002546:	e79f      	b.n	8002488 <__aeabi_d2f+0x3c>
 8002548:	000007fe 	.word	0x000007fe
 800254c:	fffffc80 	.word	0xfffffc80
 8002550:	fffffca2 	.word	0xfffffca2
 8002554:	fffffc82 	.word	0xfffffc82

08002558 <__clzsi2>:
 8002558:	211c      	movs	r1, #28
 800255a:	2301      	movs	r3, #1
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4298      	cmp	r0, r3
 8002560:	d301      	bcc.n	8002566 <__clzsi2+0xe>
 8002562:	0c00      	lsrs	r0, r0, #16
 8002564:	3910      	subs	r1, #16
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	4298      	cmp	r0, r3
 800256a:	d301      	bcc.n	8002570 <__clzsi2+0x18>
 800256c:	0a00      	lsrs	r0, r0, #8
 800256e:	3908      	subs	r1, #8
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	4298      	cmp	r0, r3
 8002574:	d301      	bcc.n	800257a <__clzsi2+0x22>
 8002576:	0900      	lsrs	r0, r0, #4
 8002578:	3904      	subs	r1, #4
 800257a:	a202      	add	r2, pc, #8	; (adr r2, 8002584 <__clzsi2+0x2c>)
 800257c:	5c10      	ldrb	r0, [r2, r0]
 800257e:	1840      	adds	r0, r0, r1
 8002580:	4770      	bx	lr
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	02020304 	.word	0x02020304
 8002588:	01010101 	.word	0x01010101
	...

08002594 <__clzdi2>:
 8002594:	b510      	push	{r4, lr}
 8002596:	2900      	cmp	r1, #0
 8002598:	d103      	bne.n	80025a2 <__clzdi2+0xe>
 800259a:	f7ff ffdd 	bl	8002558 <__clzsi2>
 800259e:	3020      	adds	r0, #32
 80025a0:	e002      	b.n	80025a8 <__clzdi2+0x14>
 80025a2:	0008      	movs	r0, r1
 80025a4:	f7ff ffd8 	bl	8002558 <__clzsi2>
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <solenoid_release>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void solenoid_release (void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4810      	ldr	r0, [pc, #64]	; (80025f8 <solenoid_release+0x4c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	0019      	movs	r1, r3
 80025bc:	f000 ff92 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <solenoid_release+0x4c>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	0019      	movs	r1, r3
 80025ca:	f000 ff8b 	bl	80034e4 <HAL_GPIO_WritePin>

    for(int i = 0; i<=100; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	e009      	b.n	80025e8 <solenoid_release+0x3c>
    {
    	htim21.Instance->CCR1 = i;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <solenoid_release+0x50>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(10);
 80025dc:	200a      	movs	r0, #10
 80025de:	f000 fc79 	bl	8002ed4 <HAL_Delay>
    for(int i = 0; i<=100; i++)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	ddf2      	ble.n	80025d4 <solenoid_release+0x28>
    }

//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b002      	add	sp, #8
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	50000c00 	.word	0x50000c00
 80025fc:	200001f0 	.word	0x200001f0

08002600 <solenoid_lock>:

void solenoid_lock (void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4810      	ldr	r0, [pc, #64]	; (800264c <solenoid_lock+0x4c>)
 800260c:	2201      	movs	r2, #1
 800260e:	0019      	movs	r1, r3
 8002610:	f000 ff68 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <solenoid_lock+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	0019      	movs	r1, r3
 800261e:	f000 ff61 	bl	80034e4 <HAL_GPIO_WritePin>

    for(int i = 0; i<=100; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	e009      	b.n	800263c <solenoid_lock+0x3c>
    {
    	htim21.Instance->CCR1 = i;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <solenoid_lock+0x50>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
        HAL_Delay(10);
 8002630:	200a      	movs	r0, #10
 8002632:	f000 fc4f 	bl	8002ed4 <HAL_Delay>
    for(int i = 0; i<=100; i++)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3301      	adds	r3, #1
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	ddf2      	ble.n	8002628 <solenoid_lock+0x28>
    }

//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	50000c00 	.word	0x50000c00
 8002650:	200001f0 	.word	0x200001f0

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002658:	f000 fbcc 	bl	8002df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265c:	f000 f81c 	bl	8002698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002660:	f000 f922 	bl	80028a8 <MX_GPIO_Init>
  MX_TIM21_Init();
 8002664:	f000 f872 	bl	800274c <MX_TIM21_Init>
  MX_USART5_UART_Init();
 8002668:	f000 f8ee 	bl	8002848 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <main+0x40>)
 800266e:	2100      	movs	r1, #0
 8002670:	0018      	movs	r0, r3
 8002672:	f001 fdd3 	bl	800421c <HAL_TIM_PWM_Start>
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, SET);
//		  solenoid_lock ();
//		  HAL_Delay(10);
//	  }

	    solenoid_release ();
 8002676:	f7ff ff99 	bl	80025ac <solenoid_release>
	    HAL_Delay(2000);
 800267a:	23fa      	movs	r3, #250	; 0xfa
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fc28 	bl	8002ed4 <HAL_Delay>
	    solenoid_lock ();
 8002684:	f7ff ffbc 	bl	8002600 <solenoid_lock>
	    HAL_Delay(2000);
 8002688:	23fa      	movs	r3, #250	; 0xfa
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	0018      	movs	r0, r3
 800268e:	f000 fc21 	bl	8002ed4 <HAL_Delay>
	    solenoid_release ();
 8002692:	e7f0      	b.n	8002676 <main+0x22>
 8002694:	200001f0 	.word	0x200001f0

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b095      	sub	sp, #84	; 0x54
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	2418      	movs	r4, #24
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	0018      	movs	r0, r3
 80026a4:	2338      	movs	r3, #56	; 0x38
 80026a6:	001a      	movs	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	f004 fa7b 	bl	8006ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	0018      	movs	r0, r3
 80026b2:	2314      	movs	r3, #20
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f004 fa74 	bl	8006ba4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <SystemClock_Config+0xac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a21      	ldr	r2, [pc, #132]	; (8002748 <SystemClock_Config+0xb0>)
 80026c2:	401a      	ands	r2, r3
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <SystemClock_Config+0xac>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0109      	lsls	r1, r1, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ce:	0021      	movs	r1, r4
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	0252      	lsls	r2, r2, #9
 80026dc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	2202      	movs	r2, #2
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0252      	lsls	r2, r2, #9
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	02d2      	lsls	r2, r2, #11
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	03d2      	lsls	r2, r2, #15
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 ff0e 	bl	8003520 <HAL_RCC_OscConfig>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002708:	f000 f9a6 	bl	8002a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	220f      	movs	r2, #15
 8002710:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2203      	movs	r2, #3
 8002716:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2101      	movs	r1, #1
 800272e:	0018      	movs	r0, r3
 8002730:	f001 faca 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002738:	f000 f98e 	bl	8002a58 <Error_Handler>
  }
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b015      	add	sp, #84	; 0x54
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	40007000 	.word	0x40007000
 8002748:	ffffe7ff 	.word	0xffffe7ff

0800274c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	2318      	movs	r3, #24
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	0018      	movs	r0, r3
 8002758:	2310      	movs	r3, #16
 800275a:	001a      	movs	r2, r3
 800275c:	2100      	movs	r1, #0
 800275e:	f004 fa21 	bl	8006ba4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	2310      	movs	r3, #16
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	0018      	movs	r0, r3
 8002768:	2308      	movs	r3, #8
 800276a:	001a      	movs	r2, r3
 800276c:	2100      	movs	r1, #0
 800276e:	f004 fa19 	bl	8006ba4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002772:	003b      	movs	r3, r7
 8002774:	0018      	movs	r0, r3
 8002776:	2310      	movs	r3, #16
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	f004 fa12 	bl	8006ba4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002780:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <MX_TIM21_Init+0xf4>)
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <MX_TIM21_Init+0xf8>)
 8002784:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <MX_TIM21_Init+0xf4>)
 8002788:	221f      	movs	r2, #31
 800278a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <MX_TIM21_Init+0xf4>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 100-1;
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <MX_TIM21_Init+0xf4>)
 8002794:	2263      	movs	r2, #99	; 0x63
 8002796:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <MX_TIM21_Init+0xf4>)
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <MX_TIM21_Init+0xf4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <MX_TIM21_Init+0xf4>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f001 fcb0 	bl	800410c <HAL_TIM_Base_Init>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80027b0:	f000 f952 	bl	8002a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b4:	2118      	movs	r1, #24
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0152      	lsls	r2, r2, #5
 80027bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80027be:	187a      	adds	r2, r7, r1
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <MX_TIM21_Init+0xf4>)
 80027c2:	0011      	movs	r1, r2
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 fe81 	bl	80044cc <HAL_TIM_ConfigClockSource>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80027ce:	f000 f943 	bl	8002a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <MX_TIM21_Init+0xf4>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 fcd9 	bl	800418c <HAL_TIM_PWM_Init>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80027de:	f000 f93b 	bl	8002a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e2:	2110      	movs	r1, #16
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80027f0:	187a      	adds	r2, r7, r1
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <MX_TIM21_Init+0xf4>)
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f002 f95c 	bl	8004ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8002800:	f000 f92a 	bl	8002a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002804:	003b      	movs	r3, r7
 8002806:	2260      	movs	r2, #96	; 0x60
 8002808:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800280a:	003b      	movs	r3, r7
 800280c:	2200      	movs	r2, #0
 800280e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002810:	003b      	movs	r3, r7
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002816:	003b      	movs	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281c:	0039      	movs	r1, r7
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_TIM21_Init+0xf4>)
 8002820:	2200      	movs	r2, #0
 8002822:	0018      	movs	r0, r3
 8002824:	f001 fd8c 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 800282c:	f000 f914 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <MX_TIM21_Init+0xf4>)
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f942 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b00a      	add	sp, #40	; 0x28
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200001f0 	.word	0x200001f0
 8002844:	40010800 	.word	0x40010800

08002848 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 800284e:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <MX_USART5_UART_Init+0x5c>)
 8002850:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002854:	22e1      	movs	r2, #225	; 0xe1
 8002856:	0252      	lsls	r2, r2, #9
 8002858:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <MX_USART5_UART_Init+0x58>)
 800288c:	0018      	movs	r0, r3
 800288e:	f002 f96f 	bl	8004b70 <HAL_UART_Init>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 8002896:	f000 f8df 	bl	8002a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000230 	.word	0x20000230
 80028a4:	40005000 	.word	0x40005000

080028a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08d      	sub	sp, #52	; 0x34
 80028ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ae:	241c      	movs	r4, #28
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	0018      	movs	r0, r3
 80028b4:	2314      	movs	r3, #20
 80028b6:	001a      	movs	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	f004 f973 	bl	8006ba4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028be:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	430a      	orrs	r2, r1
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028ca:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028dc:	2104      	movs	r1, #4
 80028de:	430a      	orrs	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e2:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028f4:	2102      	movs	r1, #2
 80028f6:	430a      	orrs	r2, r1
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fa:	4b52      	ldr	r3, [pc, #328]	; (8002a44 <MX_GPIO_Init+0x19c>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002906:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <MX_GPIO_Init+0x19c>)
 800290c:	2110      	movs	r1, #16
 800290e:	430a      	orrs	r2, r1
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	2210      	movs	r2, #16
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002924:	2108      	movs	r1, #8
 8002926:	430a      	orrs	r2, r1
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <MX_GPIO_Init+0x19c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	2208      	movs	r2, #8
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <MX_GPIO_Init+0x19c>)
 800293c:	2101      	movs	r1, #1
 800293e:	430a      	orrs	r2, r1
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <MX_GPIO_Init+0x19c>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	2201      	movs	r2, #1
 8002948:	4013      	ands	r3, r2
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <MX_GPIO_Init+0x1a0>)
 8002950:	2200      	movs	r2, #0
 8002952:	2106      	movs	r1, #6
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fdc5 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <MX_GPIO_Init+0x1a4>)
 800295c:	2200      	movs	r2, #0
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	0018      	movs	r0, r3
 8002962:	f000 fdbf 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002966:	23c0      	movs	r3, #192	; 0xc0
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4839      	ldr	r0, [pc, #228]	; (8002a50 <MX_GPIO_Init+0x1a8>)
 800296c:	2200      	movs	r2, #0
 800296e:	0019      	movs	r1, r3
 8002970:	f000 fdb8 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8002974:	23e0      	movs	r3, #224	; 0xe0
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4836      	ldr	r0, [pc, #216]	; (8002a54 <MX_GPIO_Init+0x1ac>)
 800297a:	2200      	movs	r2, #0
 800297c:	0019      	movs	r1, r3
 800297e:	f000 fdb1 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2204      	movs	r2, #4
 8002986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002988:	193b      	adds	r3, r7, r4
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	193b      	adds	r3, r7, r4
 8002996:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <MX_GPIO_Init+0x1ac>)
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f000 fc24 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2206      	movs	r2, #6
 80029a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2201      	movs	r2, #1
 80029aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <MX_GPIO_Init+0x1a0>)
 80029bc:	0019      	movs	r1, r3
 80029be:	0010      	movs	r0, r2
 80029c0:	f000 fc12 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2201      	movs	r2, #1
 80029ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <MX_GPIO_Init+0x1a4>)
 80029e0:	0019      	movs	r1, r3
 80029e2:	0010      	movs	r0, r2
 80029e4:	f000 fc00 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029e8:	0021      	movs	r1, r4
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	22c0      	movs	r2, #192	; 0xc0
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	000c      	movs	r4, r1
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2201      	movs	r2, #1
 80029f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <MX_GPIO_Init+0x1a8>)
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 fbeb 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002a12:	0021      	movs	r1, r4
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	22e0      	movs	r2, #224	; 0xe0
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2201      	movs	r2, #1
 8002a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <MX_GPIO_Init+0x1ac>)
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f000 fbd7 	bl	80031e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b00d      	add	sp, #52	; 0x34
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40021000 	.word	0x40021000
 8002a48:	50000400 	.word	0x50000400
 8002a4c:	50001000 	.word	0x50001000
 8002a50:	50000c00 	.word	0x50000c00
 8002a54:	50000800 	.word	0x50000800

08002a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5c:	b672      	cpsid	i
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <Error_Handler+0x8>
	...

08002a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <HAL_MspInit+0x24>)
 8002a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_MspInit+0x24>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_MspInit+0x24>)
 8002a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_MspInit+0x24>)
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	0549      	lsls	r1, r1, #21
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_TIM_Base_MspInit+0x28>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d105      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_TIM_Base_MspInit+0x2c>)
 8002aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_TIM_Base_MspInit+0x2c>)
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	240c      	movs	r4, #12
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	0018      	movs	r0, r3
 8002aca:	2314      	movs	r3, #20
 8002acc:	001a      	movs	r2, r3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f004 f868 	bl	8006ba4 <memset>
  if(htim->Instance==TIM21)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_TIM_MspPostInit+0x70>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d121      	bne.n	8002b22 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_TIM_MspPostInit+0x74>)
 8002ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_TIM_MspPostInit+0x74>)
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_TIM_MspPostInit+0x74>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	2208      	movs	r2, #8
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PD0     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002af6:	0021      	movs	r1, r4
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2202      	movs	r2, #2
 8002b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <HAL_TIM_MspPostInit+0x78>)
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	0010      	movs	r0, r2
 8002b1e:	f000 fb63 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b009      	add	sp, #36	; 0x24
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40010800 	.word	0x40010800
 8002b30:	40021000 	.word	0x40021000
 8002b34:	50000c00 	.word	0x50000c00

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b089      	sub	sp, #36	; 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	240c      	movs	r4, #12
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	0018      	movs	r0, r3
 8002b46:	2314      	movs	r3, #20
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f004 f82a 	bl	8006ba4 <memset>
  if(huart->Instance==USART5)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_UART_MspInit+0x8c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d130      	bne.n	8002bbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART5_CLK_ENABLE();
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_UART_MspInit+0x90>)
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_UART_MspInit+0x90>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	0349      	lsls	r1, r1, #13
 8002b64:	430a      	orrs	r2, r1
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_UART_MspInit+0x90>)
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_UART_MspInit+0x90>)
 8002b6e:	2102      	movs	r1, #2
 8002b70:	430a      	orrs	r2, r1
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_UART_MspInit+0x90>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	2202      	movs	r2, #2
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART5 GPIO Configuration
    PB3     ------> USART5_TX
    PB4     ------> USART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002b80:	0021      	movs	r1, r4
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2218      	movs	r2, #24
 8002b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	2203      	movs	r2, #3
 8002b98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART5;
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	2206      	movs	r2, #6
 8002b9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_UART_MspInit+0x94>)
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	0010      	movs	r0, r2
 8002ba8:	f000 fb1e 	bl	80031e8 <HAL_GPIO_Init>

    /* USART5 interrupt Init */
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	200e      	movs	r0, #14
 8002bb2:	f000 fa5f 	bl	8003074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8002bb6:	200e      	movs	r0, #14
 8002bb8:	f000 fa71 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b009      	add	sp, #36	; 0x24
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	50000400 	.word	0x50000400

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <HardFault_Handler+0x4>

08002bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 f952 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <USART4_5_IRQHandler+0x14>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f002 f806 	bl	8004c18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000230 	.word	0x20000230

08002c18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  return 1;
 8002c1c:	2301      	movs	r3, #1
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_kill>:

int _kill(int pid, int sig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c2e:	f004 f813 	bl	8006c58 <__errno>
 8002c32:	0003      	movs	r3, r0
 8002c34:	2216      	movs	r2, #22
 8002c36:	601a      	str	r2, [r3, #0]
  return -1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	425b      	negs	r3, r3
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_exit>:

void _exit (int status)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	425a      	negs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ffe5 	bl	8002c24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c5a:	e7fe      	b.n	8002c5a <_exit+0x16>

08002c5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e00a      	b.n	8002c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c6e:	e000      	b.n	8002c72 <_read+0x16>
 8002c70:	bf00      	nop
 8002c72:	0001      	movs	r1, r0
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	b2ca      	uxtb	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	dbf0      	blt.n	8002c6e <_read+0x12>
  }

  return len;
 8002c8c:	687b      	ldr	r3, [r7, #4]
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b006      	add	sp, #24
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e009      	b.n	8002cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60ba      	str	r2, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	e000      	b.n	8002cb6 <_write+0x20>
 8002cb4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	dbf1      	blt.n	8002ca8 <_write+0x12>
  }
  return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b006      	add	sp, #24
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_close>:

int _close(int file)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	425b      	negs	r3, r3
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	0192      	lsls	r2, r2, #6
 8002cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_isatty>:

int _isatty(int file)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b004      	add	sp, #16
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	18d3      	adds	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f003 ff7e 	bl	8006c58 <__errno>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	425b      	negs	r3, r3
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	18d2      	adds	r2, r2, r3
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <_sbrk+0x64>)
 8002d78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b006      	add	sp, #24
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20005000 	.word	0x20005000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	200002b8 	.word	0x200002b8
 8002d90:	20000410 	.word	0x20000410

08002d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002da0:	480d      	ldr	r0, [pc, #52]	; (8002dd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002da2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002da4:	f7ff fff6 	bl	8002d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <LoopForever+0xe>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <LoopForever+0x16>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002dce:	f003 ff49 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd2:	f7ff fc3f 	bl	8002654 <main>

08002dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd6:	e7fe      	b.n	8002dd6 <LoopForever>
   ldr   r0, =_estack
 8002dd8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002de4:	0800aa60 	.word	0x0800aa60
  ldr r2, =_sbss
 8002de8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002dec:	2000040c 	.word	0x2000040c

08002df0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC1_COMP_IRQHandler>
	...

08002df4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_Init+0x3c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_Init+0x3c>)
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0c:	2003      	movs	r0, #3
 8002e0e:	f000 f811 	bl	8002e34 <HAL_InitTick>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e001      	b.n	8002e22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e1e:	f7ff fe21 	bl	8002a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	40022000 	.word	0x40022000

08002e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_InitTick+0x5c>)
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_InitTick+0x60>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	0019      	movs	r1, r3
 8002e46:	23fa      	movs	r3, #250	; 0xfa
 8002e48:	0098      	lsls	r0, r3, #2
 8002e4a:	f7fd f979 	bl	8000140 <__udivsi3>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	0019      	movs	r1, r3
 8002e52:	0020      	movs	r0, r4
 8002e54:	f7fd f974 	bl	8000140 <__udivsi3>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f92f 	bl	80030be <HAL_SYSTICK_Config>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e00f      	b.n	8002e88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d80b      	bhi.n	8002e86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	2301      	movs	r3, #1
 8002e72:	425b      	negs	r3, r3
 8002e74:	2200      	movs	r2, #0
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f8fc 	bl	8003074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_InitTick+0x64>)
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b003      	add	sp, #12
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000008 	.word	0x20000008
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	18d2      	adds	r2, r2, r3
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_IncTick+0x20>)
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	200002bc 	.word	0x200002bc

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200002bc 	.word	0x200002bc

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	f7ff ffe0 	bl	8002ec0 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000008 	.word	0x20000008

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	0002      	movs	r2, r0
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f2e:	d809      	bhi.n	8002f44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	001a      	movs	r2, r3
 8002f36:	231f      	movs	r3, #31
 8002f38:	401a      	ands	r2, r3
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_EnableIRQ+0x30>)
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4091      	lsls	r1, r2
 8002f40:	000a      	movs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
  }
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	0002      	movs	r2, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b7f      	cmp	r3, #127	; 0x7f
 8002f64:	d828      	bhi.n	8002fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f66:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <__NVIC_SetPriority+0xd4>)
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	33c0      	adds	r3, #192	; 0xc0
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	589b      	ldr	r3, [r3, r2]
 8002f76:	1dfa      	adds	r2, r7, #7
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	400a      	ands	r2, r1
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	21ff      	movs	r1, #255	; 0xff
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	43d2      	mvns	r2, r2
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	401a      	ands	r2, r3
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	4003      	ands	r3, r0
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa4:	481f      	ldr	r0, [pc, #124]	; (8003024 <__NVIC_SetPriority+0xd4>)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	33c0      	adds	r3, #192	; 0xc0
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fb6:	e031      	b.n	800301c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <__NVIC_SetPriority+0xd8>)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3306      	adds	r3, #6
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	3304      	adds	r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1dfa      	adds	r2, r7, #7
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	2203      	movs	r2, #3
 8002fda:	400a      	ands	r2, r1
 8002fdc:	00d2      	lsls	r2, r2, #3
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	4091      	lsls	r1, r2
 8002fe2:	000a      	movs	r2, r1
 8002fe4:	43d2      	mvns	r2, r2
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	4003      	ands	r3, r0
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003000:	4809      	ldr	r0, [pc, #36]	; (8003028 <__NVIC_SetPriority+0xd8>)
 8003002:	1dfb      	adds	r3, r7, #7
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	001c      	movs	r4, r3
 8003008:	230f      	movs	r3, #15
 800300a:	4023      	ands	r3, r4
 800300c:	3b08      	subs	r3, #8
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	430a      	orrs	r2, r1
 8003012:	3306      	adds	r3, #6
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	18c3      	adds	r3, r0, r3
 8003018:	3304      	adds	r3, #4
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b003      	add	sp, #12
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	045b      	lsls	r3, r3, #17
 800303c:	429a      	cmp	r2, r3
 800303e:	d301      	bcc.n	8003044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003040:	2301      	movs	r3, #1
 8003042:	e010      	b.n	8003066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <SysTick_Config+0x44>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	3a01      	subs	r2, #1
 800304a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304c:	2301      	movs	r3, #1
 800304e:	425b      	negs	r3, r3
 8003050:	2103      	movs	r1, #3
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff ff7c 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x44>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x44>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	210f      	movs	r1, #15
 8003080:	187b      	adds	r3, r7, r1
 8003082:	1c02      	adds	r2, r0, #0
 8003084:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	187b      	adds	r3, r7, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b25b      	sxtb	r3, r3
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff ff5d 	bl	8002f50 <__NVIC_SetPriority>
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	0002      	movs	r2, r0
 80030a6:	1dfb      	adds	r3, r7, #7
 80030a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff33 	bl	8002f1c <__NVIC_EnableIRQ>
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff ffaf 	bl	800302c <SysTick_Config>
 80030ce:	0003      	movs	r3, r0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2225      	movs	r2, #37	; 0x25
 80030ec:	5c9b      	ldrb	r3, [r3, r2]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2224      	movs	r2, #36	; 0x24
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e024      	b.n	8003150 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	210e      	movs	r1, #14
 8003112:	438a      	bics	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	221c      	movs	r2, #28
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2101      	movs	r1, #1
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2225      	movs	r2, #37	; 0x25
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2224      	movs	r2, #36	; 0x24
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]

    return status;
 800314a:	230f      	movs	r3, #15
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	210f      	movs	r1, #15
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2225      	movs	r2, #37	; 0x25
 800316c:	5c9b      	ldrb	r3, [r3, r2]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d006      	beq.n	8003182 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2204      	movs	r2, #4
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e02a      	b.n	80031d8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	210e      	movs	r1, #14
 800318e:	438a      	bics	r2, r1
 8003190:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	438a      	bics	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	221c      	movs	r2, #28
 80031a8:	401a      	ands	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2101      	movs	r1, #1
 80031b0:	4091      	lsls	r1, r2
 80031b2:	000a      	movs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2225      	movs	r2, #37	; 0x25
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2224      	movs	r2, #36	; 0x24
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d004      	beq.n	80031d8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	0010      	movs	r0, r2
 80031d6:	4798      	blx	r3
    }
  }
  return status;
 80031d8:	230f      	movs	r3, #15
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	781b      	ldrb	r3, [r3, #0]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80031fe:	e155      	b.n	80034ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4091      	lsls	r1, r2
 800320a:	000a      	movs	r2, r1
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d100      	bne.n	8003218 <HAL_GPIO_Init+0x30>
 8003216:	e146      	b.n	80034a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2203      	movs	r2, #3
 800321e:	4013      	ands	r3, r2
 8003220:	2b01      	cmp	r3, #1
 8003222:	d005      	beq.n	8003230 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2203      	movs	r2, #3
 800322a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800322c:	2b02      	cmp	r3, #2
 800322e:	d130      	bne.n	8003292 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	409a      	lsls	r2, r3
 800323e:	0013      	movs	r3, r2
 8003240:	43da      	mvns	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	409a      	lsls	r2, r3
 8003252:	0013      	movs	r3, r2
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003266:	2201      	movs	r2, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	409a      	lsls	r2, r3
 800326c:	0013      	movs	r3, r2
 800326e:	43da      	mvns	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	2201      	movs	r2, #1
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
 8003284:	0013      	movs	r3, r2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	4013      	ands	r3, r2
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	409a      	lsls	r2, r3
 80032c0:	0013      	movs	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d123      	bne.n	8003322 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	58d3      	ldr	r3, [r2, r3]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2207      	movs	r2, #7
 80032ec:	4013      	ands	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2107      	movs	r1, #7
 8003306:	400b      	ands	r3, r1
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	0092      	lsls	r2, r2, #2
 800331e:	6939      	ldr	r1, [r7, #16]
 8003320:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	43da      	mvns	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	401a      	ands	r2, r3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	0013      	movs	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	029b      	lsls	r3, r3, #10
 800335e:	4013      	ands	r3, r2
 8003360:	d100      	bne.n	8003364 <HAL_GPIO_Init+0x17c>
 8003362:	e0a0      	b.n	80034a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003364:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_GPIO_Init+0x2dc>)
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <HAL_GPIO_Init+0x2dc>)
 800336a:	2101      	movs	r1, #1
 800336c:	430a      	orrs	r2, r1
 800336e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003370:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_GPIO_Init+0x2e0>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	589b      	ldr	r3, [r3, r2]
 800337c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2203      	movs	r2, #3
 8003382:	4013      	ands	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	409a      	lsls	r2, r3
 800338a:	0013      	movs	r3, r2
 800338c:	43da      	mvns	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	23a0      	movs	r3, #160	; 0xa0
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	429a      	cmp	r2, r3
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x1f6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	; (80034cc <HAL_GPIO_Init+0x2e4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x1f2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a49      	ldr	r2, [pc, #292]	; (80034d0 <HAL_GPIO_Init+0x2e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x1ee>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a48      	ldr	r2, [pc, #288]	; (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x1ea>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a47      	ldr	r2, [pc, #284]	; (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x1e6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a46      	ldr	r2, [pc, #280]	; (80034dc <HAL_GPIO_Init+0x2f4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x1e2>
 80033c6:	2305      	movs	r3, #5
 80033c8:	e00a      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033ce:	2304      	movs	r3, #4
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033de:	2300      	movs	r3, #0
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	2103      	movs	r1, #3
 80033e4:	400a      	ands	r2, r1
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <HAL_GPIO_Init+0x2e0>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43da      	mvns	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	035b      	lsls	r3, r3, #13
 8003416:	4013      	ands	r3, r2
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003422:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43da      	mvns	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	039b      	lsls	r3, r3, #14
 8003440:	4013      	ands	r3, r2
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800344c:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43da      	mvns	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	029b      	lsls	r3, r3, #10
 800346a:	4013      	ands	r3, r2
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43da      	mvns	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	025b      	lsls	r3, r3, #9
 8003494:	4013      	ands	r3, r2
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_GPIO_Init+0x2f8>)
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	40da      	lsrs	r2, r3
 80034b4:	1e13      	subs	r3, r2, #0
 80034b6:	d000      	beq.n	80034ba <HAL_GPIO_Init+0x2d2>
 80034b8:	e6a2      	b.n	8003200 <HAL_GPIO_Init+0x18>
  }
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	50000400 	.word	0x50000400
 80034d0:	50000800 	.word	0x50000800
 80034d4:	50000c00 	.word	0x50000c00
 80034d8:	50001000 	.word	0x50001000
 80034dc:	50001c00 	.word	0x50001c00
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	0008      	movs	r0, r1
 80034ee:	0011      	movs	r1, r2
 80034f0:	1cbb      	adds	r3, r7, #2
 80034f2:	1c02      	adds	r2, r0, #0
 80034f4:	801a      	strh	r2, [r3, #0]
 80034f6:	1c7b      	adds	r3, r7, #1
 80034f8:	1c0a      	adds	r2, r1, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034fc:	1c7b      	adds	r3, r7, #1
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003504:	1cbb      	adds	r3, r7, #2
 8003506:	881a      	ldrh	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800350e:	1cbb      	adds	r3, r7, #2
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b002      	add	sp, #8
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f000 fbbf 	bl	8003cb2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003534:	4bc9      	ldr	r3, [pc, #804]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	220c      	movs	r2, #12
 800353a:	4013      	ands	r3, r2
 800353c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800353e:	4bc7      	ldr	r3, [pc, #796]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d100      	bne.n	8003556 <HAL_RCC_OscConfig+0x36>
 8003554:	e07e      	b.n	8003654 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d007      	beq.n	800356c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x68>
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	025b      	lsls	r3, r3, #9
 8003568:	429a      	cmp	r2, r3
 800356a:	d10d      	bne.n	8003588 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4bbb      	ldr	r3, [pc, #748]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	029b      	lsls	r3, r3, #10
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_RCC_OscConfig+0x5a>
 8003578:	e06b      	b.n	8003652 <HAL_RCC_OscConfig+0x132>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d167      	bne.n	8003652 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f000 fb95 	bl	8003cb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x84>
 8003594:	4bb1      	ldr	r3, [pc, #708]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4bb0      	ldr	r3, [pc, #704]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	0249      	lsls	r1, r1, #9
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	e027      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	23a0      	movs	r3, #160	; 0xa0
 80035aa:	02db      	lsls	r3, r3, #11
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10e      	bne.n	80035ce <HAL_RCC_OscConfig+0xae>
 80035b0:	4baa      	ldr	r3, [pc, #680]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4ba9      	ldr	r3, [pc, #676]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	02c9      	lsls	r1, r1, #11
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	4ba7      	ldr	r3, [pc, #668]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4ba6      	ldr	r3, [pc, #664]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	0249      	lsls	r1, r1, #9
 80035c8:	430a      	orrs	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e012      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035ce:	4ba3      	ldr	r3, [pc, #652]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4ba2      	ldr	r3, [pc, #648]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035d4:	49a2      	ldr	r1, [pc, #648]	; (8003860 <HAL_RCC_OscConfig+0x340>)
 80035d6:	400a      	ands	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	4ba0      	ldr	r3, [pc, #640]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	4013      	ands	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4b9c      	ldr	r3, [pc, #624]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b9b      	ldr	r3, [pc, #620]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80035ee:	499d      	ldr	r1, [pc, #628]	; (8003864 <HAL_RCC_OscConfig+0x344>)
 80035f0:	400a      	ands	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff fc60 	bl	8002ec0 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003604:	e009      	b.n	800361a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003606:	f7ff fc5b 	bl	8002ec0 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d902      	bls.n	800361a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	f000 fb4c 	bl	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361a:	4b90      	ldr	r3, [pc, #576]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d0ef      	beq.n	8003606 <HAL_RCC_OscConfig+0xe6>
 8003626:	e015      	b.n	8003654 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7ff fc4a 	bl	8002ec0 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003632:	f7ff fc45 	bl	8002ec0 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e336      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	4013      	ands	r3, r2
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x112>
 8003650:	e000      	b.n	8003654 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003652:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d100      	bne.n	8003660 <HAL_RCC_OscConfig+0x140>
 800365e:	e099      	b.n	8003794 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800366e:	4b7b      	ldr	r3, [pc, #492]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b7a      	ldr	r3, [pc, #488]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003674:	2120      	movs	r1, #32
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2220      	movs	r2, #32
 800367e:	4393      	bics	r3, r2
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d13e      	bne.n	800370c <HAL_RCC_OscConfig+0x1ec>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d13b      	bne.n	800370c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003694:	4b71      	ldr	r3, [pc, #452]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	4013      	ands	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_RCC_OscConfig+0x188>
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e304      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b6c      	ldr	r3, [pc, #432]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	; (8003868 <HAL_RCC_OscConfig+0x348>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	021a      	lsls	r2, r3, #8
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2209      	movs	r2, #9
 80036c4:	4393      	bics	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d0:	f000 fc42 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 80036d4:	0001      	movs	r1, r0
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	220f      	movs	r2, #15
 80036de:	4013      	ands	r3, r2
 80036e0:	4a62      	ldr	r2, [pc, #392]	; (800386c <HAL_RCC_OscConfig+0x34c>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	000a      	movs	r2, r1
 80036e6:	40da      	lsrs	r2, r3
 80036e8:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_OscConfig+0x350>)
 80036ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x354>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2513      	movs	r5, #19
 80036f2:	197c      	adds	r4, r7, r5
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fb9d 	bl	8002e34 <HAL_InitTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80036fe:	197b      	adds	r3, r7, r5
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d046      	beq.n	8003794 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003706:	197b      	adds	r3, r7, r5
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	e2d2      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d027      	beq.n	8003762 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003712:	4b52      	ldr	r3, [pc, #328]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2209      	movs	r2, #9
 8003718:	4393      	bics	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	4b4f      	ldr	r3, [pc, #316]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff fbcc 	bl	8002ec0 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372e:	f7ff fbc7 	bl	8002ec0 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e2b8      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003740:	4b46      	ldr	r3, [pc, #280]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2204      	movs	r2, #4
 8003746:	4013      	ands	r3, r2
 8003748:	d0f1      	beq.n	800372e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a46      	ldr	r2, [pc, #280]	; (8003868 <HAL_RCC_OscConfig+0x348>)
 8003750:	4013      	ands	r3, r2
 8003752:	0019      	movs	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003768:	2101      	movs	r1, #1
 800376a:	438a      	bics	r2, r1
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7ff fba7 	bl	8002ec0 <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7ff fba2 	bl	8002ec0 <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e293      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	d1f1      	bne.n	8003778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2210      	movs	r2, #16
 800379a:	4013      	ands	r3, r2
 800379c:	d100      	bne.n	80037a0 <HAL_RCC_OscConfig+0x280>
 800379e:	e0a2      	b.n	80038e6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d140      	bne.n	8003828 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x29e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e279      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x358>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037cc:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	0a19      	lsrs	r1, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	061a      	lsls	r2, r3, #24
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	0b5b      	lsrs	r3, r3, #13
 80037ec:	3301      	adds	r3, #1
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	0212      	lsls	r2, r2, #8
 80037f2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	210f      	movs	r1, #15
 80037fc:	400b      	ands	r3, r1
 80037fe:	491b      	ldr	r1, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x34c>)
 8003800:	5ccb      	ldrb	r3, [r1, r3]
 8003802:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_RCC_OscConfig+0x350>)
 8003806:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCC_OscConfig+0x354>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2513      	movs	r5, #19
 800380e:	197c      	adds	r4, r7, r5
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff fb0f 	bl	8002e34 <HAL_InitTick>
 8003816:	0003      	movs	r3, r0
 8003818:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800381a:	197b      	adds	r3, r7, r5
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d061      	beq.n	80038e6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003822:	197b      	adds	r3, r7, r5
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	e244      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d040      	beq.n	80038b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_OscConfig+0x33c>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0049      	lsls	r1, r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7ff fb3f 	bl	8002ec0 <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003846:	e019      	b.n	800387c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003848:	f7ff fb3a 	bl	8002ec0 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d912      	bls.n	800387c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e22b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40021000 	.word	0x40021000
 8003860:	fffeffff 	.word	0xfffeffff
 8003864:	fffbffff 	.word	0xfffbffff
 8003868:	ffffe0ff 	.word	0xffffe0ff
 800386c:	0800a5b8 	.word	0x0800a5b8
 8003870:	20000000 	.word	0x20000000
 8003874:	20000004 	.word	0x20000004
 8003878:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800387c:	4bca      	ldr	r3, [pc, #808]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4013      	ands	r3, r2
 8003886:	d0df      	beq.n	8003848 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003888:	4bc7      	ldr	r3, [pc, #796]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4ac7      	ldr	r2, [pc, #796]	; (8003bac <HAL_RCC_OscConfig+0x68c>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003896:	4bc4      	ldr	r3, [pc, #784]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800389c:	4bc2      	ldr	r3, [pc, #776]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	0a19      	lsrs	r1, r3, #8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	061a      	lsls	r2, r3, #24
 80038aa:	4bbf      	ldr	r3, [pc, #764]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	e019      	b.n	80038e6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b2:	4bbd      	ldr	r3, [pc, #756]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4bbc      	ldr	r3, [pc, #752]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038b8:	49bd      	ldr	r1, [pc, #756]	; (8003bb0 <HAL_RCC_OscConfig+0x690>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7ff faff 	bl	8002ec0 <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c8:	f7ff fafa 	bl	8002ec0 <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1eb      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038da:	4bb3      	ldr	r3, [pc, #716]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2208      	movs	r2, #8
 80038ec:	4013      	ands	r3, r2
 80038ee:	d036      	beq.n	800395e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d019      	beq.n	800392c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f8:	4bab      	ldr	r3, [pc, #684]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038fc:	4baa      	ldr	r3, [pc, #680]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003904:	f7ff fadc 	bl	8002ec0 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7ff fad7 	bl	8002ec0 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1c8      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003920:	4ba1      	ldr	r3, [pc, #644]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d0f1      	beq.n	800390e <HAL_RCC_OscConfig+0x3ee>
 800392a:	e018      	b.n	800395e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b9e      	ldr	r3, [pc, #632]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 800392e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003930:	4b9d      	ldr	r3, [pc, #628]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003932:	2101      	movs	r1, #1
 8003934:	438a      	bics	r2, r1
 8003936:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7ff fac2 	bl	8002ec0 <HAL_GetTick>
 800393c:	0003      	movs	r3, r0
 800393e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003942:	f7ff fabd 	bl	8002ec0 <HAL_GetTick>
 8003946:	0002      	movs	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1ae      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003954:	4b94      	ldr	r3, [pc, #592]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	2202      	movs	r2, #2
 800395a:	4013      	ands	r3, r2
 800395c:	d1f1      	bne.n	8003942 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	d100      	bne.n	800396a <HAL_RCC_OscConfig+0x44a>
 8003968:	e0ae      	b.n	8003ac8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2023      	movs	r0, #35	; 0x23
 800396c:	183b      	adds	r3, r7, r0
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003972:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	055b      	lsls	r3, r3, #21
 800397a:	4013      	ands	r3, r2
 800397c:	d109      	bne.n	8003992 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397e:	4b8a      	ldr	r3, [pc, #552]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003982:	4b89      	ldr	r3, [pc, #548]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003984:	2180      	movs	r1, #128	; 0x80
 8003986:	0549      	lsls	r1, r1, #21
 8003988:	430a      	orrs	r2, r1
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800398c:	183b      	adds	r3, r7, r0
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b88      	ldr	r3, [pc, #544]	; (8003bb4 <HAL_RCC_OscConfig+0x694>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4013      	ands	r3, r2
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b85      	ldr	r3, [pc, #532]	; (8003bb4 <HAL_RCC_OscConfig+0x694>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b84      	ldr	r3, [pc, #528]	; (8003bb4 <HAL_RCC_OscConfig+0x694>)
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	0049      	lsls	r1, r1, #1
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ac:	f7ff fa88 	bl	8002ec0 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7ff fa83 	bl	8002ec0 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	; 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e174      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <HAL_RCC_OscConfig+0x694>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4d0>
 80039e0:	4b71      	ldr	r3, [pc, #452]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80039e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e4:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80039e6:	2180      	movs	r1, #128	; 0x80
 80039e8:	0049      	lsls	r1, r1, #1
 80039ea:	430a      	orrs	r2, r1
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50
 80039ee:	e031      	b.n	8003a54 <HAL_RCC_OscConfig+0x534>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x4f2>
 80039f8:	4b6b      	ldr	r3, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80039fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 80039fe:	496c      	ldr	r1, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x690>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	651a      	str	r2, [r3, #80]	; 0x50
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a0a:	496b      	ldr	r1, [pc, #428]	; (8003bb8 <HAL_RCC_OscConfig+0x698>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a10:	e020      	b.n	8003a54 <HAL_RCC_OscConfig+0x534>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	23a0      	movs	r3, #160	; 0xa0
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d10e      	bne.n	8003a3c <HAL_RCC_OscConfig+0x51c>
 8003a1e:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a22:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	00c9      	lsls	r1, r1, #3
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	0049      	lsls	r1, r1, #1
 8003a36:	430a      	orrs	r2, r1
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0x534>
 8003a3c:	4b5a      	ldr	r3, [pc, #360]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a42:	495b      	ldr	r1, [pc, #364]	; (8003bb0 <HAL_RCC_OscConfig+0x690>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a4e:	495a      	ldr	r1, [pc, #360]	; (8003bb8 <HAL_RCC_OscConfig+0x698>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d015      	beq.n	8003a88 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7ff fa30 	bl	8002ec0 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a64:	e009      	b.n	8003a7a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7ff fa2b 	bl	8002ec0 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4a52      	ldr	r2, [pc, #328]	; (8003bbc <HAL_RCC_OscConfig+0x69c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e11b      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d0ef      	beq.n	8003a66 <HAL_RCC_OscConfig+0x546>
 8003a86:	e014      	b.n	8003ab2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a88:	f7ff fa1a 	bl	8002ec0 <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a90:	e009      	b.n	8003aa6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7ff fa15 	bl	8002ec0 <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	4a47      	ldr	r2, [pc, #284]	; (8003bbc <HAL_RCC_OscConfig+0x69c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e105      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aa6:	4b40      	ldr	r3, [pc, #256]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ab2:	2323      	movs	r3, #35	; 0x23
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b3a      	ldr	r3, [pc, #232]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003ac2:	493f      	ldr	r1, [pc, #252]	; (8003bc0 <HAL_RCC_OscConfig+0x6a0>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d049      	beq.n	8003b66 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d026      	beq.n	8003b28 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
 8003af2:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_OscConfig+0x6a4>)
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_RCC_OscConfig+0x6a4>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0189      	lsls	r1, r1, #6
 8003afc:	430a      	orrs	r2, r1
 8003afe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7ff f9de 	bl	8002ec0 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0a:	f7ff f9d9 	bl	8002ec0 <HAL_GetTick>
 8003b0e:	0002      	movs	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0ca      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2202      	movs	r2, #2
 8003b22:	4013      	ands	r3, r2
 8003b24:	d0f1      	beq.n	8003b0a <HAL_RCC_OscConfig+0x5ea>
 8003b26:	e01e      	b.n	8003b66 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	438a      	bics	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <HAL_RCC_OscConfig+0x6a4>)
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_OscConfig+0x6a4>)
 8003b3a:	4923      	ldr	r1, [pc, #140]	; (8003bc8 <HAL_RCC_OscConfig+0x6a8>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7ff f9be 	bl	8002ec0 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4a:	f7ff f9b9 	bl	8002ec0 <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0aa      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2202      	movs	r2, #2
 8003b62:	4013      	ands	r3, r2
 8003b64:	d1f1      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d100      	bne.n	8003b70 <HAL_RCC_OscConfig+0x650>
 8003b6e:	e09f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	d100      	bne.n	8003b78 <HAL_RCC_OscConfig+0x658>
 8003b76:	e078      	b.n	8003c6a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d159      	bne.n	8003c34 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_RCC_OscConfig+0x688>)
 8003b86:	4911      	ldr	r1, [pc, #68]	; (8003bcc <HAL_RCC_OscConfig+0x6ac>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7ff f998 	bl	8002ec0 <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7ff f993 	bl	8002ec0 <HAL_GetTick>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d915      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e084      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	ffff1fff 	.word	0xffff1fff
 8003bb0:	fffffeff 	.word	0xfffffeff
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	fffffbff 	.word	0xfffffbff
 8003bbc:	00001388 	.word	0x00001388
 8003bc0:	efffffff 	.word	0xefffffff
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	ffffdfff 	.word	0xffffdfff
 8003bcc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	049b      	lsls	r3, r3, #18
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d1dc      	bne.n	8003b96 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bdc:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a37      	ldr	r2, [pc, #220]	; (8003cc0 <HAL_RCC_OscConfig+0x7a0>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	4b31      	ldr	r3, [pc, #196]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	0449      	lsls	r1, r1, #17
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7ff f959 	bl	8002ec0 <HAL_GetTick>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c14:	f7ff f954 	bl	8002ec0 <HAL_GetTick>
 8003c18:	0002      	movs	r2, r0
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e045      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c26:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	049b      	lsls	r3, r3, #18
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x6f4>
 8003c32:	e03d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_OscConfig+0x7a4>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7ff f93e 	bl	8002ec0 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7ff f939 	bl	8002ec0 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e02a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	049b      	lsls	r3, r3, #18
 8003c64:	4013      	ands	r3, r2
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x72a>
 8003c68:	e022      	b.n	8003cb0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e01d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <HAL_RCC_OscConfig+0x79c>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	025b      	lsls	r3, r3, #9
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10f      	bne.n	8003cac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	23f0      	movs	r3, #240	; 0xf0
 8003c90:	039b      	lsls	r3, r3, #14
 8003c92:	401a      	ands	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	23c0      	movs	r3, #192	; 0xc0
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	401a      	ands	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b00a      	add	sp, #40	; 0x28
 8003cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	ff02ffff 	.word	0xff02ffff
 8003cc4:	feffffff 	.word	0xfeffffff

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b5b0      	push	{r4, r5, r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e128      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d91e      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b93      	ldr	r3, [pc, #588]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	4b90      	ldr	r3, [pc, #576]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cfc:	f7ff f8e0 	bl	8002ec0 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d04:	e009      	b.n	8003d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d06:	f7ff f8db 	bl	8002ec0 <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	4a8a      	ldr	r2, [pc, #552]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e109      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b87      	ldr	r3, [pc, #540]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d32:	4b83      	ldr	r3, [pc, #524]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	22f0      	movs	r2, #240	; 0xf0
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x8a>
 8003d50:	e089      	b.n	8003e66 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d5a:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	029b      	lsls	r3, r3, #10
 8003d62:	4013      	ands	r3, r2
 8003d64:	d120      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0e1      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	049b      	lsls	r3, r3, #18
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d114      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0d5      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	4013      	ands	r3, r2
 8003d92:	d109      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ca      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d98:	4b69      	ldr	r3, [pc, #420]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0c2      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da8:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2203      	movs	r2, #3
 8003dae:	4393      	bics	r3, r2
 8003db0:	0019      	movs	r1, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7ff f880 	bl	8002ec0 <HAL_GetTick>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dce:	f7ff f877 	bl	8002ec0 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0a5      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	220c      	movs	r2, #12
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d1ef      	bne.n	8003dce <HAL_RCC_ClockConfig+0x106>
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d111      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df8:	e009      	b.n	8003e0e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfa:	f7ff f861 	bl	8002ec0 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4a4d      	ldr	r2, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e08f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0e:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	220c      	movs	r2, #12
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b0c      	cmp	r3, #12
 8003e18:	d1ef      	bne.n	8003dfa <HAL_RCC_ClockConfig+0x132>
 8003e1a:	e024      	b.n	8003e66 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d11b      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e24:	e009      	b.n	8003e3a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e26:	f7ff f84b 	bl	8002ec0 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a42      	ldr	r2, [pc, #264]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e079      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	220c      	movs	r2, #12
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d1ef      	bne.n	8003e26 <HAL_RCC_ClockConfig+0x15e>
 8003e46:	e00e      	b.n	8003e66 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7ff f83a 	bl	8002ec0 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e068      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	220c      	movs	r2, #12
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e66:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d21e      	bcs.n	8003eb2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e86:	f7ff f81b 	bl	8002ec0 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f7ff f816 	bl	8002ec0 <HAL_GetTick>
 8003e94:	0002      	movs	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <HAL_RCC_ClockConfig+0x274>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e044      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCC_ClockConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d1ee      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	; (8003f44 <HAL_RCC_ClockConfig+0x27c>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eda:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_RCC_ClockConfig+0x280>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	00da      	lsls	r2, r3, #3
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003eec:	430a      	orrs	r2, r1
 8003eee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ef0:	f000 f832 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 8003ef4:	0001      	movs	r1, r0
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_RCC_ClockConfig+0x278>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	220f      	movs	r2, #15
 8003efe:	4013      	ands	r3, r2
 8003f00:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <HAL_RCC_ClockConfig+0x284>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	000a      	movs	r2, r1
 8003f06:	40da      	lsrs	r2, r3
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCC_ClockConfig+0x288>)
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_ClockConfig+0x28c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	250b      	movs	r5, #11
 8003f12:	197c      	adds	r4, r7, r5
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fe ff8d 	bl	8002e34 <HAL_InitTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f1e:	197b      	adds	r3, r7, r5
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f26:	197b      	adds	r3, r7, r5
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b004      	add	sp, #16
 8003f34:	bdb0      	pop	{r4, r5, r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	00001388 	.word	0x00001388
 8003f40:	40021000 	.word	0x40021000
 8003f44:	fffff8ff 	.word	0xfffff8ff
 8003f48:	ffffc7ff 	.word	0xffffc7ff
 8003f4c:	0800a5b8 	.word	0x0800a5b8
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000004 	.word	0x20000004

08003f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	b08e      	sub	sp, #56	; 0x38
 8003f5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f5e:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f66:	230c      	movs	r3, #12
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d014      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x40>
 8003f6e:	d900      	bls.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1a>
 8003f70:	e07b      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x112>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d002      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x24>
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7a:	e076      	b.n	800406a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f7c:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2210      	movs	r2, #16
 8003f82:	4013      	ands	r3, r2
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f8a:	e07c      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f90:	e079      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f96:	e076      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	0c9a      	lsrs	r2, r3, #18
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_GetSysClockFreq+0x144>)
 8003fa2:	5c9b      	ldrb	r3, [r3, r2]
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	0d9a      	lsrs	r2, r3, #22
 8003faa:	2303      	movs	r3, #3
 8003fac:	4013      	ands	r3, r2
 8003fae:	3301      	adds	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	025b      	lsls	r3, r3, #9
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_RCC_GetSysClockFreq+0x140>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	69b8      	ldr	r0, [r7, #24]
 8003fcc:	69f9      	ldr	r1, [r7, #28]
 8003fce:	f7fc fa8b 	bl	80004e8 <__aeabi_lmul>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	000b      	movs	r3, r1
 8003fd6:	0010      	movs	r0, r2
 8003fd8:	0019      	movs	r1, r3
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f7fc fa5f 	bl	80004a8 <__aeabi_uldivmod>
 8003fea:	0002      	movs	r2, r0
 8003fec:	000b      	movs	r3, r1
 8003fee:	0013      	movs	r3, r2
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff2:	e037      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d01a      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4a23      	ldr	r2, [pc, #140]	; (8004094 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004008:	2300      	movs	r3, #0
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	f7fc fa6b 	bl	80004e8 <__aeabi_lmul>
 8004012:	0002      	movs	r2, r0
 8004014:	000b      	movs	r3, r1
 8004016:	0010      	movs	r0, r2
 8004018:	0019      	movs	r1, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f7fc fa3f 	bl	80004a8 <__aeabi_uldivmod>
 800402a:	0002      	movs	r2, r0
 800402c:	000b      	movs	r3, r1
 800402e:	0013      	movs	r3, r2
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e017      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	0018      	movs	r0, r3
 8004038:	2300      	movs	r3, #0
 800403a:	0019      	movs	r1, r3
 800403c:	4a16      	ldr	r2, [pc, #88]	; (8004098 <HAL_RCC_GetSysClockFreq+0x140>)
 800403e:	2300      	movs	r3, #0
 8004040:	f7fc fa52 	bl	80004e8 <__aeabi_lmul>
 8004044:	0002      	movs	r2, r0
 8004046:	000b      	movs	r3, r1
 8004048:	0010      	movs	r0, r2
 800404a:	0019      	movs	r1, r3
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	001c      	movs	r4, r3
 8004050:	2300      	movs	r3, #0
 8004052:	001d      	movs	r5, r3
 8004054:	0022      	movs	r2, r4
 8004056:	002b      	movs	r3, r5
 8004058:	f7fc fa26 	bl	80004a8 <__aeabi_uldivmod>
 800405c:	0002      	movs	r2, r0
 800405e:	000b      	movs	r3, r1
 8004060:	0013      	movs	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004068:	e00d      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_GetSysClockFreq+0x138>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	2207      	movs	r2, #7
 8004072:	4013      	ands	r3, r2
 8004074:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	3301      	adds	r3, #1
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	0212      	lsls	r2, r2, #8
 800407e:	409a      	lsls	r2, r3
 8004080:	0013      	movs	r3, r2
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004084:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b00e      	add	sp, #56	; 0x38
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	40021000 	.word	0x40021000
 8004094:	003d0900 	.word	0x003d0900
 8004098:	00f42400 	.word	0x00f42400
 800409c:	0800a5d0 	.word	0x0800a5d0

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	20000000 	.word	0x20000000

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f7ff fff2 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040bc:	0001      	movs	r1, r0
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	2207      	movs	r2, #7
 80040c6:	4013      	ands	r3, r2
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	40d9      	lsrs	r1, r3
 80040ce:	000b      	movs	r3, r1
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	40021000 	.word	0x40021000
 80040dc:	0800a5c8 	.word	0x0800a5c8

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	0001      	movs	r1, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0adb      	lsrs	r3, r3, #11
 80040f0:	2207      	movs	r2, #7
 80040f2:	4013      	ands	r3, r2
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f6:	5cd3      	ldrb	r3, [r2, r3]
 80040f8:	40d9      	lsrs	r1, r3
 80040fa:	000b      	movs	r3, r1
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	40021000 	.word	0x40021000
 8004108:	0800a5c8 	.word	0x0800a5c8

0800410c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e032      	b.n	8004184 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2239      	movs	r2, #57	; 0x39
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2238      	movs	r2, #56	; 0x38
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fe fca9 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2239      	movs	r2, #57	; 0x39
 800413e:	2102      	movs	r1, #2
 8004140:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	0019      	movs	r1, r3
 800414c:	0010      	movs	r0, r2
 800414e:	f000 fa91 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223e      	movs	r2, #62	; 0x3e
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223a      	movs	r2, #58	; 0x3a
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223b      	movs	r2, #59	; 0x3b
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223c      	movs	r2, #60	; 0x3c
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	223d      	movs	r2, #61	; 0x3d
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2239      	movs	r2, #57	; 0x39
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e032      	b.n	8004204 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2239      	movs	r2, #57	; 0x39
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2238      	movs	r2, #56	; 0x38
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f829 	bl	800420c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2239      	movs	r2, #57	; 0x39
 80041be:	2102      	movs	r1, #2
 80041c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	0019      	movs	r1, r3
 80041cc:	0010      	movs	r0, r2
 80041ce:	f000 fa51 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223e      	movs	r2, #62	; 0x3e
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223a      	movs	r2, #58	; 0x3a
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223b      	movs	r2, #59	; 0x3b
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223c      	movs	r2, #60	; 0x3c
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223d      	movs	r2, #61	; 0x3d
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2239      	movs	r2, #57	; 0x39
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <HAL_TIM_PWM_Start+0x22>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	223a      	movs	r2, #58	; 0x3a
 8004230:	5c9b      	ldrb	r3, [r3, r2]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	1e5a      	subs	r2, r3, #1
 8004238:	4193      	sbcs	r3, r2
 800423a:	b2db      	uxtb	r3, r3
 800423c:	e01f      	b.n	800427e <HAL_TIM_PWM_Start+0x62>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d108      	bne.n	8004256 <HAL_TIM_PWM_Start+0x3a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223b      	movs	r2, #59	; 0x3b
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	1e5a      	subs	r2, r3, #1
 8004250:	4193      	sbcs	r3, r2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e013      	b.n	800427e <HAL_TIM_PWM_Start+0x62>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d108      	bne.n	800426e <HAL_TIM_PWM_Start+0x52>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	223c      	movs	r2, #60	; 0x3c
 8004260:	5c9b      	ldrb	r3, [r3, r2]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	4193      	sbcs	r3, r2
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e007      	b.n	800427e <HAL_TIM_PWM_Start+0x62>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	223d      	movs	r2, #61	; 0x3d
 8004272:	5c9b      	ldrb	r3, [r3, r2]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	4193      	sbcs	r3, r2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e052      	b.n	800432c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <HAL_TIM_PWM_Start+0x7a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	223a      	movs	r2, #58	; 0x3a
 8004290:	2102      	movs	r1, #2
 8004292:	5499      	strb	r1, [r3, r2]
 8004294:	e013      	b.n	80042be <HAL_TIM_PWM_Start+0xa2>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x8a>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223b      	movs	r2, #59	; 0x3b
 80042a0:	2102      	movs	r1, #2
 80042a2:	5499      	strb	r1, [r3, r2]
 80042a4:	e00b      	b.n	80042be <HAL_TIM_PWM_Start+0xa2>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start+0x9a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2102      	movs	r1, #2
 80042b2:	5499      	strb	r1, [r3, r2]
 80042b4:	e003      	b.n	80042be <HAL_TIM_PWM_Start+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	223d      	movs	r2, #61	; 0x3d
 80042ba:	2102      	movs	r1, #2
 80042bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fbd0 	bl	8004a6c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	05db      	lsls	r3, r3, #23
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIM_PWM_Start+0xda>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIM_PWM_Start+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_TIM_PWM_Start+0xda>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_TIM_PWM_Start+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIM_PWM_Start+0xda>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a12      	ldr	r2, [pc, #72]	; (800433c <HAL_TIM_PWM_Start+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d111      	bne.n	800431a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2207      	movs	r2, #7
 80042fe:	4013      	ands	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b06      	cmp	r3, #6
 8004306:	d010      	beq.n	800432a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2101      	movs	r1, #1
 8004314:	430a      	orrs	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004318:	e007      	b.n	800432a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b004      	add	sp, #16
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40000400 	.word	0x40000400
 8004338:	40010800 	.word	0x40010800
 800433c:	40011400 	.word	0x40011400

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2317      	movs	r3, #23
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2238      	movs	r2, #56	; 0x38
 8004358:	5c9b      	ldrb	r3, [r3, r2]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x22>
 800435e:	2302      	movs	r3, #2
 8004360:	e0ad      	b.n	80044be <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2238      	movs	r2, #56	; 0x38
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d100      	bne.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004370:	e076      	b.n	8004460 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d900      	bls.n	800437a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004378:	e095      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d04e      	beq.n	800441e <HAL_TIM_PWM_ConfigChannel+0xde>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d900      	bls.n	8004388 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004386:	e08e      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_PWM_ConfigChannel+0x56>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d021      	beq.n	80043d8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004394:	e087      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	0011      	movs	r1, r2
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f9c6 	bl	8004730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2108      	movs	r1, #8
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2104      	movs	r1, #4
 80043c0:	438a      	bics	r2, r1
 80043c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	619a      	str	r2, [r3, #24]
      break;
 80043d6:	e06b      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	0011      	movs	r1, r2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 f9e1 	bl	80047a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	0109      	lsls	r1, r1, #4
 80043f4:	430a      	orrs	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4931      	ldr	r1, [pc, #196]	; (80044c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004404:	400a      	ands	r2, r1
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      break;
 800441c:	e048      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f000 fa00 	bl	800482c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2108      	movs	r1, #8
 8004438:	430a      	orrs	r2, r1
 800443a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2104      	movs	r1, #4
 8004448:	438a      	bics	r2, r1
 800444a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69d9      	ldr	r1, [r3, #28]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	61da      	str	r2, [r3, #28]
      break;
 800445e:	e027      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	0011      	movs	r1, r2
 8004468:	0018      	movs	r0, r3
 800446a:	f000 fa1f 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0109      	lsls	r1, r1, #4
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	490f      	ldr	r1, [pc, #60]	; (80044c8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800448c:	400a      	ands	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69d9      	ldr	r1, [r3, #28]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	61da      	str	r2, [r3, #28]
      break;
 80044a4:	e004      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80044a6:	2317      	movs	r3, #23
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2238      	movs	r2, #56	; 0x38
 80044b4:	2100      	movs	r1, #0
 80044b6:	5499      	strb	r1, [r3, r2]

  return status;
 80044b8:	2317      	movs	r3, #23
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	781b      	ldrb	r3, [r3, #0]
}
 80044be:	0018      	movs	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b006      	add	sp, #24
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	fffffbff 	.word	0xfffffbff

080044cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	230f      	movs	r3, #15
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2238      	movs	r2, #56	; 0x38
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_ConfigClockSource+0x20>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e0bc      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x19a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2238      	movs	r2, #56	; 0x38
 80044f0:	2101      	movs	r1, #1
 80044f2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2239      	movs	r2, #57	; 0x39
 80044f8:	2102      	movs	r1, #2
 80044fa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2277      	movs	r2, #119	; 0x77
 8004508:	4393      	bics	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a58      	ldr	r2, [pc, #352]	; (8004670 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2280      	movs	r2, #128	; 0x80
 8004522:	0192      	lsls	r2, r2, #6
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xde>
 8004528:	2280      	movs	r2, #128	; 0x80
 800452a:	0192      	lsls	r2, r2, #6
 800452c:	4293      	cmp	r3, r2
 800452e:	d900      	bls.n	8004532 <HAL_TIM_ConfigClockSource+0x66>
 8004530:	e088      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	0152      	lsls	r2, r2, #5
 8004536:	4293      	cmp	r3, r2
 8004538:	d100      	bne.n	800453c <HAL_TIM_ConfigClockSource+0x70>
 800453a:	e088      	b.n	800464e <HAL_TIM_ConfigClockSource+0x182>
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	0152      	lsls	r2, r2, #5
 8004540:	4293      	cmp	r3, r2
 8004542:	d900      	bls.n	8004546 <HAL_TIM_ConfigClockSource+0x7a>
 8004544:	e07e      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004546:	2b70      	cmp	r3, #112	; 0x70
 8004548:	d018      	beq.n	800457c <HAL_TIM_ConfigClockSource+0xb0>
 800454a:	d900      	bls.n	800454e <HAL_TIM_ConfigClockSource+0x82>
 800454c:	e07a      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800454e:	2b60      	cmp	r3, #96	; 0x60
 8004550:	d04f      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x126>
 8004552:	d900      	bls.n	8004556 <HAL_TIM_ConfigClockSource+0x8a>
 8004554:	e076      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004556:	2b50      	cmp	r3, #80	; 0x50
 8004558:	d03b      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x106>
 800455a:	d900      	bls.n	800455e <HAL_TIM_ConfigClockSource+0x92>
 800455c:	e072      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d057      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x146>
 8004562:	d900      	bls.n	8004566 <HAL_TIM_ConfigClockSource+0x9a>
 8004564:	e06e      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d063      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 800456a:	d86b      	bhi.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 800456c:	2b20      	cmp	r3, #32
 800456e:	d060      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 8004570:	d868      	bhi.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d05d      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 8004576:	2b10      	cmp	r3, #16
 8004578:	d05b      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x166>
 800457a:	e063      	b.n	8004644 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	f000 fa4e 	bl	8004a2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2277      	movs	r2, #119	; 0x77
 800459c:	4313      	orrs	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
      break;
 80045a8:	e052      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	f000 fa37 	bl	8004a2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	01c9      	lsls	r1, r1, #7
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
      break;
 80045d0:	e03e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	001a      	movs	r2, r3
 80045e0:	f000 f9aa 	bl	8004938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2150      	movs	r1, #80	; 0x50
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fa04 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 80045f0:	e02e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fe:	001a      	movs	r2, r3
 8004600:	f000 f9c8 	bl	8004994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2160      	movs	r1, #96	; 0x60
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f9f4 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004610:	e01e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	001a      	movs	r2, r3
 8004620:	f000 f98a 	bl	8004938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2140      	movs	r1, #64	; 0x40
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f9e4 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004630:	e00e      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0019      	movs	r1, r3
 800463c:	0010      	movs	r0, r2
 800463e:	f000 f9db 	bl	80049f8 <TIM_ITRx_SetConfig>
      break;
 8004642:	e005      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004644:	230f      	movs	r3, #15
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
      break;
 800464c:	e000      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800464e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2239      	movs	r2, #57	; 0x39
 8004654:	2101      	movs	r1, #1
 8004656:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2238      	movs	r2, #56	; 0x38
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

  return status;
 8004660:	230f      	movs	r3, #15
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	ffff00ff 	.word	0xffff00ff

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	429a      	cmp	r2, r3
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x32>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <TIM_Base_SetConfig+0xac>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x32>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <TIM_Base_SetConfig+0xb0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x32>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <TIM_Base_SetConfig+0xb4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2270      	movs	r2, #112	; 0x70
 80046aa:	4393      	bics	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	05db      	lsls	r3, r3, #23
 80046be:	429a      	cmp	r2, r3
 80046c0:	d00b      	beq.n	80046da <TIM_Base_SetConfig+0x66>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <TIM_Base_SetConfig+0xac>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <TIM_Base_SetConfig+0x66>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <TIM_Base_SetConfig+0xb0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_Base_SetConfig+0x66>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_Base_SetConfig+0xb4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d108      	bne.n	80046ec <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <TIM_Base_SetConfig+0xb8>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	4393      	bics	r3, r2
 80046f2:	001a      	movs	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	615a      	str	r2, [r3, #20]
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	b004      	add	sp, #16
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40000400 	.word	0x40000400
 8004724:	40010800 	.word	0x40010800
 8004728:	40011400 	.word	0x40011400
 800472c:	fffffcff 	.word	0xfffffcff

08004730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	2201      	movs	r2, #1
 8004740:	4393      	bics	r3, r2
 8004742:	001a      	movs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2270      	movs	r2, #112	; 0x70
 800475e:	4393      	bics	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2203      	movs	r2, #3
 8004766:	4393      	bics	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2202      	movs	r2, #2
 8004778:	4393      	bics	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b006      	add	sp, #24
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	2210      	movs	r2, #16
 80047b8:	4393      	bics	r3, r2
 80047ba:	001a      	movs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a13      	ldr	r2, [pc, #76]	; (8004824 <TIM_OC2_SetConfig+0x7c>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a12      	ldr	r2, [pc, #72]	; (8004828 <TIM_OC2_SetConfig+0x80>)
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2220      	movs	r2, #32
 80047f2:	4393      	bics	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	621a      	str	r2, [r3, #32]
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b006      	add	sp, #24
 8004822:	bd80      	pop	{r7, pc}
 8004824:	ffff8fff 	.word	0xffff8fff
 8004828:	fffffcff 	.word	0xfffffcff

0800482c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a1a      	ldr	r2, [pc, #104]	; (80048a4 <TIM_OC3_SetConfig+0x78>)
 800483c:	401a      	ands	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2270      	movs	r2, #112	; 0x70
 8004858:	4393      	bics	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2203      	movs	r2, #3
 8004860:	4393      	bics	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <TIM_OC3_SetConfig+0x7c>)
 8004872:	4013      	ands	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	621a      	str	r2, [r3, #32]
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	b006      	add	sp, #24
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	fffffeff 	.word	0xfffffeff
 80048a8:	fffffdff 	.word	0xfffffdff

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <TIM_OC4_SetConfig+0x7c>)
 80048bc:	401a      	ands	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a15      	ldr	r2, [pc, #84]	; (800492c <TIM_OC4_SetConfig+0x80>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a14      	ldr	r2, [pc, #80]	; (8004930 <TIM_OC4_SetConfig+0x84>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <TIM_OC4_SetConfig+0x88>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b006      	add	sp, #24
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	ffffefff 	.word	0xffffefff
 800492c:	ffff8fff 	.word	0xffff8fff
 8004930:	fffffcff 	.word	0xfffffcff
 8004934:	ffffdfff 	.word	0xffffdfff

08004938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	2201      	movs	r2, #1
 8004950:	4393      	bics	r3, r2
 8004952:	001a      	movs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	22f0      	movs	r2, #240	; 0xf0
 8004962:	4393      	bics	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	220a      	movs	r2, #10
 8004974:	4393      	bics	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	621a      	str	r2, [r3, #32]
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b006      	add	sp, #24
 8004992:	bd80      	pop	{r7, pc}

08004994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	2210      	movs	r2, #16
 80049a6:	4393      	bics	r3, r2
 80049a8:	001a      	movs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <TIM_TI2_ConfigInputStage+0x60>)
 80049be:	4013      	ands	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	22a0      	movs	r2, #160	; 0xa0
 80049d0:	4393      	bics	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b006      	add	sp, #24
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	ffff0fff 	.word	0xffff0fff

080049f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2270      	movs	r2, #112	; 0x70
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	2207      	movs	r2, #7
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <TIM_ETR_SetConfig+0x3c>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b006      	add	sp, #24
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	ffff00ff 	.word	0xffff00ff

08004a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	221f      	movs	r2, #31
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2201      	movs	r2, #1
 8004a80:	409a      	lsls	r2, r3
 8004a82:	0013      	movs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	43d2      	mvns	r2, r2
 8004a8e:	401a      	ands	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	211f      	movs	r1, #31
 8004a9c:	400b      	ands	r3, r1
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4099      	lsls	r1, r3
 8004aa2:	000b      	movs	r3, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b006      	add	sp, #24
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2238      	movs	r2, #56	; 0x38
 8004ac2:	5c9b      	ldrb	r3, [r3, r2]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e047      	b.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2238      	movs	r2, #56	; 0x38
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2239      	movs	r2, #57	; 0x39
 8004ad8:	2102      	movs	r1, #2
 8004ada:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2270      	movs	r2, #112	; 0x70
 8004af0:	4393      	bics	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	05db      	lsls	r3, r3, #23
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a10      	ldr	r2, [pc, #64]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10c      	bne.n	8004b4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	4393      	bics	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2239      	movs	r2, #57	; 0x39
 8004b4e:	2101      	movs	r1, #1
 8004b50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2238      	movs	r2, #56	; 0x38
 8004b56:	2100      	movs	r1, #0
 8004b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40010800 	.word	0x40010800
 8004b6c:	40011400 	.word	0x40011400

08004b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e044      	b.n	8004c0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2278      	movs	r2, #120	; 0x78
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fd ffcf 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2224      	movs	r2, #36	; 0x24
 8004b9e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2101      	movs	r1, #1
 8004bac:	438a      	bics	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fb2e 	bl	8005214 <UART_SetConfig>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e024      	b.n	8004c0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 fdbf 	bl	8005750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	490d      	ldr	r1, [pc, #52]	; (8004c14 <HAL_UART_Init+0xa4>)
 8004bde:	400a      	ands	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	212a      	movs	r1, #42	; 0x2a
 8004bee:	438a      	bics	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fe57 	bl	80058b8 <UART_CheckIdleState>
 8004c0a:	0003      	movs	r3, r0
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b002      	add	sp, #8
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	ffffb7ff 	.word	0xffffb7ff

08004c18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b0ab      	sub	sp, #172	; 0xac
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	22a4      	movs	r2, #164	; 0xa4
 8004c28:	18b9      	adds	r1, r7, r2
 8004c2a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	20a0      	movs	r0, #160	; 0xa0
 8004c34:	1839      	adds	r1, r7, r0
 8004c36:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	219c      	movs	r1, #156	; 0x9c
 8004c40:	1879      	adds	r1, r7, r1
 8004c42:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c44:	0011      	movs	r1, r2
 8004c46:	18bb      	adds	r3, r7, r2
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a99      	ldr	r2, [pc, #612]	; (8004eb0 <HAL_UART_IRQHandler+0x298>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2298      	movs	r2, #152	; 0x98
 8004c50:	18bc      	adds	r4, r7, r2
 8004c52:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004c54:	18bb      	adds	r3, r7, r2
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2220      	movs	r2, #32
 8004c62:	4013      	ands	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c66:	183b      	adds	r3, r7, r0
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d00a      	beq.n	8004c86 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d100      	bne.n	8004c7a <HAL_UART_IRQHandler+0x62>
 8004c78:	e2a0      	b.n	80051bc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	0010      	movs	r0, r2
 8004c82:	4798      	blx	r3
      }
      return;
 8004c84:	e29a      	b.n	80051bc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c86:	2398      	movs	r3, #152	; 0x98
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d100      	bne.n	8004c92 <HAL_UART_IRQHandler+0x7a>
 8004c90:	e114      	b.n	8004ebc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c92:	239c      	movs	r3, #156	; 0x9c
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d106      	bne.n	8004cac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c9e:	23a0      	movs	r3, #160	; 0xa0
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a83      	ldr	r2, [pc, #524]	; (8004eb4 <HAL_UART_IRQHandler+0x29c>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d100      	bne.n	8004cac <HAL_UART_IRQHandler+0x94>
 8004caa:	e107      	b.n	8004ebc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cac:	23a4      	movs	r3, #164	; 0xa4
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d012      	beq.n	8004cde <HAL_UART_IRQHandler+0xc6>
 8004cb8:	23a0      	movs	r3, #160	; 0xa0
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d00b      	beq.n	8004cde <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2284      	movs	r2, #132	; 0x84
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2184      	movs	r1, #132	; 0x84
 8004cdc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cde:	23a4      	movs	r3, #164	; 0xa4
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d011      	beq.n	8004d0e <HAL_UART_IRQHandler+0xf6>
 8004cea:	239c      	movs	r3, #156	; 0x9c
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2284      	movs	r2, #132	; 0x84
 8004d02:	589b      	ldr	r3, [r3, r2]
 8004d04:	2204      	movs	r2, #4
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2184      	movs	r1, #132	; 0x84
 8004d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d0e:	23a4      	movs	r3, #164	; 0xa4
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2204      	movs	r2, #4
 8004d16:	4013      	ands	r3, r2
 8004d18:	d011      	beq.n	8004d3e <HAL_UART_IRQHandler+0x126>
 8004d1a:	239c      	movs	r3, #156	; 0x9c
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2284      	movs	r2, #132	; 0x84
 8004d32:	589b      	ldr	r3, [r3, r2]
 8004d34:	2202      	movs	r2, #2
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2184      	movs	r1, #132	; 0x84
 8004d3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d3e:	23a4      	movs	r3, #164	; 0xa4
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2208      	movs	r2, #8
 8004d46:	4013      	ands	r3, r2
 8004d48:	d017      	beq.n	8004d7a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d4a:	23a0      	movs	r3, #160	; 0xa0
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2220      	movs	r2, #32
 8004d52:	4013      	ands	r3, r2
 8004d54:	d105      	bne.n	8004d62 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d56:	239c      	movs	r3, #156	; 0x9c
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2208      	movs	r2, #8
 8004d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2284      	movs	r2, #132	; 0x84
 8004d6e:	589b      	ldr	r3, [r3, r2]
 8004d70:	2208      	movs	r2, #8
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2184      	movs	r1, #132	; 0x84
 8004d78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d7a:	23a4      	movs	r3, #164	; 0xa4
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	4013      	ands	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_UART_IRQHandler+0x198>
 8004d88:	23a0      	movs	r3, #160	; 0xa0
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	04db      	lsls	r3, r3, #19
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00c      	beq.n	8004db0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2280      	movs	r2, #128	; 0x80
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2284      	movs	r2, #132	; 0x84
 8004da4:	589b      	ldr	r3, [r3, r2]
 8004da6:	2220      	movs	r2, #32
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2184      	movs	r1, #132	; 0x84
 8004dae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2284      	movs	r2, #132	; 0x84
 8004db4:	589b      	ldr	r3, [r3, r2]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <HAL_UART_IRQHandler+0x1a4>
 8004dba:	e201      	b.n	80051c0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dbc:	23a4      	movs	r3, #164	; 0xa4
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dc8:	23a0      	movs	r3, #160	; 0xa0
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	0010      	movs	r0, r2
 8004de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2284      	movs	r2, #132	; 0x84
 8004dea:	589b      	ldr	r3, [r3, r2]
 8004dec:	2194      	movs	r1, #148	; 0x94
 8004dee:	187a      	adds	r2, r7, r1
 8004df0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2240      	movs	r2, #64	; 0x40
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d004      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2228      	movs	r2, #40	; 0x28
 8004e06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e08:	d047      	beq.n	8004e9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f000 fe65 	bl	8005adc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2240      	movs	r2, #64	; 0x40
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d137      	bne.n	8004e90 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e28:	2090      	movs	r0, #144	; 0x90
 8004e2a:	183a      	adds	r2, r7, r0
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	2301      	movs	r3, #1
 8004e30:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e34:	f383 8810 	msr	PRIMASK, r3
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2140      	movs	r1, #64	; 0x40
 8004e46:	438a      	bics	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <HAL_UART_IRQHandler+0x2a0>)
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fe f973 	bl	8003158 <HAL_DMA_Abort_IT>
 8004e72:	1e03      	subs	r3, r0, #0
 8004e74:	d01a      	beq.n	8004eac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	0018      	movs	r0, r3
 8004e82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e012      	b.n	8004eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 f9af 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8e:	e00d      	b.n	8004eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 f9aa 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e008      	b.n	8004eac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 f9a5 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2284      	movs	r2, #132	; 0x84
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004eaa:	e189      	b.n	80051c0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	46c0      	nop			; (mov r8, r8)
    return;
 8004eae:	e187      	b.n	80051c0 <HAL_UART_IRQHandler+0x5a8>
 8004eb0:	0000080f 	.word	0x0000080f
 8004eb4:	04000120 	.word	0x04000120
 8004eb8:	08005ba5 	.word	0x08005ba5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d000      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x2ae>
 8004ec4:	e13b      	b.n	800513e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ec6:	23a4      	movs	r3, #164	; 0xa4
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d100      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x2bc>
 8004ed2:	e134      	b.n	800513e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ed4:	23a0      	movs	r3, #160	; 0xa0
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2210      	movs	r2, #16
 8004edc:	4013      	ands	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x2ca>
 8004ee0:	e12d      	b.n	800513e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2240      	movs	r2, #64	; 0x40
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d000      	beq.n	8004efa <HAL_UART_IRQHandler+0x2e2>
 8004ef8:	e0a1      	b.n	800503e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	217e      	movs	r1, #126	; 0x7e
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f08:	187b      	adds	r3, r7, r1
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d100      	bne.n	8004f12 <HAL_UART_IRQHandler+0x2fa>
 8004f10:	e158      	b.n	80051c4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2258      	movs	r2, #88	; 0x58
 8004f16:	5a9b      	ldrh	r3, [r3, r2]
 8004f18:	187a      	adds	r2, r7, r1
 8004f1a:	8812      	ldrh	r2, [r2, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d300      	bcc.n	8004f22 <HAL_UART_IRQHandler+0x30a>
 8004f20:	e150      	b.n	80051c4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	187a      	adds	r2, r7, r1
 8004f26:	215a      	movs	r1, #90	; 0x5a
 8004f28:	8812      	ldrh	r2, [r2, #0]
 8004f2a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2220      	movs	r2, #32
 8004f36:	4013      	ands	r3, r2
 8004f38:	d16f      	bne.n	800501a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f44:	2301      	movs	r3, #1
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	f383 8810 	msr	PRIMASK, r3
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	499e      	ldr	r1, [pc, #632]	; (80051d4 <HAL_UART_IRQHandler+0x5bc>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
 8004f76:	2301      	movs	r3, #1
 8004f78:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	438a      	bics	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
 8004f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa8:	2301      	movs	r3, #1
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fc6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe8:	2301      	movs	r3, #1
 8004fea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2110      	movs	r1, #16
 8005000:	438a      	bics	r2, r1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005014:	0018      	movs	r0, r3
 8005016:	f7fe f85f 	bl	80030d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2258      	movs	r2, #88	; 0x58
 8005024:	5a9a      	ldrh	r2, [r3, r2]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	215a      	movs	r1, #90	; 0x5a
 800502a:	5a5b      	ldrh	r3, [r3, r1]
 800502c:	b29b      	uxth	r3, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	0011      	movs	r1, r2
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f8e0 	bl	80051fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800503c:	e0c2      	b.n	80051c4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2258      	movs	r2, #88	; 0x58
 8005042:	5a99      	ldrh	r1, [r3, r2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	225a      	movs	r2, #90	; 0x5a
 8005048:	5a9b      	ldrh	r3, [r3, r2]
 800504a:	b29a      	uxth	r2, r3
 800504c:	208e      	movs	r0, #142	; 0x8e
 800504e:	183b      	adds	r3, r7, r0
 8005050:	1a8a      	subs	r2, r1, r2
 8005052:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	225a      	movs	r2, #90	; 0x5a
 8005058:	5a9b      	ldrh	r3, [r3, r2]
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <HAL_UART_IRQHandler+0x44a>
 8005060:	e0b2      	b.n	80051c8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005062:	183b      	adds	r3, r7, r0
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d100      	bne.n	800506c <HAL_UART_IRQHandler+0x454>
 800506a:	e0ad      	b.n	80051c8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506c:	f3ef 8310 	mrs	r3, PRIMASK
 8005070:	60fb      	str	r3, [r7, #12]
  return(result);
 8005072:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005074:	2488      	movs	r4, #136	; 0x88
 8005076:	193a      	adds	r2, r7, r4
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	2301      	movs	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4951      	ldr	r1, [pc, #324]	; (80051d8 <HAL_UART_IRQHandler+0x5c0>)
 8005092:	400a      	ands	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	193b      	adds	r3, r7, r4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80050aa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	2484      	movs	r4, #132	; 0x84
 80050ae:	193a      	adds	r2, r7, r4
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2101      	movs	r1, #1
 80050ca:	438a      	bics	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
 80050ce:	193b      	adds	r3, r7, r4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	2120      	movs	r1, #32
 80050e2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f0:	f3ef 8310 	mrs	r3, PRIMASK
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	2480      	movs	r4, #128	; 0x80
 80050fa:	193a      	adds	r2, r7, r4
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	2301      	movs	r3, #1
 8005100:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2110      	movs	r1, #16
 8005116:	438a      	bics	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	193b      	adds	r3, r7, r4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	f383 8810 	msr	PRIMASK, r3
}
 8005126:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800512e:	183b      	adds	r3, r7, r0
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0011      	movs	r1, r2
 8005136:	0018      	movs	r0, r3
 8005138:	f000 f860 	bl	80051fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800513c:	e044      	b.n	80051c8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800513e:	23a4      	movs	r3, #164	; 0xa4
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2380      	movs	r3, #128	; 0x80
 8005146:	035b      	lsls	r3, r3, #13
 8005148:	4013      	ands	r3, r2
 800514a:	d010      	beq.n	800516e <HAL_UART_IRQHandler+0x556>
 800514c:	239c      	movs	r3, #156	; 0x9c
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	03db      	lsls	r3, r3, #15
 8005156:	4013      	ands	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	0352      	lsls	r2, r2, #13
 8005162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	0018      	movs	r0, r3
 8005168:	f000 fd5e 	bl	8005c28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800516c:	e02f      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800516e:	23a4      	movs	r3, #164	; 0xa4
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	4013      	ands	r3, r2
 8005178:	d00f      	beq.n	800519a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800517a:	23a0      	movs	r3, #160	; 0xa0
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2280      	movs	r2, #128	; 0x80
 8005182:	4013      	ands	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01e      	beq.n	80051cc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	0010      	movs	r0, r2
 8005196:	4798      	blx	r3
    }
    return;
 8005198:	e018      	b.n	80051cc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519a:	23a4      	movs	r3, #164	; 0xa4
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2240      	movs	r2, #64	; 0x40
 80051a2:	4013      	ands	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_UART_IRQHandler+0x5b6>
 80051a6:	23a0      	movs	r3, #160	; 0xa0
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	4013      	ands	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 fd0c 	bl	8005bd2 <UART_EndTransmit_IT>
    return;
 80051ba:	e008      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	e006      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
    return;
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	e004      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80051c4:	46c0      	nop			; (mov r8, r8)
 80051c6:	e002      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
      return;
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	e000      	b.n	80051ce <HAL_UART_IRQHandler+0x5b6>
    return;
 80051cc:	46c0      	nop			; (mov r8, r8)
  }

}
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b02b      	add	sp, #172	; 0xac
 80051d2:	bd90      	pop	{r4, r7, pc}
 80051d4:	fffffeff 	.word	0xfffffeff
 80051d8:	fffffedf 	.word	0xfffffedf

080051dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	000a      	movs	r2, r1
 8005206:	1cbb      	adds	r3, r7, #2
 8005208:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005214:	b5b0      	push	{r4, r5, r7, lr}
 8005216:	b08e      	sub	sp, #56	; 0x38
 8005218:	af00      	add	r7, sp, #0
 800521a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800521c:	231a      	movs	r3, #26
 800521e:	2218      	movs	r2, #24
 8005220:	189b      	adds	r3, r3, r2
 8005222:	19db      	adds	r3, r3, r7
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4313      	orrs	r3, r2
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4ac3      	ldr	r2, [pc, #780]	; (8005554 <UART_SetConfig+0x340>)
 8005248:	4013      	ands	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4abe      	ldr	r2, [pc, #760]	; (8005558 <UART_SetConfig+0x344>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4ab8      	ldr	r2, [pc, #736]	; (800555c <UART_SetConfig+0x348>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005284:	4313      	orrs	r3, r2
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	4ab4      	ldr	r2, [pc, #720]	; (8005560 <UART_SetConfig+0x34c>)
 8005290:	4013      	ands	r3, r2
 8005292:	0019      	movs	r1, r3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4ab0      	ldr	r2, [pc, #704]	; (8005564 <UART_SetConfig+0x350>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d131      	bne.n	800530c <UART_SetConfig+0xf8>
 80052a8:	4baf      	ldr	r3, [pc, #700]	; (8005568 <UART_SetConfig+0x354>)
 80052aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ac:	2203      	movs	r2, #3
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d01d      	beq.n	80052f0 <UART_SetConfig+0xdc>
 80052b4:	d823      	bhi.n	80052fe <UART_SetConfig+0xea>
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d00c      	beq.n	80052d4 <UART_SetConfig+0xc0>
 80052ba:	d820      	bhi.n	80052fe <UART_SetConfig+0xea>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <UART_SetConfig+0xb2>
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d00e      	beq.n	80052e2 <UART_SetConfig+0xce>
 80052c4:	e01b      	b.n	80052fe <UART_SetConfig+0xea>
 80052c6:	231b      	movs	r3, #27
 80052c8:	2218      	movs	r2, #24
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	19db      	adds	r3, r3, r7
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e0b4      	b.n	800543e <UART_SetConfig+0x22a>
 80052d4:	231b      	movs	r3, #27
 80052d6:	2218      	movs	r2, #24
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	19db      	adds	r3, r3, r7
 80052dc:	2202      	movs	r2, #2
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e0ad      	b.n	800543e <UART_SetConfig+0x22a>
 80052e2:	231b      	movs	r3, #27
 80052e4:	2218      	movs	r2, #24
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	19db      	adds	r3, r3, r7
 80052ea:	2204      	movs	r2, #4
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e0a6      	b.n	800543e <UART_SetConfig+0x22a>
 80052f0:	231b      	movs	r3, #27
 80052f2:	2218      	movs	r2, #24
 80052f4:	189b      	adds	r3, r3, r2
 80052f6:	19db      	adds	r3, r3, r7
 80052f8:	2208      	movs	r2, #8
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e09f      	b.n	800543e <UART_SetConfig+0x22a>
 80052fe:	231b      	movs	r3, #27
 8005300:	2218      	movs	r2, #24
 8005302:	189b      	adds	r3, r3, r2
 8005304:	19db      	adds	r3, r3, r7
 8005306:	2210      	movs	r2, #16
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e098      	b.n	800543e <UART_SetConfig+0x22a>
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a96      	ldr	r2, [pc, #600]	; (800556c <UART_SetConfig+0x358>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d131      	bne.n	800537a <UART_SetConfig+0x166>
 8005316:	4b94      	ldr	r3, [pc, #592]	; (8005568 <UART_SetConfig+0x354>)
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	220c      	movs	r2, #12
 800531c:	4013      	ands	r3, r2
 800531e:	2b0c      	cmp	r3, #12
 8005320:	d01d      	beq.n	800535e <UART_SetConfig+0x14a>
 8005322:	d823      	bhi.n	800536c <UART_SetConfig+0x158>
 8005324:	2b08      	cmp	r3, #8
 8005326:	d00c      	beq.n	8005342 <UART_SetConfig+0x12e>
 8005328:	d820      	bhi.n	800536c <UART_SetConfig+0x158>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <UART_SetConfig+0x120>
 800532e:	2b04      	cmp	r3, #4
 8005330:	d00e      	beq.n	8005350 <UART_SetConfig+0x13c>
 8005332:	e01b      	b.n	800536c <UART_SetConfig+0x158>
 8005334:	231b      	movs	r3, #27
 8005336:	2218      	movs	r2, #24
 8005338:	189b      	adds	r3, r3, r2
 800533a:	19db      	adds	r3, r3, r7
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e07d      	b.n	800543e <UART_SetConfig+0x22a>
 8005342:	231b      	movs	r3, #27
 8005344:	2218      	movs	r2, #24
 8005346:	189b      	adds	r3, r3, r2
 8005348:	19db      	adds	r3, r3, r7
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e076      	b.n	800543e <UART_SetConfig+0x22a>
 8005350:	231b      	movs	r3, #27
 8005352:	2218      	movs	r2, #24
 8005354:	189b      	adds	r3, r3, r2
 8005356:	19db      	adds	r3, r3, r7
 8005358:	2204      	movs	r2, #4
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e06f      	b.n	800543e <UART_SetConfig+0x22a>
 800535e:	231b      	movs	r3, #27
 8005360:	2218      	movs	r2, #24
 8005362:	189b      	adds	r3, r3, r2
 8005364:	19db      	adds	r3, r3, r7
 8005366:	2208      	movs	r2, #8
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e068      	b.n	800543e <UART_SetConfig+0x22a>
 800536c:	231b      	movs	r3, #27
 800536e:	2218      	movs	r2, #24
 8005370:	189b      	adds	r3, r3, r2
 8005372:	19db      	adds	r3, r3, r7
 8005374:	2210      	movs	r2, #16
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e061      	b.n	800543e <UART_SetConfig+0x22a>
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a7c      	ldr	r2, [pc, #496]	; (8005570 <UART_SetConfig+0x35c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d106      	bne.n	8005392 <UART_SetConfig+0x17e>
 8005384:	231b      	movs	r3, #27
 8005386:	2218      	movs	r2, #24
 8005388:	189b      	adds	r3, r3, r2
 800538a:	19db      	adds	r3, r3, r7
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e055      	b.n	800543e <UART_SetConfig+0x22a>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a77      	ldr	r2, [pc, #476]	; (8005574 <UART_SetConfig+0x360>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d106      	bne.n	80053aa <UART_SetConfig+0x196>
 800539c:	231b      	movs	r3, #27
 800539e:	2218      	movs	r2, #24
 80053a0:	189b      	adds	r3, r3, r2
 80053a2:	19db      	adds	r3, r3, r7
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e049      	b.n	800543e <UART_SetConfig+0x22a>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6b      	ldr	r2, [pc, #428]	; (800555c <UART_SetConfig+0x348>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d13e      	bne.n	8005432 <UART_SetConfig+0x21e>
 80053b4:	4b6c      	ldr	r3, [pc, #432]	; (8005568 <UART_SetConfig+0x354>)
 80053b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b8:	23c0      	movs	r3, #192	; 0xc0
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4013      	ands	r3, r2
 80053be:	22c0      	movs	r2, #192	; 0xc0
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d027      	beq.n	8005416 <UART_SetConfig+0x202>
 80053c6:	22c0      	movs	r2, #192	; 0xc0
 80053c8:	0112      	lsls	r2, r2, #4
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d82a      	bhi.n	8005424 <UART_SetConfig+0x210>
 80053ce:	2280      	movs	r2, #128	; 0x80
 80053d0:	0112      	lsls	r2, r2, #4
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d011      	beq.n	80053fa <UART_SetConfig+0x1e6>
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	4293      	cmp	r3, r2
 80053dc:	d822      	bhi.n	8005424 <UART_SetConfig+0x210>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <UART_SetConfig+0x1d8>
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	00d2      	lsls	r2, r2, #3
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <UART_SetConfig+0x1f4>
 80053ea:	e01b      	b.n	8005424 <UART_SetConfig+0x210>
 80053ec:	231b      	movs	r3, #27
 80053ee:	2218      	movs	r2, #24
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	19db      	adds	r3, r3, r7
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e021      	b.n	800543e <UART_SetConfig+0x22a>
 80053fa:	231b      	movs	r3, #27
 80053fc:	2218      	movs	r2, #24
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	19db      	adds	r3, r3, r7
 8005402:	2202      	movs	r2, #2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e01a      	b.n	800543e <UART_SetConfig+0x22a>
 8005408:	231b      	movs	r3, #27
 800540a:	2218      	movs	r2, #24
 800540c:	189b      	adds	r3, r3, r2
 800540e:	19db      	adds	r3, r3, r7
 8005410:	2204      	movs	r2, #4
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e013      	b.n	800543e <UART_SetConfig+0x22a>
 8005416:	231b      	movs	r3, #27
 8005418:	2218      	movs	r2, #24
 800541a:	189b      	adds	r3, r3, r2
 800541c:	19db      	adds	r3, r3, r7
 800541e:	2208      	movs	r2, #8
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e00c      	b.n	800543e <UART_SetConfig+0x22a>
 8005424:	231b      	movs	r3, #27
 8005426:	2218      	movs	r2, #24
 8005428:	189b      	adds	r3, r3, r2
 800542a:	19db      	adds	r3, r3, r7
 800542c:	2210      	movs	r2, #16
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	e005      	b.n	800543e <UART_SetConfig+0x22a>
 8005432:	231b      	movs	r3, #27
 8005434:	2218      	movs	r2, #24
 8005436:	189b      	adds	r3, r3, r2
 8005438:	19db      	adds	r3, r3, r7
 800543a:	2210      	movs	r2, #16
 800543c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a46      	ldr	r2, [pc, #280]	; (800555c <UART_SetConfig+0x348>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d000      	beq.n	800544a <UART_SetConfig+0x236>
 8005448:	e09a      	b.n	8005580 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800544a:	231b      	movs	r3, #27
 800544c:	2218      	movs	r2, #24
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d01d      	beq.n	8005494 <UART_SetConfig+0x280>
 8005458:	dc20      	bgt.n	800549c <UART_SetConfig+0x288>
 800545a:	2b04      	cmp	r3, #4
 800545c:	d015      	beq.n	800548a <UART_SetConfig+0x276>
 800545e:	dc1d      	bgt.n	800549c <UART_SetConfig+0x288>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <UART_SetConfig+0x256>
 8005464:	2b02      	cmp	r3, #2
 8005466:	d005      	beq.n	8005474 <UART_SetConfig+0x260>
 8005468:	e018      	b.n	800549c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546a:	f7fe fe23 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 800546e:	0003      	movs	r3, r0
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005472:	e01c      	b.n	80054ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005474:	4b3c      	ldr	r3, [pc, #240]	; (8005568 <UART_SetConfig+0x354>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2210      	movs	r2, #16
 800547a:	4013      	ands	r3, r2
 800547c:	d002      	beq.n	8005484 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800547e:	4b3e      	ldr	r3, [pc, #248]	; (8005578 <UART_SetConfig+0x364>)
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005482:	e014      	b.n	80054ae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005484:	4b3d      	ldr	r3, [pc, #244]	; (800557c <UART_SetConfig+0x368>)
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005488:	e011      	b.n	80054ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fe fd65 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 800548e:	0003      	movs	r3, r0
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005492:	e00c      	b.n	80054ae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800549a:	e008      	b.n	80054ae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054a0:	231a      	movs	r3, #26
 80054a2:	2218      	movs	r2, #24
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	19db      	adds	r3, r3, r7
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
        break;
 80054ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d100      	bne.n	80054b6 <UART_SetConfig+0x2a2>
 80054b4:	e133      	b.n	800571e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	0013      	movs	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d305      	bcc.n	80054d2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d906      	bls.n	80054e0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80054d2:	231a      	movs	r3, #26
 80054d4:	2218      	movs	r2, #24
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	19db      	adds	r3, r3, r7
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e11e      	b.n	800571e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	6939      	ldr	r1, [r7, #16]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	000b      	movs	r3, r1
 80054ee:	0e1b      	lsrs	r3, r3, #24
 80054f0:	0010      	movs	r0, r2
 80054f2:	0205      	lsls	r5, r0, #8
 80054f4:	431d      	orrs	r5, r3
 80054f6:	000b      	movs	r3, r1
 80054f8:	021c      	lsls	r4, r3, #8
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68b8      	ldr	r0, [r7, #8]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	1900      	adds	r0, r0, r4
 800550c:	4169      	adcs	r1, r5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f7fa ffc4 	bl	80004a8 <__aeabi_uldivmod>
 8005520:	0002      	movs	r2, r0
 8005522:	000b      	movs	r3, r1
 8005524:	0013      	movs	r3, r2
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552a:	23c0      	movs	r3, #192	; 0xc0
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	429a      	cmp	r2, r3
 8005530:	d309      	bcc.n	8005546 <UART_SetConfig+0x332>
 8005532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	035b      	lsls	r3, r3, #13
 8005538:	429a      	cmp	r2, r3
 800553a:	d204      	bcs.n	8005546 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e0eb      	b.n	800571e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005546:	231a      	movs	r3, #26
 8005548:	2218      	movs	r2, #24
 800554a:	189b      	adds	r3, r3, r2
 800554c:	19db      	adds	r3, r3, r7
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	e0e4      	b.n	800571e <UART_SetConfig+0x50a>
 8005554:	efff69f3 	.word	0xefff69f3
 8005558:	ffffcfff 	.word	0xffffcfff
 800555c:	40004800 	.word	0x40004800
 8005560:	fffff4ff 	.word	0xfffff4ff
 8005564:	40013800 	.word	0x40013800
 8005568:	40021000 	.word	0x40021000
 800556c:	40004400 	.word	0x40004400
 8005570:	40004c00 	.word	0x40004c00
 8005574:	40005000 	.word	0x40005000
 8005578:	003d0900 	.word	0x003d0900
 800557c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	429a      	cmp	r2, r3
 800558a:	d000      	beq.n	800558e <UART_SetConfig+0x37a>
 800558c:	e070      	b.n	8005670 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800558e:	231b      	movs	r3, #27
 8005590:	2218      	movs	r2, #24
 8005592:	189b      	adds	r3, r3, r2
 8005594:	19db      	adds	r3, r3, r7
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d822      	bhi.n	80055e2 <UART_SetConfig+0x3ce>
 800559c:	009a      	lsls	r2, r3, #2
 800559e:	4b67      	ldr	r3, [pc, #412]	; (800573c <UART_SetConfig+0x528>)
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a6:	f7fe fd85 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 80055aa:	0003      	movs	r3, r0
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ae:	e021      	b.n	80055f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7fe fd96 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 80055b4:	0003      	movs	r3, r0
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055b8:	e01c      	b.n	80055f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ba:	4b61      	ldr	r3, [pc, #388]	; (8005740 <UART_SetConfig+0x52c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	4013      	ands	r3, r2
 80055c2:	d002      	beq.n	80055ca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055c4:	4b5f      	ldr	r3, [pc, #380]	; (8005744 <UART_SetConfig+0x530>)
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055c8:	e014      	b.n	80055f4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80055ca:	4b5f      	ldr	r3, [pc, #380]	; (8005748 <UART_SetConfig+0x534>)
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055ce:	e011      	b.n	80055f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d0:	f7fe fcc2 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 80055d4:	0003      	movs	r3, r0
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055d8:	e00c      	b.n	80055f4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055da:	2380      	movs	r3, #128	; 0x80
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e0:	e008      	b.n	80055f4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80055e6:	231a      	movs	r3, #26
 80055e8:	2218      	movs	r2, #24
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	19db      	adds	r3, r3, r7
 80055ee:	2201      	movs	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
        break;
 80055f2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d100      	bne.n	80055fc <UART_SetConfig+0x3e8>
 80055fa:	e090      	b.n	800571e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	005a      	lsls	r2, r3, #1
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	18d2      	adds	r2, r2, r3
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0019      	movs	r1, r3
 800560e:	0010      	movs	r0, r2
 8005610:	f7fa fd96 	bl	8000140 <__udivsi3>
 8005614:	0003      	movs	r3, r0
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	2b0f      	cmp	r3, #15
 800561c:	d921      	bls.n	8005662 <UART_SetConfig+0x44e>
 800561e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	025b      	lsls	r3, r3, #9
 8005624:	429a      	cmp	r2, r3
 8005626:	d21c      	bcs.n	8005662 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	b29a      	uxth	r2, r3
 800562c:	200e      	movs	r0, #14
 800562e:	2418      	movs	r4, #24
 8005630:	1903      	adds	r3, r0, r4
 8005632:	19db      	adds	r3, r3, r7
 8005634:	210f      	movs	r1, #15
 8005636:	438a      	bics	r2, r1
 8005638:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	2207      	movs	r2, #7
 8005642:	4013      	ands	r3, r2
 8005644:	b299      	uxth	r1, r3
 8005646:	1903      	adds	r3, r0, r4
 8005648:	19db      	adds	r3, r3, r7
 800564a:	1902      	adds	r2, r0, r4
 800564c:	19d2      	adds	r2, r2, r7
 800564e:	8812      	ldrh	r2, [r2, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1902      	adds	r2, r0, r4
 800565a:	19d2      	adds	r2, r2, r7
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e05d      	b.n	800571e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005662:	231a      	movs	r3, #26
 8005664:	2218      	movs	r2, #24
 8005666:	189b      	adds	r3, r3, r2
 8005668:	19db      	adds	r3, r3, r7
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e056      	b.n	800571e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005670:	231b      	movs	r3, #27
 8005672:	2218      	movs	r2, #24
 8005674:	189b      	adds	r3, r3, r2
 8005676:	19db      	adds	r3, r3, r7
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b08      	cmp	r3, #8
 800567c:	d822      	bhi.n	80056c4 <UART_SetConfig+0x4b0>
 800567e:	009a      	lsls	r2, r3, #2
 8005680:	4b32      	ldr	r3, [pc, #200]	; (800574c <UART_SetConfig+0x538>)
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005688:	f7fe fd14 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 800568c:	0003      	movs	r3, r0
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005690:	e021      	b.n	80056d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005692:	f7fe fd25 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8005696:	0003      	movs	r3, r0
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800569a:	e01c      	b.n	80056d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800569c:	4b28      	ldr	r3, [pc, #160]	; (8005740 <UART_SetConfig+0x52c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2210      	movs	r2, #16
 80056a2:	4013      	ands	r3, r2
 80056a4:	d002      	beq.n	80056ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056a6:	4b27      	ldr	r3, [pc, #156]	; (8005744 <UART_SetConfig+0x530>)
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056aa:	e014      	b.n	80056d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80056ac:	4b26      	ldr	r3, [pc, #152]	; (8005748 <UART_SetConfig+0x534>)
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056b0:	e011      	b.n	80056d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b2:	f7fe fc51 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 80056b6:	0003      	movs	r3, r0
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ba:	e00c      	b.n	80056d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056c2:	e008      	b.n	80056d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056c8:	231a      	movs	r3, #26
 80056ca:	2218      	movs	r2, #24
 80056cc:	189b      	adds	r3, r3, r2
 80056ce:	19db      	adds	r3, r3, r7
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
        break;
 80056d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085a      	lsrs	r2, r3, #1
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	18d2      	adds	r2, r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	0019      	movs	r1, r3
 80056ec:	0010      	movs	r0, r2
 80056ee:	f7fa fd27 	bl	8000140 <__udivsi3>
 80056f2:	0003      	movs	r3, r0
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	2b0f      	cmp	r3, #15
 80056fa:	d90a      	bls.n	8005712 <UART_SetConfig+0x4fe>
 80056fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	025b      	lsls	r3, r3, #9
 8005702:	429a      	cmp	r2, r3
 8005704:	d205      	bcs.n	8005712 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	b29a      	uxth	r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e005      	b.n	800571e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005712:	231a      	movs	r3, #26
 8005714:	2218      	movs	r2, #24
 8005716:	189b      	adds	r3, r3, r2
 8005718:	19db      	adds	r3, r3, r7
 800571a:	2201      	movs	r2, #1
 800571c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2200      	movs	r2, #0
 8005722:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2200      	movs	r2, #0
 8005728:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800572a:	231a      	movs	r3, #26
 800572c:	2218      	movs	r2, #24
 800572e:	189b      	adds	r3, r3, r2
 8005730:	19db      	adds	r3, r3, r7
 8005732:	781b      	ldrb	r3, [r3, #0]
}
 8005734:	0018      	movs	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	b00e      	add	sp, #56	; 0x38
 800573a:	bdb0      	pop	{r4, r5, r7, pc}
 800573c:	0800a5dc 	.word	0x0800a5dc
 8005740:	40021000 	.word	0x40021000
 8005744:	003d0900 	.word	0x003d0900
 8005748:	00f42400 	.word	0x00f42400
 800574c:	0800a600 	.word	0x0800a600

08005750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	2201      	movs	r2, #1
 800575e:	4013      	ands	r3, r2
 8005760:	d00b      	beq.n	800577a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a4a      	ldr	r2, [pc, #296]	; (8005894 <UART_AdvFeatureConfig+0x144>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2202      	movs	r2, #2
 8005780:	4013      	ands	r3, r2
 8005782:	d00b      	beq.n	800579c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4a43      	ldr	r2, [pc, #268]	; (8005898 <UART_AdvFeatureConfig+0x148>)
 800578c:	4013      	ands	r3, r2
 800578e:	0019      	movs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2204      	movs	r2, #4
 80057a2:	4013      	ands	r3, r2
 80057a4:	d00b      	beq.n	80057be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4a3b      	ldr	r2, [pc, #236]	; (800589c <UART_AdvFeatureConfig+0x14c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2208      	movs	r2, #8
 80057c4:	4013      	ands	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4a34      	ldr	r2, [pc, #208]	; (80058a0 <UART_AdvFeatureConfig+0x150>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2210      	movs	r2, #16
 80057e6:	4013      	ands	r3, r2
 80057e8:	d00b      	beq.n	8005802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <UART_AdvFeatureConfig+0x154>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	0019      	movs	r1, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	2220      	movs	r2, #32
 8005808:	4013      	ands	r3, r2
 800580a:	d00b      	beq.n	8005824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <UART_AdvFeatureConfig+0x158>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	4013      	ands	r3, r2
 800582c:	d01d      	beq.n	800586a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <UART_AdvFeatureConfig+0x15c>)
 8005836:	4013      	ands	r3, r2
 8005838:	0019      	movs	r1, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584a:	2380      	movs	r3, #128	; 0x80
 800584c:	035b      	lsls	r3, r3, #13
 800584e:	429a      	cmp	r2, r3
 8005850:	d10b      	bne.n	800586a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <UART_AdvFeatureConfig+0x160>)
 800585a:	4013      	ands	r3, r2
 800585c:	0019      	movs	r1, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	4013      	ands	r3, r2
 8005872:	d00b      	beq.n	800588c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	4a0e      	ldr	r2, [pc, #56]	; (80058b4 <UART_AdvFeatureConfig+0x164>)
 800587c:	4013      	ands	r3, r2
 800587e:	0019      	movs	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}
 8005894:	fffdffff 	.word	0xfffdffff
 8005898:	fffeffff 	.word	0xfffeffff
 800589c:	fffbffff 	.word	0xfffbffff
 80058a0:	ffff7fff 	.word	0xffff7fff
 80058a4:	ffffefff 	.word	0xffffefff
 80058a8:	ffffdfff 	.word	0xffffdfff
 80058ac:	ffefffff 	.word	0xffefffff
 80058b0:	ff9fffff 	.word	0xff9fffff
 80058b4:	fff7ffff 	.word	0xfff7ffff

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b092      	sub	sp, #72	; 0x48
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2284      	movs	r2, #132	; 0x84
 80058c4:	2100      	movs	r1, #0
 80058c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fd fafa 	bl	8002ec0 <HAL_GetTick>
 80058cc:	0003      	movs	r3, r0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2208      	movs	r2, #8
 80058d8:	4013      	ands	r3, r2
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d12c      	bne.n	8005938 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e0:	2280      	movs	r2, #128	; 0x80
 80058e2:	0391      	lsls	r1, r2, #14
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4a46      	ldr	r2, [pc, #280]	; (8005a00 <UART_CheckIdleState+0x148>)
 80058e8:	9200      	str	r2, [sp, #0]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f000 f88c 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d021      	beq.n	8005938 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f4:	f3ef 8310 	mrs	r3, PRIMASK
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80058fe:	2301      	movs	r3, #1
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	438a      	bics	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	f383 8810 	msr	PRIMASK, r3
}
 8005924:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2278      	movs	r2, #120	; 0x78
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e05f      	b.n	80059f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2204      	movs	r2, #4
 8005940:	4013      	ands	r3, r2
 8005942:	2b04      	cmp	r3, #4
 8005944:	d146      	bne.n	80059d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	03d1      	lsls	r1, r2, #15
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4a2c      	ldr	r2, [pc, #176]	; (8005a00 <UART_CheckIdleState+0x148>)
 8005950:	9200      	str	r2, [sp, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	f000 f858 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d03b      	beq.n	80059d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	60fb      	str	r3, [r7, #12]
  return(result);
 8005962:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	2301      	movs	r3, #1
 8005968:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4921      	ldr	r1, [pc, #132]	; (8005a04 <UART_CheckIdleState+0x14c>)
 800597e:	400a      	ands	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	61bb      	str	r3, [r7, #24]
  return(result);
 8005994:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
 8005998:	2301      	movs	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f383 8810 	msr	PRIMASK, r3
}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	438a      	bics	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	2120      	movs	r1, #32
 80059c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2278      	movs	r2, #120	; 0x78
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e011      	b.n	80059f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	2120      	movs	r1, #32
 80059e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2278      	movs	r2, #120	; 0x78
 80059f2:	2100      	movs	r1, #0
 80059f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	0018      	movs	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b010      	add	sp, #64	; 0x40
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	01ffffff 	.word	0x01ffffff
 8005a04:	fffffedf 	.word	0xfffffedf

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e04b      	b.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	d048      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a20:	f7fd fa4e 	bl	8002ec0 <HAL_GetTick>
 8005a24:	0002      	movs	r2, r0
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e04b      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2204      	movs	r2, #4
 8005a42:	4013      	ands	r3, r2
 8005a44:	d035      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d111      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 f83c 	bl	8005adc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2284      	movs	r2, #132	; 0x84
 8005a68:	2108      	movs	r1, #8
 8005a6a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2278      	movs	r2, #120	; 0x78
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e02c      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	69da      	ldr	r2, [r3, #28]
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	401a      	ands	r2, r3
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d112      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	0112      	lsls	r2, r2, #4
 8005a94:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f000 f81f 	bl	8005adc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2284      	movs	r2, #132	; 0x84
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2278      	movs	r2, #120	; 0x78
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	4013      	ands	r3, r2
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	425a      	negs	r2, r3
 8005ac2:	4153      	adcs	r3, r2
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	1dfb      	adds	r3, r7, #7
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d0a4      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b004      	add	sp, #16
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	; 0x38
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8005aea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
 8005aee:	2301      	movs	r3, #1
 8005af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	46c0      	nop			; (mov r8, r8)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4926      	ldr	r1, [pc, #152]	; (8005ba0 <UART_EndRxTransfer+0xc4>)
 8005b06:	400a      	ands	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f383 8810 	msr	PRIMASK, r3
}
 8005b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b16:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1a:	623b      	str	r3, [r7, #32]
  return(result);
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b20:	2301      	movs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	438a      	bics	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	f383 8810 	msr	PRIMASK, r3
}
 8005b46:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d118      	bne.n	8005b82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f383 8810 	msr	PRIMASK, r3
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2110      	movs	r1, #16
 8005b72:	438a      	bics	r2, r1
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f383 8810 	msr	PRIMASK, r3
}
 8005b80:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	2120      	movs	r1, #32
 8005b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b00e      	add	sp, #56	; 0x38
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	fffffedf 	.word	0xfffffedf

08005ba4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	225a      	movs	r2, #90	; 0x5a
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2252      	movs	r2, #82	; 0x52
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f7ff fb11 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bda:	f3ef 8310 	mrs	r3, PRIMASK
 8005bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8005be0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2140      	movs	r1, #64	; 0x40
 8005bfc:	438a      	bics	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f383 8810 	msr	PRIMASK, r3
}
 8005c0a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7ff fade 	bl	80051dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	46bd      	mov	sp, r7
 8005c24:	b006      	add	sp, #24
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <__cvt>:
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3a:	001e      	movs	r6, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	0014      	movs	r4, r2
 8005c40:	b08b      	sub	sp, #44	; 0x2c
 8005c42:	429e      	cmp	r6, r3
 8005c44:	da04      	bge.n	8005c50 <__cvt+0x18>
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	0609      	lsls	r1, r1, #24
 8005c4a:	1873      	adds	r3, r6, r1
 8005c4c:	001e      	movs	r6, r3
 8005c4e:	232d      	movs	r3, #45	; 0x2d
 8005c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c54:	7013      	strb	r3, [r2, #0]
 8005c56:	2320      	movs	r3, #32
 8005c58:	2203      	movs	r2, #3
 8005c5a:	439f      	bics	r7, r3
 8005c5c:	2f46      	cmp	r7, #70	; 0x46
 8005c5e:	d007      	beq.n	8005c70 <__cvt+0x38>
 8005c60:	003b      	movs	r3, r7
 8005c62:	3b45      	subs	r3, #69	; 0x45
 8005c64:	4259      	negs	r1, r3
 8005c66:	414b      	adcs	r3, r1
 8005c68:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c6a:	3a01      	subs	r2, #1
 8005c6c:	18cb      	adds	r3, r1, r3
 8005c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8005c70:	ab09      	add	r3, sp, #36	; 0x24
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	ab08      	add	r3, sp, #32
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c7a:	9200      	str	r2, [sp, #0]
 8005c7c:	9302      	str	r3, [sp, #8]
 8005c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c80:	0022      	movs	r2, r4
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	0033      	movs	r3, r6
 8005c86:	f001 f8b3 	bl	8006df0 <_dtoa_r>
 8005c8a:	0005      	movs	r5, r0
 8005c8c:	2f47      	cmp	r7, #71	; 0x47
 8005c8e:	d102      	bne.n	8005c96 <__cvt+0x5e>
 8005c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c92:	07db      	lsls	r3, r3, #31
 8005c94:	d528      	bpl.n	8005ce8 <__cvt+0xb0>
 8005c96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c98:	18eb      	adds	r3, r5, r3
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	2f46      	cmp	r7, #70	; 0x46
 8005c9e:	d114      	bne.n	8005cca <__cvt+0x92>
 8005ca0:	782b      	ldrb	r3, [r5, #0]
 8005ca2:	2b30      	cmp	r3, #48	; 0x30
 8005ca4:	d10c      	bne.n	8005cc0 <__cvt+0x88>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	0020      	movs	r0, r4
 8005cac:	0031      	movs	r1, r6
 8005cae:	f7fa fbcd 	bl	800044c <__aeabi_dcmpeq>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d104      	bne.n	8005cc0 <__cvt+0x88>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cc2:	9a07      	ldr	r2, [sp, #28]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	18d3      	adds	r3, r2, r3
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2300      	movs	r3, #0
 8005cce:	0020      	movs	r0, r4
 8005cd0:	0031      	movs	r1, r6
 8005cd2:	f7fa fbbb 	bl	800044c <__aeabi_dcmpeq>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d001      	beq.n	8005cde <__cvt+0xa6>
 8005cda:	9b07      	ldr	r3, [sp, #28]
 8005cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cde:	2230      	movs	r2, #48	; 0x30
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	9907      	ldr	r1, [sp, #28]
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	d306      	bcc.n	8005cf6 <__cvt+0xbe>
 8005ce8:	0028      	movs	r0, r5
 8005cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cee:	1b5b      	subs	r3, r3, r5
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	b00b      	add	sp, #44	; 0x2c
 8005cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	9109      	str	r1, [sp, #36]	; 0x24
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e7f0      	b.n	8005ce0 <__cvt+0xa8>

08005cfe <__exponent>:
 8005cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d00:	1c83      	adds	r3, r0, #2
 8005d02:	b087      	sub	sp, #28
 8005d04:	9303      	str	r3, [sp, #12]
 8005d06:	0005      	movs	r5, r0
 8005d08:	000c      	movs	r4, r1
 8005d0a:	232b      	movs	r3, #43	; 0x2b
 8005d0c:	7002      	strb	r2, [r0, #0]
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	da01      	bge.n	8005d16 <__exponent+0x18>
 8005d12:	424c      	negs	r4, r1
 8005d14:	3302      	adds	r3, #2
 8005d16:	706b      	strb	r3, [r5, #1]
 8005d18:	2c09      	cmp	r4, #9
 8005d1a:	dd2f      	ble.n	8005d7c <__exponent+0x7e>
 8005d1c:	270a      	movs	r7, #10
 8005d1e:	ab04      	add	r3, sp, #16
 8005d20:	1dde      	adds	r6, r3, #7
 8005d22:	0020      	movs	r0, r4
 8005d24:	0039      	movs	r1, r7
 8005d26:	9601      	str	r6, [sp, #4]
 8005d28:	f7fa fb7a 	bl	8000420 <__aeabi_idivmod>
 8005d2c:	3e01      	subs	r6, #1
 8005d2e:	3130      	adds	r1, #48	; 0x30
 8005d30:	0020      	movs	r0, r4
 8005d32:	7031      	strb	r1, [r6, #0]
 8005d34:	0039      	movs	r1, r7
 8005d36:	9402      	str	r4, [sp, #8]
 8005d38:	f7fa fa8c 	bl	8000254 <__divsi3>
 8005d3c:	9b02      	ldr	r3, [sp, #8]
 8005d3e:	0004      	movs	r4, r0
 8005d40:	2b63      	cmp	r3, #99	; 0x63
 8005d42:	dcee      	bgt.n	8005d22 <__exponent+0x24>
 8005d44:	9b01      	ldr	r3, [sp, #4]
 8005d46:	3430      	adds	r4, #48	; 0x30
 8005d48:	1e9a      	subs	r2, r3, #2
 8005d4a:	0013      	movs	r3, r2
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	7014      	strb	r4, [r2, #0]
 8005d50:	a804      	add	r0, sp, #16
 8005d52:	3007      	adds	r0, #7
 8005d54:	4298      	cmp	r0, r3
 8005d56:	d80c      	bhi.n	8005d72 <__exponent+0x74>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4282      	cmp	r2, r0
 8005d5c:	d804      	bhi.n	8005d68 <__exponent+0x6a>
 8005d5e:	aa04      	add	r2, sp, #16
 8005d60:	3309      	adds	r3, #9
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	9a01      	ldr	r2, [sp, #4]
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	9a03      	ldr	r2, [sp, #12]
 8005d6a:	18d3      	adds	r3, r2, r3
 8005d6c:	1b58      	subs	r0, r3, r5
 8005d6e:	b007      	add	sp, #28
 8005d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d72:	7818      	ldrb	r0, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	7008      	strb	r0, [r1, #0]
 8005d78:	3101      	adds	r1, #1
 8005d7a:	e7e9      	b.n	8005d50 <__exponent+0x52>
 8005d7c:	2330      	movs	r3, #48	; 0x30
 8005d7e:	3430      	adds	r4, #48	; 0x30
 8005d80:	70ab      	strb	r3, [r5, #2]
 8005d82:	70ec      	strb	r4, [r5, #3]
 8005d84:	1d2b      	adds	r3, r5, #4
 8005d86:	e7f1      	b.n	8005d6c <__exponent+0x6e>

08005d88 <_printf_float>:
 8005d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8a:	b095      	sub	sp, #84	; 0x54
 8005d8c:	000c      	movs	r4, r1
 8005d8e:	9208      	str	r2, [sp, #32]
 8005d90:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005d92:	9309      	str	r3, [sp, #36]	; 0x24
 8005d94:	0007      	movs	r7, r0
 8005d96:	f000 ff0d 	bl	8006bb4 <_localeconv_r>
 8005d9a:	6803      	ldr	r3, [r0, #0]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005da0:	f7fa f9b2 	bl	8000108 <strlen>
 8005da4:	2300      	movs	r3, #0
 8005da6:	9312      	str	r3, [sp, #72]	; 0x48
 8005da8:	7e23      	ldrb	r3, [r4, #24]
 8005daa:	2207      	movs	r2, #7
 8005dac:	930a      	str	r3, [sp, #40]	; 0x28
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	900d      	str	r0, [sp, #52]	; 0x34
 8005db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005db4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	05c9      	lsls	r1, r1, #23
 8005dba:	d547      	bpl.n	8005e4c <_printf_float+0xc4>
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	4393      	bics	r3, r2
 8005dc0:	001a      	movs	r2, r3
 8005dc2:	3208      	adds	r2, #8
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	681e      	ldr	r6, [r3, #0]
 8005dc8:	685d      	ldr	r5, [r3, #4]
 8005dca:	0032      	movs	r2, r6
 8005dcc:	002b      	movs	r3, r5
 8005dce:	64a2      	str	r2, [r4, #72]	; 0x48
 8005dd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	006b      	lsls	r3, r5, #1
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8005dda:	0030      	movs	r0, r6
 8005ddc:	4bab      	ldr	r3, [pc, #684]	; (800608c <_printf_float+0x304>)
 8005dde:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005de0:	4252      	negs	r2, r2
 8005de2:	f7fc fa89 	bl	80022f8 <__aeabi_dcmpun>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d132      	bne.n	8005e50 <_printf_float+0xc8>
 8005dea:	2201      	movs	r2, #1
 8005dec:	0030      	movs	r0, r6
 8005dee:	4ba7      	ldr	r3, [pc, #668]	; (800608c <_printf_float+0x304>)
 8005df0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005df2:	4252      	negs	r2, r2
 8005df4:	f7fa fb3a 	bl	800046c <__aeabi_dcmple>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d129      	bne.n	8005e50 <_printf_float+0xc8>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	0030      	movs	r0, r6
 8005e02:	0029      	movs	r1, r5
 8005e04:	f7fa fb28 	bl	8000458 <__aeabi_dcmplt>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d003      	beq.n	8005e14 <_printf_float+0x8c>
 8005e0c:	0023      	movs	r3, r4
 8005e0e:	222d      	movs	r2, #45	; 0x2d
 8005e10:	3343      	adds	r3, #67	; 0x43
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	4d9e      	ldr	r5, [pc, #632]	; (8006090 <_printf_float+0x308>)
 8005e18:	2b47      	cmp	r3, #71	; 0x47
 8005e1a:	d900      	bls.n	8005e1e <_printf_float+0x96>
 8005e1c:	4d9d      	ldr	r5, [pc, #628]	; (8006094 <_printf_float+0x30c>)
 8005e1e:	2303      	movs	r3, #3
 8005e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	3301      	adds	r3, #1
 8005e26:	439a      	bics	r2, r3
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6022      	str	r2, [r4, #0]
 8005e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e30:	0021      	movs	r1, r4
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	0038      	movs	r0, r7
 8005e36:	9b08      	ldr	r3, [sp, #32]
 8005e38:	aa13      	add	r2, sp, #76	; 0x4c
 8005e3a:	f000 f9fb 	bl	8006234 <_printf_common>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d000      	beq.n	8005e44 <_printf_float+0xbc>
 8005e42:	e0a3      	b.n	8005f8c <_printf_float+0x204>
 8005e44:	2001      	movs	r0, #1
 8005e46:	4240      	negs	r0, r0
 8005e48:	b015      	add	sp, #84	; 0x54
 8005e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	e7b6      	b.n	8005dbe <_printf_float+0x36>
 8005e50:	0032      	movs	r2, r6
 8005e52:	002b      	movs	r3, r5
 8005e54:	0030      	movs	r0, r6
 8005e56:	0029      	movs	r1, r5
 8005e58:	f7fc fa4e 	bl	80022f8 <__aeabi_dcmpun>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d00b      	beq.n	8005e78 <_printf_float+0xf0>
 8005e60:	2d00      	cmp	r5, #0
 8005e62:	da03      	bge.n	8005e6c <_printf_float+0xe4>
 8005e64:	0023      	movs	r3, r4
 8005e66:	222d      	movs	r2, #45	; 0x2d
 8005e68:	3343      	adds	r3, #67	; 0x43
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6e:	4d8a      	ldr	r5, [pc, #552]	; (8006098 <_printf_float+0x310>)
 8005e70:	2b47      	cmp	r3, #71	; 0x47
 8005e72:	d9d4      	bls.n	8005e1e <_printf_float+0x96>
 8005e74:	4d89      	ldr	r5, [pc, #548]	; (800609c <_printf_float+0x314>)
 8005e76:	e7d2      	b.n	8005e1e <_printf_float+0x96>
 8005e78:	2220      	movs	r2, #32
 8005e7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	4391      	bics	r1, r2
 8005e80:	910e      	str	r1, [sp, #56]	; 0x38
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	d14a      	bne.n	8005f1c <_printf_float+0x194>
 8005e86:	3307      	adds	r3, #7
 8005e88:	6063      	str	r3, [r4, #4]
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	9206      	str	r2, [sp, #24]
 8005e96:	aa12      	add	r2, sp, #72	; 0x48
 8005e98:	9205      	str	r2, [sp, #20]
 8005e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	9204      	str	r2, [sp, #16]
 8005ea0:	aa11      	add	r2, sp, #68	; 0x44
 8005ea2:	9203      	str	r2, [sp, #12]
 8005ea4:	2223      	movs	r2, #35	; 0x23
 8005ea6:	a908      	add	r1, sp, #32
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	1852      	adds	r2, r2, r1
 8005eae:	9202      	str	r2, [sp, #8]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	0032      	movs	r2, r6
 8005eb4:	002b      	movs	r3, r5
 8005eb6:	0038      	movs	r0, r7
 8005eb8:	f7ff febe 	bl	8005c38 <__cvt>
 8005ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ebe:	0005      	movs	r5, r0
 8005ec0:	2b47      	cmp	r3, #71	; 0x47
 8005ec2:	d109      	bne.n	8005ed8 <_printf_float+0x150>
 8005ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ec6:	1cda      	adds	r2, r3, #3
 8005ec8:	db02      	blt.n	8005ed0 <_printf_float+0x148>
 8005eca:	6862      	ldr	r2, [r4, #4]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	dd49      	ble.n	8005f64 <_printf_float+0x1dc>
 8005ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed2:	3b02      	subs	r3, #2
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005edc:	2b65      	cmp	r3, #101	; 0x65
 8005ede:	d824      	bhi.n	8005f2a <_printf_float+0x1a2>
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	3901      	subs	r1, #1
 8005ee6:	3050      	adds	r0, #80	; 0x50
 8005ee8:	9111      	str	r1, [sp, #68]	; 0x44
 8005eea:	f7ff ff08 	bl	8005cfe <__exponent>
 8005eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ef0:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ef2:	1813      	adds	r3, r2, r0
 8005ef4:	6123      	str	r3, [r4, #16]
 8005ef6:	2a01      	cmp	r2, #1
 8005ef8:	dc02      	bgt.n	8005f00 <_printf_float+0x178>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	07d2      	lsls	r2, r2, #31
 8005efe:	d501      	bpl.n	8005f04 <_printf_float+0x17c>
 8005f00:	3301      	adds	r3, #1
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	2323      	movs	r3, #35	; 0x23
 8005f06:	aa08      	add	r2, sp, #32
 8005f08:	189b      	adds	r3, r3, r2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d100      	bne.n	8005f12 <_printf_float+0x18a>
 8005f10:	e78d      	b.n	8005e2e <_printf_float+0xa6>
 8005f12:	0023      	movs	r3, r4
 8005f14:	222d      	movs	r2, #45	; 0x2d
 8005f16:	3343      	adds	r3, #67	; 0x43
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e788      	b.n	8005e2e <_printf_float+0xa6>
 8005f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f1e:	2a47      	cmp	r2, #71	; 0x47
 8005f20:	d1b3      	bne.n	8005e8a <_printf_float+0x102>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1b1      	bne.n	8005e8a <_printf_float+0x102>
 8005f26:	3301      	adds	r3, #1
 8005f28:	e7ae      	b.n	8005e88 <_printf_float+0x100>
 8005f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2c:	2b66      	cmp	r3, #102	; 0x66
 8005f2e:	d11b      	bne.n	8005f68 <_printf_float+0x1e0>
 8005f30:	6863      	ldr	r3, [r4, #4]
 8005f32:	2900      	cmp	r1, #0
 8005f34:	dd09      	ble.n	8005f4a <_printf_float+0x1c2>
 8005f36:	6121      	str	r1, [r4, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <_printf_float+0x1ba>
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	07d2      	lsls	r2, r2, #31
 8005f40:	d50b      	bpl.n	8005f5a <_printf_float+0x1d2>
 8005f42:	3301      	adds	r3, #1
 8005f44:	185b      	adds	r3, r3, r1
 8005f46:	6123      	str	r3, [r4, #16]
 8005f48:	e007      	b.n	8005f5a <_printf_float+0x1d2>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <_printf_float+0x1ce>
 8005f4e:	2201      	movs	r2, #1
 8005f50:	6821      	ldr	r1, [r4, #0]
 8005f52:	4211      	tst	r1, r2
 8005f54:	d000      	beq.n	8005f58 <_printf_float+0x1d0>
 8005f56:	1c9a      	adds	r2, r3, #2
 8005f58:	6122      	str	r2, [r4, #16]
 8005f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f5e:	2300      	movs	r3, #0
 8005f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f62:	e7cf      	b.n	8005f04 <_printf_float+0x17c>
 8005f64:	2367      	movs	r3, #103	; 0x67
 8005f66:	930a      	str	r3, [sp, #40]	; 0x28
 8005f68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	db06      	blt.n	8005f7e <_printf_float+0x1f6>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	6121      	str	r1, [r4, #16]
 8005f74:	07db      	lsls	r3, r3, #31
 8005f76:	d5f0      	bpl.n	8005f5a <_printf_float+0x1d2>
 8005f78:	3101      	adds	r1, #1
 8005f7a:	6121      	str	r1, [r4, #16]
 8005f7c:	e7ed      	b.n	8005f5a <_printf_float+0x1d2>
 8005f7e:	2201      	movs	r2, #1
 8005f80:	2900      	cmp	r1, #0
 8005f82:	dc01      	bgt.n	8005f88 <_printf_float+0x200>
 8005f84:	1892      	adds	r2, r2, r2
 8005f86:	1a52      	subs	r2, r2, r1
 8005f88:	189b      	adds	r3, r3, r2
 8005f8a:	e7dc      	b.n	8005f46 <_printf_float+0x1be>
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	0553      	lsls	r3, r2, #21
 8005f90:	d408      	bmi.n	8005fa4 <_printf_float+0x21c>
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	002a      	movs	r2, r5
 8005f96:	0038      	movs	r0, r7
 8005f98:	9908      	ldr	r1, [sp, #32]
 8005f9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f9c:	47a8      	blx	r5
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d12a      	bne.n	8005ff8 <_printf_float+0x270>
 8005fa2:	e74f      	b.n	8005e44 <_printf_float+0xbc>
 8005fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa6:	2b65      	cmp	r3, #101	; 0x65
 8005fa8:	d800      	bhi.n	8005fac <_printf_float+0x224>
 8005faa:	e0ec      	b.n	8006186 <_printf_float+0x3fe>
 8005fac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005fae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f7fa fa4a 	bl	800044c <__aeabi_dcmpeq>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d034      	beq.n	8006026 <_printf_float+0x29e>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	0038      	movs	r0, r7
 8005fc0:	4a37      	ldr	r2, [pc, #220]	; (80060a0 <_printf_float+0x318>)
 8005fc2:	9908      	ldr	r1, [sp, #32]
 8005fc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005fc6:	47a8      	blx	r5
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d100      	bne.n	8005fce <_printf_float+0x246>
 8005fcc:	e73a      	b.n	8005e44 <_printf_float+0xbc>
 8005fce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	db02      	blt.n	8005fdc <_printf_float+0x254>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	07db      	lsls	r3, r3, #31
 8005fda:	d50d      	bpl.n	8005ff8 <_printf_float+0x270>
 8005fdc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005fde:	0038      	movs	r0, r7
 8005fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fe4:	9908      	ldr	r1, [sp, #32]
 8005fe6:	47a8      	blx	r5
 8005fe8:	2500      	movs	r5, #0
 8005fea:	3001      	adds	r0, #1
 8005fec:	d100      	bne.n	8005ff0 <_printf_float+0x268>
 8005fee:	e729      	b.n	8005e44 <_printf_float+0xbc>
 8005ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	dc0a      	bgt.n	800600e <_printf_float+0x286>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	079b      	lsls	r3, r3, #30
 8005ffc:	d500      	bpl.n	8006000 <_printf_float+0x278>
 8005ffe:	e116      	b.n	800622e <_printf_float+0x4a6>
 8006000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006002:	68e0      	ldr	r0, [r4, #12]
 8006004:	4298      	cmp	r0, r3
 8006006:	db00      	blt.n	800600a <_printf_float+0x282>
 8006008:	e71e      	b.n	8005e48 <_printf_float+0xc0>
 800600a:	0018      	movs	r0, r3
 800600c:	e71c      	b.n	8005e48 <_printf_float+0xc0>
 800600e:	0022      	movs	r2, r4
 8006010:	2301      	movs	r3, #1
 8006012:	0038      	movs	r0, r7
 8006014:	9908      	ldr	r1, [sp, #32]
 8006016:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006018:	321a      	adds	r2, #26
 800601a:	47b0      	blx	r6
 800601c:	3001      	adds	r0, #1
 800601e:	d100      	bne.n	8006022 <_printf_float+0x29a>
 8006020:	e710      	b.n	8005e44 <_printf_float+0xbc>
 8006022:	3501      	adds	r5, #1
 8006024:	e7e4      	b.n	8005ff0 <_printf_float+0x268>
 8006026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006028:	2b00      	cmp	r3, #0
 800602a:	dc3b      	bgt.n	80060a4 <_printf_float+0x31c>
 800602c:	2301      	movs	r3, #1
 800602e:	0038      	movs	r0, r7
 8006030:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <_printf_float+0x318>)
 8006032:	9908      	ldr	r1, [sp, #32]
 8006034:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006036:	47b0      	blx	r6
 8006038:	3001      	adds	r0, #1
 800603a:	d100      	bne.n	800603e <_printf_float+0x2b6>
 800603c:	e702      	b.n	8005e44 <_printf_float+0xbc>
 800603e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006040:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006042:	4313      	orrs	r3, r2
 8006044:	d102      	bne.n	800604c <_printf_float+0x2c4>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	07db      	lsls	r3, r3, #31
 800604a:	d5d5      	bpl.n	8005ff8 <_printf_float+0x270>
 800604c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800604e:	0038      	movs	r0, r7
 8006050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006052:	9908      	ldr	r1, [sp, #32]
 8006054:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006056:	47b0      	blx	r6
 8006058:	2300      	movs	r3, #0
 800605a:	3001      	adds	r0, #1
 800605c:	d100      	bne.n	8006060 <_printf_float+0x2d8>
 800605e:	e6f1      	b.n	8005e44 <_printf_float+0xbc>
 8006060:	930a      	str	r3, [sp, #40]	; 0x28
 8006062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006066:	425b      	negs	r3, r3
 8006068:	4293      	cmp	r3, r2
 800606a:	dc01      	bgt.n	8006070 <_printf_float+0x2e8>
 800606c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800606e:	e791      	b.n	8005f94 <_printf_float+0x20c>
 8006070:	0022      	movs	r2, r4
 8006072:	2301      	movs	r3, #1
 8006074:	0038      	movs	r0, r7
 8006076:	9908      	ldr	r1, [sp, #32]
 8006078:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800607a:	321a      	adds	r2, #26
 800607c:	47b0      	blx	r6
 800607e:	3001      	adds	r0, #1
 8006080:	d100      	bne.n	8006084 <_printf_float+0x2fc>
 8006082:	e6df      	b.n	8005e44 <_printf_float+0xbc>
 8006084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006086:	3301      	adds	r3, #1
 8006088:	e7ea      	b.n	8006060 <_printf_float+0x2d8>
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	7fefffff 	.word	0x7fefffff
 8006090:	0800a624 	.word	0x0800a624
 8006094:	0800a628 	.word	0x0800a628
 8006098:	0800a62c 	.word	0x0800a62c
 800609c:	0800a630 	.word	0x0800a630
 80060a0:	0800a634 	.word	0x0800a634
 80060a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060a8:	920a      	str	r2, [sp, #40]	; 0x28
 80060aa:	429a      	cmp	r2, r3
 80060ac:	dd00      	ble.n	80060b0 <_printf_float+0x328>
 80060ae:	930a      	str	r3, [sp, #40]	; 0x28
 80060b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dc3d      	bgt.n	8006132 <_printf_float+0x3aa>
 80060b6:	2300      	movs	r3, #0
 80060b8:	930e      	str	r3, [sp, #56]	; 0x38
 80060ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060bc:	43db      	mvns	r3, r3
 80060be:	17db      	asrs	r3, r3, #31
 80060c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ca:	4013      	ands	r3, r2
 80060cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060d2:	4293      	cmp	r3, r2
 80060d4:	dc36      	bgt.n	8006144 <_printf_float+0x3bc>
 80060d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060da:	429a      	cmp	r2, r3
 80060dc:	db40      	blt.n	8006160 <_printf_float+0x3d8>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	07db      	lsls	r3, r3, #31
 80060e2:	d43d      	bmi.n	8006160 <_printf_float+0x3d8>
 80060e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80060e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ea:	1af3      	subs	r3, r6, r3
 80060ec:	1ab6      	subs	r6, r6, r2
 80060ee:	429e      	cmp	r6, r3
 80060f0:	dd00      	ble.n	80060f4 <_printf_float+0x36c>
 80060f2:	001e      	movs	r6, r3
 80060f4:	2e00      	cmp	r6, #0
 80060f6:	dc3c      	bgt.n	8006172 <_printf_float+0x3ea>
 80060f8:	2300      	movs	r3, #0
 80060fa:	930a      	str	r3, [sp, #40]	; 0x28
 80060fc:	43f3      	mvns	r3, r6
 80060fe:	17db      	asrs	r3, r3, #31
 8006100:	930b      	str	r3, [sp, #44]	; 0x2c
 8006102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800610a:	4032      	ands	r2, r6
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006110:	4293      	cmp	r3, r2
 8006112:	dc00      	bgt.n	8006116 <_printf_float+0x38e>
 8006114:	e770      	b.n	8005ff8 <_printf_float+0x270>
 8006116:	0022      	movs	r2, r4
 8006118:	2301      	movs	r3, #1
 800611a:	0038      	movs	r0, r7
 800611c:	9908      	ldr	r1, [sp, #32]
 800611e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006120:	321a      	adds	r2, #26
 8006122:	47a8      	blx	r5
 8006124:	3001      	adds	r0, #1
 8006126:	d100      	bne.n	800612a <_printf_float+0x3a2>
 8006128:	e68c      	b.n	8005e44 <_printf_float+0xbc>
 800612a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612c:	3301      	adds	r3, #1
 800612e:	930a      	str	r3, [sp, #40]	; 0x28
 8006130:	e7e7      	b.n	8006102 <_printf_float+0x37a>
 8006132:	002a      	movs	r2, r5
 8006134:	0038      	movs	r0, r7
 8006136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006138:	9908      	ldr	r1, [sp, #32]
 800613a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800613c:	47b0      	blx	r6
 800613e:	3001      	adds	r0, #1
 8006140:	d1b9      	bne.n	80060b6 <_printf_float+0x32e>
 8006142:	e67f      	b.n	8005e44 <_printf_float+0xbc>
 8006144:	0022      	movs	r2, r4
 8006146:	2301      	movs	r3, #1
 8006148:	0038      	movs	r0, r7
 800614a:	9908      	ldr	r1, [sp, #32]
 800614c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800614e:	321a      	adds	r2, #26
 8006150:	47b0      	blx	r6
 8006152:	3001      	adds	r0, #1
 8006154:	d100      	bne.n	8006158 <_printf_float+0x3d0>
 8006156:	e675      	b.n	8005e44 <_printf_float+0xbc>
 8006158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800615a:	3301      	adds	r3, #1
 800615c:	930e      	str	r3, [sp, #56]	; 0x38
 800615e:	e7b0      	b.n	80060c2 <_printf_float+0x33a>
 8006160:	0038      	movs	r0, r7
 8006162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006164:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006166:	9908      	ldr	r1, [sp, #32]
 8006168:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800616a:	47b0      	blx	r6
 800616c:	3001      	adds	r0, #1
 800616e:	d1b9      	bne.n	80060e4 <_printf_float+0x35c>
 8006170:	e668      	b.n	8005e44 <_printf_float+0xbc>
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	0038      	movs	r0, r7
 8006176:	18ea      	adds	r2, r5, r3
 8006178:	9908      	ldr	r1, [sp, #32]
 800617a:	0033      	movs	r3, r6
 800617c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800617e:	47a8      	blx	r5
 8006180:	3001      	adds	r0, #1
 8006182:	d1b9      	bne.n	80060f8 <_printf_float+0x370>
 8006184:	e65e      	b.n	8005e44 <_printf_float+0xbc>
 8006186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006188:	2b01      	cmp	r3, #1
 800618a:	dc02      	bgt.n	8006192 <_printf_float+0x40a>
 800618c:	2301      	movs	r3, #1
 800618e:	421a      	tst	r2, r3
 8006190:	d03a      	beq.n	8006208 <_printf_float+0x480>
 8006192:	2301      	movs	r3, #1
 8006194:	002a      	movs	r2, r5
 8006196:	0038      	movs	r0, r7
 8006198:	9908      	ldr	r1, [sp, #32]
 800619a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800619c:	47b0      	blx	r6
 800619e:	3001      	adds	r0, #1
 80061a0:	d100      	bne.n	80061a4 <_printf_float+0x41c>
 80061a2:	e64f      	b.n	8005e44 <_printf_float+0xbc>
 80061a4:	0038      	movs	r0, r7
 80061a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061aa:	9908      	ldr	r1, [sp, #32]
 80061ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80061ae:	47b0      	blx	r6
 80061b0:	3001      	adds	r0, #1
 80061b2:	d100      	bne.n	80061b6 <_printf_float+0x42e>
 80061b4:	e646      	b.n	8005e44 <_printf_float+0xbc>
 80061b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80061b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80061ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061bc:	2200      	movs	r2, #0
 80061be:	001e      	movs	r6, r3
 80061c0:	2300      	movs	r3, #0
 80061c2:	f7fa f943 	bl	800044c <__aeabi_dcmpeq>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d11c      	bne.n	8006204 <_printf_float+0x47c>
 80061ca:	0033      	movs	r3, r6
 80061cc:	1c6a      	adds	r2, r5, #1
 80061ce:	3b01      	subs	r3, #1
 80061d0:	0038      	movs	r0, r7
 80061d2:	9908      	ldr	r1, [sp, #32]
 80061d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80061d6:	47a8      	blx	r5
 80061d8:	3001      	adds	r0, #1
 80061da:	d10f      	bne.n	80061fc <_printf_float+0x474>
 80061dc:	e632      	b.n	8005e44 <_printf_float+0xbc>
 80061de:	0022      	movs	r2, r4
 80061e0:	2301      	movs	r3, #1
 80061e2:	0038      	movs	r0, r7
 80061e4:	9908      	ldr	r1, [sp, #32]
 80061e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80061e8:	321a      	adds	r2, #26
 80061ea:	47b0      	blx	r6
 80061ec:	3001      	adds	r0, #1
 80061ee:	d100      	bne.n	80061f2 <_printf_float+0x46a>
 80061f0:	e628      	b.n	8005e44 <_printf_float+0xbc>
 80061f2:	3501      	adds	r5, #1
 80061f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061f6:	3b01      	subs	r3, #1
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	dcf0      	bgt.n	80061de <_printf_float+0x456>
 80061fc:	0022      	movs	r2, r4
 80061fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006200:	3250      	adds	r2, #80	; 0x50
 8006202:	e6c8      	b.n	8005f96 <_printf_float+0x20e>
 8006204:	2500      	movs	r5, #0
 8006206:	e7f5      	b.n	80061f4 <_printf_float+0x46c>
 8006208:	002a      	movs	r2, r5
 800620a:	e7e1      	b.n	80061d0 <_printf_float+0x448>
 800620c:	0022      	movs	r2, r4
 800620e:	2301      	movs	r3, #1
 8006210:	0038      	movs	r0, r7
 8006212:	9908      	ldr	r1, [sp, #32]
 8006214:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006216:	3219      	adds	r2, #25
 8006218:	47b0      	blx	r6
 800621a:	3001      	adds	r0, #1
 800621c:	d100      	bne.n	8006220 <_printf_float+0x498>
 800621e:	e611      	b.n	8005e44 <_printf_float+0xbc>
 8006220:	3501      	adds	r5, #1
 8006222:	68e3      	ldr	r3, [r4, #12]
 8006224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	42ab      	cmp	r3, r5
 800622a:	dcef      	bgt.n	800620c <_printf_float+0x484>
 800622c:	e6e8      	b.n	8006000 <_printf_float+0x278>
 800622e:	2500      	movs	r5, #0
 8006230:	e7f7      	b.n	8006222 <_printf_float+0x49a>
 8006232:	46c0      	nop			; (mov r8, r8)

08006234 <_printf_common>:
 8006234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006236:	0016      	movs	r6, r2
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	688a      	ldr	r2, [r1, #8]
 800623c:	690b      	ldr	r3, [r1, #16]
 800623e:	000c      	movs	r4, r1
 8006240:	9000      	str	r0, [sp, #0]
 8006242:	4293      	cmp	r3, r2
 8006244:	da00      	bge.n	8006248 <_printf_common+0x14>
 8006246:	0013      	movs	r3, r2
 8006248:	0022      	movs	r2, r4
 800624a:	6033      	str	r3, [r6, #0]
 800624c:	3243      	adds	r2, #67	; 0x43
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	2a00      	cmp	r2, #0
 8006252:	d001      	beq.n	8006258 <_printf_common+0x24>
 8006254:	3301      	adds	r3, #1
 8006256:	6033      	str	r3, [r6, #0]
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	069b      	lsls	r3, r3, #26
 800625c:	d502      	bpl.n	8006264 <_printf_common+0x30>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	3302      	adds	r3, #2
 8006262:	6033      	str	r3, [r6, #0]
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	2306      	movs	r3, #6
 8006268:	0015      	movs	r5, r2
 800626a:	401d      	ands	r5, r3
 800626c:	421a      	tst	r2, r3
 800626e:	d027      	beq.n	80062c0 <_printf_common+0x8c>
 8006270:	0023      	movs	r3, r4
 8006272:	3343      	adds	r3, #67	; 0x43
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	4193      	sbcs	r3, r2
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	0692      	lsls	r2, r2, #26
 800627e:	d430      	bmi.n	80062e2 <_printf_common+0xae>
 8006280:	0022      	movs	r2, r4
 8006282:	9901      	ldr	r1, [sp, #4]
 8006284:	9800      	ldr	r0, [sp, #0]
 8006286:	9d08      	ldr	r5, [sp, #32]
 8006288:	3243      	adds	r2, #67	; 0x43
 800628a:	47a8      	blx	r5
 800628c:	3001      	adds	r0, #1
 800628e:	d025      	beq.n	80062dc <_printf_common+0xa8>
 8006290:	2206      	movs	r2, #6
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	2500      	movs	r5, #0
 8006296:	4013      	ands	r3, r2
 8006298:	2b04      	cmp	r3, #4
 800629a:	d105      	bne.n	80062a8 <_printf_common+0x74>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	68e5      	ldr	r5, [r4, #12]
 80062a0:	1aed      	subs	r5, r5, r3
 80062a2:	43eb      	mvns	r3, r5
 80062a4:	17db      	asrs	r3, r3, #31
 80062a6:	401d      	ands	r5, r3
 80062a8:	68a3      	ldr	r3, [r4, #8]
 80062aa:	6922      	ldr	r2, [r4, #16]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	dd01      	ble.n	80062b4 <_printf_common+0x80>
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	18ed      	adds	r5, r5, r3
 80062b4:	2600      	movs	r6, #0
 80062b6:	42b5      	cmp	r5, r6
 80062b8:	d120      	bne.n	80062fc <_printf_common+0xc8>
 80062ba:	2000      	movs	r0, #0
 80062bc:	e010      	b.n	80062e0 <_printf_common+0xac>
 80062be:	3501      	adds	r5, #1
 80062c0:	68e3      	ldr	r3, [r4, #12]
 80062c2:	6832      	ldr	r2, [r6, #0]
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	42ab      	cmp	r3, r5
 80062c8:	ddd2      	ble.n	8006270 <_printf_common+0x3c>
 80062ca:	0022      	movs	r2, r4
 80062cc:	2301      	movs	r3, #1
 80062ce:	9901      	ldr	r1, [sp, #4]
 80062d0:	9800      	ldr	r0, [sp, #0]
 80062d2:	9f08      	ldr	r7, [sp, #32]
 80062d4:	3219      	adds	r2, #25
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	d1f0      	bne.n	80062be <_printf_common+0x8a>
 80062dc:	2001      	movs	r0, #1
 80062de:	4240      	negs	r0, r0
 80062e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062e2:	2030      	movs	r0, #48	; 0x30
 80062e4:	18e1      	adds	r1, r4, r3
 80062e6:	3143      	adds	r1, #67	; 0x43
 80062e8:	7008      	strb	r0, [r1, #0]
 80062ea:	0021      	movs	r1, r4
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	3145      	adds	r1, #69	; 0x45
 80062f0:	7809      	ldrb	r1, [r1, #0]
 80062f2:	18a2      	adds	r2, r4, r2
 80062f4:	3243      	adds	r2, #67	; 0x43
 80062f6:	3302      	adds	r3, #2
 80062f8:	7011      	strb	r1, [r2, #0]
 80062fa:	e7c1      	b.n	8006280 <_printf_common+0x4c>
 80062fc:	0022      	movs	r2, r4
 80062fe:	2301      	movs	r3, #1
 8006300:	9901      	ldr	r1, [sp, #4]
 8006302:	9800      	ldr	r0, [sp, #0]
 8006304:	9f08      	ldr	r7, [sp, #32]
 8006306:	321a      	adds	r2, #26
 8006308:	47b8      	blx	r7
 800630a:	3001      	adds	r0, #1
 800630c:	d0e6      	beq.n	80062dc <_printf_common+0xa8>
 800630e:	3601      	adds	r6, #1
 8006310:	e7d1      	b.n	80062b6 <_printf_common+0x82>
	...

08006314 <_printf_i>:
 8006314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006316:	b08b      	sub	sp, #44	; 0x2c
 8006318:	9206      	str	r2, [sp, #24]
 800631a:	000a      	movs	r2, r1
 800631c:	3243      	adds	r2, #67	; 0x43
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	9005      	str	r0, [sp, #20]
 8006322:	9204      	str	r2, [sp, #16]
 8006324:	7e0a      	ldrb	r2, [r1, #24]
 8006326:	000c      	movs	r4, r1
 8006328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800632a:	2a78      	cmp	r2, #120	; 0x78
 800632c:	d809      	bhi.n	8006342 <_printf_i+0x2e>
 800632e:	2a62      	cmp	r2, #98	; 0x62
 8006330:	d80b      	bhi.n	800634a <_printf_i+0x36>
 8006332:	2a00      	cmp	r2, #0
 8006334:	d100      	bne.n	8006338 <_printf_i+0x24>
 8006336:	e0be      	b.n	80064b6 <_printf_i+0x1a2>
 8006338:	497c      	ldr	r1, [pc, #496]	; (800652c <_printf_i+0x218>)
 800633a:	9103      	str	r1, [sp, #12]
 800633c:	2a58      	cmp	r2, #88	; 0x58
 800633e:	d100      	bne.n	8006342 <_printf_i+0x2e>
 8006340:	e093      	b.n	800646a <_printf_i+0x156>
 8006342:	0026      	movs	r6, r4
 8006344:	3642      	adds	r6, #66	; 0x42
 8006346:	7032      	strb	r2, [r6, #0]
 8006348:	e022      	b.n	8006390 <_printf_i+0x7c>
 800634a:	0010      	movs	r0, r2
 800634c:	3863      	subs	r0, #99	; 0x63
 800634e:	2815      	cmp	r0, #21
 8006350:	d8f7      	bhi.n	8006342 <_printf_i+0x2e>
 8006352:	f7f9 feeb 	bl	800012c <__gnu_thumb1_case_shi>
 8006356:	0016      	.short	0x0016
 8006358:	fff6001f 	.word	0xfff6001f
 800635c:	fff6fff6 	.word	0xfff6fff6
 8006360:	001ffff6 	.word	0x001ffff6
 8006364:	fff6fff6 	.word	0xfff6fff6
 8006368:	fff6fff6 	.word	0xfff6fff6
 800636c:	003600a3 	.word	0x003600a3
 8006370:	fff60083 	.word	0xfff60083
 8006374:	00b4fff6 	.word	0x00b4fff6
 8006378:	0036fff6 	.word	0x0036fff6
 800637c:	fff6fff6 	.word	0xfff6fff6
 8006380:	0087      	.short	0x0087
 8006382:	0026      	movs	r6, r4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	3642      	adds	r6, #66	; 0x42
 8006388:	1d11      	adds	r1, r2, #4
 800638a:	6019      	str	r1, [r3, #0]
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	7033      	strb	r3, [r6, #0]
 8006390:	2301      	movs	r3, #1
 8006392:	e0a2      	b.n	80064da <_printf_i+0x1c6>
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	6809      	ldr	r1, [r1, #0]
 8006398:	1d02      	adds	r2, r0, #4
 800639a:	060d      	lsls	r5, r1, #24
 800639c:	d50b      	bpl.n	80063b6 <_printf_i+0xa2>
 800639e:	6805      	ldr	r5, [r0, #0]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	da03      	bge.n	80063ae <_printf_i+0x9a>
 80063a6:	232d      	movs	r3, #45	; 0x2d
 80063a8:	9a04      	ldr	r2, [sp, #16]
 80063aa:	426d      	negs	r5, r5
 80063ac:	7013      	strb	r3, [r2, #0]
 80063ae:	4b5f      	ldr	r3, [pc, #380]	; (800652c <_printf_i+0x218>)
 80063b0:	270a      	movs	r7, #10
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	e01b      	b.n	80063ee <_printf_i+0xda>
 80063b6:	6805      	ldr	r5, [r0, #0]
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	0649      	lsls	r1, r1, #25
 80063bc:	d5f1      	bpl.n	80063a2 <_printf_i+0x8e>
 80063be:	b22d      	sxth	r5, r5
 80063c0:	e7ef      	b.n	80063a2 <_printf_i+0x8e>
 80063c2:	680d      	ldr	r5, [r1, #0]
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	1d08      	adds	r0, r1, #4
 80063c8:	6018      	str	r0, [r3, #0]
 80063ca:	062e      	lsls	r6, r5, #24
 80063cc:	d501      	bpl.n	80063d2 <_printf_i+0xbe>
 80063ce:	680d      	ldr	r5, [r1, #0]
 80063d0:	e003      	b.n	80063da <_printf_i+0xc6>
 80063d2:	066d      	lsls	r5, r5, #25
 80063d4:	d5fb      	bpl.n	80063ce <_printf_i+0xba>
 80063d6:	680d      	ldr	r5, [r1, #0]
 80063d8:	b2ad      	uxth	r5, r5
 80063da:	4b54      	ldr	r3, [pc, #336]	; (800652c <_printf_i+0x218>)
 80063dc:	2708      	movs	r7, #8
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	2a6f      	cmp	r2, #111	; 0x6f
 80063e2:	d000      	beq.n	80063e6 <_printf_i+0xd2>
 80063e4:	3702      	adds	r7, #2
 80063e6:	0023      	movs	r3, r4
 80063e8:	2200      	movs	r2, #0
 80063ea:	3343      	adds	r3, #67	; 0x43
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	db03      	blt.n	80063fe <_printf_i+0xea>
 80063f6:	2104      	movs	r1, #4
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	438a      	bics	r2, r1
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	2d00      	cmp	r5, #0
 8006400:	d102      	bne.n	8006408 <_printf_i+0xf4>
 8006402:	9e04      	ldr	r6, [sp, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <_printf_i+0x10e>
 8006408:	9e04      	ldr	r6, [sp, #16]
 800640a:	0028      	movs	r0, r5
 800640c:	0039      	movs	r1, r7
 800640e:	f7f9 ff1d 	bl	800024c <__aeabi_uidivmod>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	3e01      	subs	r6, #1
 8006416:	5c5b      	ldrb	r3, [r3, r1]
 8006418:	7033      	strb	r3, [r6, #0]
 800641a:	002b      	movs	r3, r5
 800641c:	0005      	movs	r5, r0
 800641e:	429f      	cmp	r7, r3
 8006420:	d9f3      	bls.n	800640a <_printf_i+0xf6>
 8006422:	2f08      	cmp	r7, #8
 8006424:	d109      	bne.n	800643a <_printf_i+0x126>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	07db      	lsls	r3, r3, #31
 800642a:	d506      	bpl.n	800643a <_printf_i+0x126>
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	429a      	cmp	r2, r3
 8006432:	dc02      	bgt.n	800643a <_printf_i+0x126>
 8006434:	2330      	movs	r3, #48	; 0x30
 8006436:	3e01      	subs	r6, #1
 8006438:	7033      	strb	r3, [r6, #0]
 800643a:	9b04      	ldr	r3, [sp, #16]
 800643c:	1b9b      	subs	r3, r3, r6
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	9b07      	ldr	r3, [sp, #28]
 8006442:	0021      	movs	r1, r4
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	9805      	ldr	r0, [sp, #20]
 8006448:	9b06      	ldr	r3, [sp, #24]
 800644a:	aa09      	add	r2, sp, #36	; 0x24
 800644c:	f7ff fef2 	bl	8006234 <_printf_common>
 8006450:	3001      	adds	r0, #1
 8006452:	d147      	bne.n	80064e4 <_printf_i+0x1d0>
 8006454:	2001      	movs	r0, #1
 8006456:	4240      	negs	r0, r0
 8006458:	b00b      	add	sp, #44	; 0x2c
 800645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645c:	2220      	movs	r2, #32
 800645e:	6809      	ldr	r1, [r1, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	2278      	movs	r2, #120	; 0x78
 8006466:	4932      	ldr	r1, [pc, #200]	; (8006530 <_printf_i+0x21c>)
 8006468:	9103      	str	r1, [sp, #12]
 800646a:	0021      	movs	r1, r4
 800646c:	3145      	adds	r1, #69	; 0x45
 800646e:	700a      	strb	r2, [r1, #0]
 8006470:	6819      	ldr	r1, [r3, #0]
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	c920      	ldmia	r1!, {r5}
 8006476:	0610      	lsls	r0, r2, #24
 8006478:	d402      	bmi.n	8006480 <_printf_i+0x16c>
 800647a:	0650      	lsls	r0, r2, #25
 800647c:	d500      	bpl.n	8006480 <_printf_i+0x16c>
 800647e:	b2ad      	uxth	r5, r5
 8006480:	6019      	str	r1, [r3, #0]
 8006482:	07d3      	lsls	r3, r2, #31
 8006484:	d502      	bpl.n	800648c <_printf_i+0x178>
 8006486:	2320      	movs	r3, #32
 8006488:	4313      	orrs	r3, r2
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	2710      	movs	r7, #16
 800648e:	2d00      	cmp	r5, #0
 8006490:	d1a9      	bne.n	80063e6 <_printf_i+0xd2>
 8006492:	2220      	movs	r2, #32
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	4393      	bics	r3, r2
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	e7a4      	b.n	80063e6 <_printf_i+0xd2>
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	680d      	ldr	r5, [r1, #0]
 80064a0:	1d10      	adds	r0, r2, #4
 80064a2:	6949      	ldr	r1, [r1, #20]
 80064a4:	6018      	str	r0, [r3, #0]
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	062e      	lsls	r6, r5, #24
 80064aa:	d501      	bpl.n	80064b0 <_printf_i+0x19c>
 80064ac:	6019      	str	r1, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <_printf_i+0x1a2>
 80064b0:	066d      	lsls	r5, r5, #25
 80064b2:	d5fb      	bpl.n	80064ac <_printf_i+0x198>
 80064b4:	8019      	strh	r1, [r3, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9e04      	ldr	r6, [sp, #16]
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	e7c0      	b.n	8006440 <_printf_i+0x12c>
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	1d11      	adds	r1, r2, #4
 80064c2:	6019      	str	r1, [r3, #0]
 80064c4:	6816      	ldr	r6, [r2, #0]
 80064c6:	2100      	movs	r1, #0
 80064c8:	0030      	movs	r0, r6
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	f000 fbf1 	bl	8006cb2 <memchr>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d001      	beq.n	80064d8 <_printf_i+0x1c4>
 80064d4:	1b80      	subs	r0, r0, r6
 80064d6:	6060      	str	r0, [r4, #4]
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	2300      	movs	r3, #0
 80064de:	9a04      	ldr	r2, [sp, #16]
 80064e0:	7013      	strb	r3, [r2, #0]
 80064e2:	e7ad      	b.n	8006440 <_printf_i+0x12c>
 80064e4:	0032      	movs	r2, r6
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	9906      	ldr	r1, [sp, #24]
 80064ea:	9805      	ldr	r0, [sp, #20]
 80064ec:	9d07      	ldr	r5, [sp, #28]
 80064ee:	47a8      	blx	r5
 80064f0:	3001      	adds	r0, #1
 80064f2:	d0af      	beq.n	8006454 <_printf_i+0x140>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	079b      	lsls	r3, r3, #30
 80064f8:	d415      	bmi.n	8006526 <_printf_i+0x212>
 80064fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fc:	68e0      	ldr	r0, [r4, #12]
 80064fe:	4298      	cmp	r0, r3
 8006500:	daaa      	bge.n	8006458 <_printf_i+0x144>
 8006502:	0018      	movs	r0, r3
 8006504:	e7a8      	b.n	8006458 <_printf_i+0x144>
 8006506:	0022      	movs	r2, r4
 8006508:	2301      	movs	r3, #1
 800650a:	9906      	ldr	r1, [sp, #24]
 800650c:	9805      	ldr	r0, [sp, #20]
 800650e:	9e07      	ldr	r6, [sp, #28]
 8006510:	3219      	adds	r2, #25
 8006512:	47b0      	blx	r6
 8006514:	3001      	adds	r0, #1
 8006516:	d09d      	beq.n	8006454 <_printf_i+0x140>
 8006518:	3501      	adds	r5, #1
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	42ab      	cmp	r3, r5
 8006522:	dcf0      	bgt.n	8006506 <_printf_i+0x1f2>
 8006524:	e7e9      	b.n	80064fa <_printf_i+0x1e6>
 8006526:	2500      	movs	r5, #0
 8006528:	e7f7      	b.n	800651a <_printf_i+0x206>
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	0800a636 	.word	0x0800a636
 8006530:	0800a647 	.word	0x0800a647

08006534 <_scanf_float>:
 8006534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006536:	b08b      	sub	sp, #44	; 0x2c
 8006538:	0016      	movs	r6, r2
 800653a:	9002      	str	r0, [sp, #8]
 800653c:	22ae      	movs	r2, #174	; 0xae
 800653e:	2000      	movs	r0, #0
 8006540:	9307      	str	r3, [sp, #28]
 8006542:	688b      	ldr	r3, [r1, #8]
 8006544:	000f      	movs	r7, r1
 8006546:	1e59      	subs	r1, r3, #1
 8006548:	0052      	lsls	r2, r2, #1
 800654a:	9006      	str	r0, [sp, #24]
 800654c:	4291      	cmp	r1, r2
 800654e:	d905      	bls.n	800655c <_scanf_float+0x28>
 8006550:	3b5e      	subs	r3, #94	; 0x5e
 8006552:	3bff      	subs	r3, #255	; 0xff
 8006554:	9306      	str	r3, [sp, #24]
 8006556:	235e      	movs	r3, #94	; 0x5e
 8006558:	33ff      	adds	r3, #255	; 0xff
 800655a:	60bb      	str	r3, [r7, #8]
 800655c:	23f0      	movs	r3, #240	; 0xf0
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4313      	orrs	r3, r2
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	003b      	movs	r3, r7
 8006568:	2400      	movs	r4, #0
 800656a:	331c      	adds	r3, #28
 800656c:	001d      	movs	r5, r3
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	9403      	str	r4, [sp, #12]
 8006572:	9409      	str	r4, [sp, #36]	; 0x24
 8006574:	9408      	str	r4, [sp, #32]
 8006576:	9401      	str	r4, [sp, #4]
 8006578:	9405      	str	r4, [sp, #20]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	2a00      	cmp	r2, #0
 800657e:	d00a      	beq.n	8006596 <_scanf_float+0x62>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b4e      	cmp	r3, #78	; 0x4e
 8006586:	d844      	bhi.n	8006612 <_scanf_float+0xde>
 8006588:	0018      	movs	r0, r3
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d82c      	bhi.n	80065e8 <_scanf_float+0xb4>
 800658e:	382b      	subs	r0, #43	; 0x2b
 8006590:	b2c1      	uxtb	r1, r0
 8006592:	290e      	cmp	r1, #14
 8006594:	d92a      	bls.n	80065ec <_scanf_float+0xb8>
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <_scanf_float+0x70>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4aa3      	ldr	r2, [pc, #652]	; (800682c <_scanf_float+0x2f8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d900      	bls.n	80065ae <_scanf_float+0x7a>
 80065ac:	e0f9      	b.n	80067a2 <_scanf_float+0x26e>
 80065ae:	24be      	movs	r4, #190	; 0xbe
 80065b0:	0064      	lsls	r4, r4, #1
 80065b2:	9b04      	ldr	r3, [sp, #16]
 80065b4:	429d      	cmp	r5, r3
 80065b6:	d900      	bls.n	80065ba <_scanf_float+0x86>
 80065b8:	e0e9      	b.n	800678e <_scanf_float+0x25a>
 80065ba:	2301      	movs	r3, #1
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	e183      	b.n	80068c8 <_scanf_float+0x394>
 80065c0:	0018      	movs	r0, r3
 80065c2:	3861      	subs	r0, #97	; 0x61
 80065c4:	280d      	cmp	r0, #13
 80065c6:	d8e6      	bhi.n	8006596 <_scanf_float+0x62>
 80065c8:	f7f9 fdb0 	bl	800012c <__gnu_thumb1_case_shi>
 80065cc:	ffe50083 	.word	0xffe50083
 80065d0:	ffe5ffe5 	.word	0xffe5ffe5
 80065d4:	00a200b6 	.word	0x00a200b6
 80065d8:	ffe5ffe5 	.word	0xffe5ffe5
 80065dc:	ffe50089 	.word	0xffe50089
 80065e0:	ffe5ffe5 	.word	0xffe5ffe5
 80065e4:	0065ffe5 	.word	0x0065ffe5
 80065e8:	3841      	subs	r0, #65	; 0x41
 80065ea:	e7eb      	b.n	80065c4 <_scanf_float+0x90>
 80065ec:	280e      	cmp	r0, #14
 80065ee:	d8d2      	bhi.n	8006596 <_scanf_float+0x62>
 80065f0:	f7f9 fd9c 	bl	800012c <__gnu_thumb1_case_shi>
 80065f4:	ffd1004b 	.word	0xffd1004b
 80065f8:	0098004b 	.word	0x0098004b
 80065fc:	0020ffd1 	.word	0x0020ffd1
 8006600:	00400040 	.word	0x00400040
 8006604:	00400040 	.word	0x00400040
 8006608:	00400040 	.word	0x00400040
 800660c:	00400040 	.word	0x00400040
 8006610:	0040      	.short	0x0040
 8006612:	2b6e      	cmp	r3, #110	; 0x6e
 8006614:	d809      	bhi.n	800662a <_scanf_float+0xf6>
 8006616:	2b60      	cmp	r3, #96	; 0x60
 8006618:	d8d2      	bhi.n	80065c0 <_scanf_float+0x8c>
 800661a:	2b54      	cmp	r3, #84	; 0x54
 800661c:	d07d      	beq.n	800671a <_scanf_float+0x1e6>
 800661e:	2b59      	cmp	r3, #89	; 0x59
 8006620:	d1b9      	bne.n	8006596 <_scanf_float+0x62>
 8006622:	2c07      	cmp	r4, #7
 8006624:	d1b7      	bne.n	8006596 <_scanf_float+0x62>
 8006626:	2408      	movs	r4, #8
 8006628:	e02c      	b.n	8006684 <_scanf_float+0x150>
 800662a:	2b74      	cmp	r3, #116	; 0x74
 800662c:	d075      	beq.n	800671a <_scanf_float+0x1e6>
 800662e:	2b79      	cmp	r3, #121	; 0x79
 8006630:	d0f7      	beq.n	8006622 <_scanf_float+0xee>
 8006632:	e7b0      	b.n	8006596 <_scanf_float+0x62>
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	05c8      	lsls	r0, r1, #23
 8006638:	d51c      	bpl.n	8006674 <_scanf_float+0x140>
 800663a:	2380      	movs	r3, #128	; 0x80
 800663c:	4399      	bics	r1, r3
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	3301      	adds	r3, #1
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	9b06      	ldr	r3, [sp, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <_scanf_float+0x120>
 800664c:	3b01      	subs	r3, #1
 800664e:	3201      	adds	r2, #1
 8006650:	9306      	str	r3, [sp, #24]
 8006652:	60ba      	str	r2, [r7, #8]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3b01      	subs	r3, #1
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	6873      	ldr	r3, [r6, #4]
 8006662:	3b01      	subs	r3, #1
 8006664:	6073      	str	r3, [r6, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	dc00      	bgt.n	800666c <_scanf_float+0x138>
 800666a:	e086      	b.n	800677a <_scanf_float+0x246>
 800666c:	6833      	ldr	r3, [r6, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	e782      	b.n	800657a <_scanf_float+0x46>
 8006674:	9a03      	ldr	r2, [sp, #12]
 8006676:	1912      	adds	r2, r2, r4
 8006678:	2a00      	cmp	r2, #0
 800667a:	d18c      	bne.n	8006596 <_scanf_float+0x62>
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	496c      	ldr	r1, [pc, #432]	; (8006830 <_scanf_float+0x2fc>)
 8006680:	400a      	ands	r2, r1
 8006682:	603a      	str	r2, [r7, #0]
 8006684:	702b      	strb	r3, [r5, #0]
 8006686:	3501      	adds	r5, #1
 8006688:	e7e4      	b.n	8006654 <_scanf_float+0x120>
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	420a      	tst	r2, r1
 8006690:	d081      	beq.n	8006596 <_scanf_float+0x62>
 8006692:	438a      	bics	r2, r1
 8006694:	e7f5      	b.n	8006682 <_scanf_float+0x14e>
 8006696:	9a03      	ldr	r2, [sp, #12]
 8006698:	2a00      	cmp	r2, #0
 800669a:	d10f      	bne.n	80066bc <_scanf_float+0x188>
 800669c:	9a01      	ldr	r2, [sp, #4]
 800669e:	2a00      	cmp	r2, #0
 80066a0:	d10f      	bne.n	80066c2 <_scanf_float+0x18e>
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	21e0      	movs	r1, #224	; 0xe0
 80066a6:	0010      	movs	r0, r2
 80066a8:	00c9      	lsls	r1, r1, #3
 80066aa:	4008      	ands	r0, r1
 80066ac:	4288      	cmp	r0, r1
 80066ae:	d108      	bne.n	80066c2 <_scanf_float+0x18e>
 80066b0:	4960      	ldr	r1, [pc, #384]	; (8006834 <_scanf_float+0x300>)
 80066b2:	400a      	ands	r2, r1
 80066b4:	603a      	str	r2, [r7, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	9203      	str	r2, [sp, #12]
 80066ba:	e7e3      	b.n	8006684 <_scanf_float+0x150>
 80066bc:	9a03      	ldr	r2, [sp, #12]
 80066be:	2a02      	cmp	r2, #2
 80066c0:	d059      	beq.n	8006776 <_scanf_float+0x242>
 80066c2:	2c01      	cmp	r4, #1
 80066c4:	d002      	beq.n	80066cc <_scanf_float+0x198>
 80066c6:	2c04      	cmp	r4, #4
 80066c8:	d000      	beq.n	80066cc <_scanf_float+0x198>
 80066ca:	e764      	b.n	8006596 <_scanf_float+0x62>
 80066cc:	3401      	adds	r4, #1
 80066ce:	b2e4      	uxtb	r4, r4
 80066d0:	e7d8      	b.n	8006684 <_scanf_float+0x150>
 80066d2:	9a03      	ldr	r2, [sp, #12]
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	d000      	beq.n	80066da <_scanf_float+0x1a6>
 80066d8:	e75d      	b.n	8006596 <_scanf_float+0x62>
 80066da:	2202      	movs	r2, #2
 80066dc:	e7ec      	b.n	80066b8 <_scanf_float+0x184>
 80066de:	2c00      	cmp	r4, #0
 80066e0:	d110      	bne.n	8006704 <_scanf_float+0x1d0>
 80066e2:	9a01      	ldr	r2, [sp, #4]
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	d000      	beq.n	80066ea <_scanf_float+0x1b6>
 80066e8:	e758      	b.n	800659c <_scanf_float+0x68>
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	21e0      	movs	r1, #224	; 0xe0
 80066ee:	0010      	movs	r0, r2
 80066f0:	00c9      	lsls	r1, r1, #3
 80066f2:	4008      	ands	r0, r1
 80066f4:	4288      	cmp	r0, r1
 80066f6:	d000      	beq.n	80066fa <_scanf_float+0x1c6>
 80066f8:	e754      	b.n	80065a4 <_scanf_float+0x70>
 80066fa:	494e      	ldr	r1, [pc, #312]	; (8006834 <_scanf_float+0x300>)
 80066fc:	3401      	adds	r4, #1
 80066fe:	400a      	ands	r2, r1
 8006700:	603a      	str	r2, [r7, #0]
 8006702:	e7bf      	b.n	8006684 <_scanf_float+0x150>
 8006704:	21fd      	movs	r1, #253	; 0xfd
 8006706:	1ee2      	subs	r2, r4, #3
 8006708:	420a      	tst	r2, r1
 800670a:	d000      	beq.n	800670e <_scanf_float+0x1da>
 800670c:	e743      	b.n	8006596 <_scanf_float+0x62>
 800670e:	e7dd      	b.n	80066cc <_scanf_float+0x198>
 8006710:	2c02      	cmp	r4, #2
 8006712:	d000      	beq.n	8006716 <_scanf_float+0x1e2>
 8006714:	e73f      	b.n	8006596 <_scanf_float+0x62>
 8006716:	2403      	movs	r4, #3
 8006718:	e7b4      	b.n	8006684 <_scanf_float+0x150>
 800671a:	2c06      	cmp	r4, #6
 800671c:	d000      	beq.n	8006720 <_scanf_float+0x1ec>
 800671e:	e73a      	b.n	8006596 <_scanf_float+0x62>
 8006720:	2407      	movs	r4, #7
 8006722:	e7af      	b.n	8006684 <_scanf_float+0x150>
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	0591      	lsls	r1, r2, #22
 8006728:	d400      	bmi.n	800672c <_scanf_float+0x1f8>
 800672a:	e734      	b.n	8006596 <_scanf_float+0x62>
 800672c:	4942      	ldr	r1, [pc, #264]	; (8006838 <_scanf_float+0x304>)
 800672e:	400a      	ands	r2, r1
 8006730:	603a      	str	r2, [r7, #0]
 8006732:	9a01      	ldr	r2, [sp, #4]
 8006734:	9205      	str	r2, [sp, #20]
 8006736:	e7a5      	b.n	8006684 <_scanf_float+0x150>
 8006738:	21a0      	movs	r1, #160	; 0xa0
 800673a:	2080      	movs	r0, #128	; 0x80
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	00c9      	lsls	r1, r1, #3
 8006740:	4011      	ands	r1, r2
 8006742:	00c0      	lsls	r0, r0, #3
 8006744:	4281      	cmp	r1, r0
 8006746:	d006      	beq.n	8006756 <_scanf_float+0x222>
 8006748:	4202      	tst	r2, r0
 800674a:	d100      	bne.n	800674e <_scanf_float+0x21a>
 800674c:	e723      	b.n	8006596 <_scanf_float+0x62>
 800674e:	9901      	ldr	r1, [sp, #4]
 8006750:	2900      	cmp	r1, #0
 8006752:	d100      	bne.n	8006756 <_scanf_float+0x222>
 8006754:	e726      	b.n	80065a4 <_scanf_float+0x70>
 8006756:	0591      	lsls	r1, r2, #22
 8006758:	d404      	bmi.n	8006764 <_scanf_float+0x230>
 800675a:	9901      	ldr	r1, [sp, #4]
 800675c:	9805      	ldr	r0, [sp, #20]
 800675e:	9509      	str	r5, [sp, #36]	; 0x24
 8006760:	1a09      	subs	r1, r1, r0
 8006762:	9108      	str	r1, [sp, #32]
 8006764:	4933      	ldr	r1, [pc, #204]	; (8006834 <_scanf_float+0x300>)
 8006766:	400a      	ands	r2, r1
 8006768:	21c0      	movs	r1, #192	; 0xc0
 800676a:	0049      	lsls	r1, r1, #1
 800676c:	430a      	orrs	r2, r1
 800676e:	603a      	str	r2, [r7, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	9201      	str	r2, [sp, #4]
 8006774:	e786      	b.n	8006684 <_scanf_float+0x150>
 8006776:	2203      	movs	r2, #3
 8006778:	e79e      	b.n	80066b8 <_scanf_float+0x184>
 800677a:	23c0      	movs	r3, #192	; 0xc0
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	0031      	movs	r1, r6
 8006780:	58fb      	ldr	r3, [r7, r3]
 8006782:	9802      	ldr	r0, [sp, #8]
 8006784:	4798      	blx	r3
 8006786:	2800      	cmp	r0, #0
 8006788:	d100      	bne.n	800678c <_scanf_float+0x258>
 800678a:	e6f6      	b.n	800657a <_scanf_float+0x46>
 800678c:	e703      	b.n	8006596 <_scanf_float+0x62>
 800678e:	3d01      	subs	r5, #1
 8006790:	593b      	ldr	r3, [r7, r4]
 8006792:	0032      	movs	r2, r6
 8006794:	7829      	ldrb	r1, [r5, #0]
 8006796:	9802      	ldr	r0, [sp, #8]
 8006798:	4798      	blx	r3
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3b01      	subs	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e707      	b.n	80065b2 <_scanf_float+0x7e>
 80067a2:	1e63      	subs	r3, r4, #1
 80067a4:	2b06      	cmp	r3, #6
 80067a6:	d80e      	bhi.n	80067c6 <_scanf_float+0x292>
 80067a8:	9503      	str	r5, [sp, #12]
 80067aa:	2c02      	cmp	r4, #2
 80067ac:	d920      	bls.n	80067f0 <_scanf_float+0x2bc>
 80067ae:	1b63      	subs	r3, r4, r5
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	9a06      	ldr	r2, [sp, #24]
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d827      	bhi.n	8006810 <_scanf_float+0x2dc>
 80067c0:	3c03      	subs	r4, #3
 80067c2:	b2e4      	uxtb	r4, r4
 80067c4:	1b2d      	subs	r5, r5, r4
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	05da      	lsls	r2, r3, #23
 80067ca:	d552      	bpl.n	8006872 <_scanf_float+0x33e>
 80067cc:	055b      	lsls	r3, r3, #21
 80067ce:	d535      	bpl.n	800683c <_scanf_float+0x308>
 80067d0:	24be      	movs	r4, #190	; 0xbe
 80067d2:	0064      	lsls	r4, r4, #1
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	429d      	cmp	r5, r3
 80067d8:	d800      	bhi.n	80067dc <_scanf_float+0x2a8>
 80067da:	e6ee      	b.n	80065ba <_scanf_float+0x86>
 80067dc:	3d01      	subs	r5, #1
 80067de:	593b      	ldr	r3, [r7, r4]
 80067e0:	0032      	movs	r2, r6
 80067e2:	7829      	ldrb	r1, [r5, #0]
 80067e4:	9802      	ldr	r0, [sp, #8]
 80067e6:	4798      	blx	r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e7f1      	b.n	80067d4 <_scanf_float+0x2a0>
 80067f0:	24be      	movs	r4, #190	; 0xbe
 80067f2:	0064      	lsls	r4, r4, #1
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	429d      	cmp	r5, r3
 80067f8:	d800      	bhi.n	80067fc <_scanf_float+0x2c8>
 80067fa:	e6de      	b.n	80065ba <_scanf_float+0x86>
 80067fc:	3d01      	subs	r5, #1
 80067fe:	593b      	ldr	r3, [r7, r4]
 8006800:	0032      	movs	r2, r6
 8006802:	7829      	ldrb	r1, [r5, #0]
 8006804:	9802      	ldr	r0, [sp, #8]
 8006806:	4798      	blx	r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e7f1      	b.n	80067f4 <_scanf_float+0x2c0>
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	0032      	movs	r2, r6
 8006814:	3b01      	subs	r3, #1
 8006816:	7819      	ldrb	r1, [r3, #0]
 8006818:	9303      	str	r3, [sp, #12]
 800681a:	23be      	movs	r3, #190	; 0xbe
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	58fb      	ldr	r3, [r7, r3]
 8006820:	9802      	ldr	r0, [sp, #8]
 8006822:	4798      	blx	r3
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3b01      	subs	r3, #1
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e7c3      	b.n	80067b4 <_scanf_float+0x280>
 800682c:	fffffeff 	.word	0xfffffeff
 8006830:	fffffe7f 	.word	0xfffffe7f
 8006834:	fffff87f 	.word	0xfffff87f
 8006838:	fffffd7f 	.word	0xfffffd7f
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1e6c      	subs	r4, r5, #1
 8006840:	7821      	ldrb	r1, [r4, #0]
 8006842:	3b01      	subs	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	2965      	cmp	r1, #101	; 0x65
 8006848:	d00c      	beq.n	8006864 <_scanf_float+0x330>
 800684a:	2945      	cmp	r1, #69	; 0x45
 800684c:	d00a      	beq.n	8006864 <_scanf_float+0x330>
 800684e:	23be      	movs	r3, #190	; 0xbe
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	58fb      	ldr	r3, [r7, r3]
 8006854:	0032      	movs	r2, r6
 8006856:	9802      	ldr	r0, [sp, #8]
 8006858:	4798      	blx	r3
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1eac      	subs	r4, r5, #2
 800685e:	3b01      	subs	r3, #1
 8006860:	7821      	ldrb	r1, [r4, #0]
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	23be      	movs	r3, #190	; 0xbe
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	0032      	movs	r2, r6
 800686a:	58fb      	ldr	r3, [r7, r3]
 800686c:	9802      	ldr	r0, [sp, #8]
 800686e:	4798      	blx	r3
 8006870:	0025      	movs	r5, r4
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	2310      	movs	r3, #16
 8006876:	0011      	movs	r1, r2
 8006878:	4019      	ands	r1, r3
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	421a      	tst	r2, r3
 800687e:	d15b      	bne.n	8006938 <_scanf_float+0x404>
 8006880:	22c0      	movs	r2, #192	; 0xc0
 8006882:	7029      	strb	r1, [r5, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	00d2      	lsls	r2, r2, #3
 8006888:	4013      	ands	r3, r2
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	00d2      	lsls	r2, r2, #3
 800688e:	4293      	cmp	r3, r2
 8006890:	d11d      	bne.n	80068ce <_scanf_float+0x39a>
 8006892:	9b05      	ldr	r3, [sp, #20]
 8006894:	9a01      	ldr	r2, [sp, #4]
 8006896:	9901      	ldr	r1, [sp, #4]
 8006898:	1a9a      	subs	r2, r3, r2
 800689a:	428b      	cmp	r3, r1
 800689c:	d124      	bne.n	80068e8 <_scanf_float+0x3b4>
 800689e:	2200      	movs	r2, #0
 80068a0:	9904      	ldr	r1, [sp, #16]
 80068a2:	9802      	ldr	r0, [sp, #8]
 80068a4:	f002 fc98 	bl	80091d8 <_strtod_r>
 80068a8:	9b07      	ldr	r3, [sp, #28]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	0004      	movs	r4, r0
 80068ae:	000d      	movs	r5, r1
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	0791      	lsls	r1, r2, #30
 80068b4:	d525      	bpl.n	8006902 <_scanf_float+0x3ce>
 80068b6:	9907      	ldr	r1, [sp, #28]
 80068b8:	1d1a      	adds	r2, r3, #4
 80068ba:	600a      	str	r2, [r1, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	601c      	str	r4, [r3, #0]
 80068c0:	605d      	str	r5, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3301      	adds	r3, #1
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	9803      	ldr	r0, [sp, #12]
 80068ca:	b00b      	add	sp, #44	; 0x2c
 80068cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ce:	9b08      	ldr	r3, [sp, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0e4      	beq.n	800689e <_scanf_float+0x36a>
 80068d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d6:	9a03      	ldr	r2, [sp, #12]
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	9802      	ldr	r0, [sp, #8]
 80068dc:	230a      	movs	r3, #10
 80068de:	f002 fd09 	bl	80092f4 <_strtol_r>
 80068e2:	9b08      	ldr	r3, [sp, #32]
 80068e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80068e6:	1ac2      	subs	r2, r0, r3
 80068e8:	003b      	movs	r3, r7
 80068ea:	3370      	adds	r3, #112	; 0x70
 80068ec:	33ff      	adds	r3, #255	; 0xff
 80068ee:	429d      	cmp	r5, r3
 80068f0:	d302      	bcc.n	80068f8 <_scanf_float+0x3c4>
 80068f2:	003d      	movs	r5, r7
 80068f4:	356f      	adds	r5, #111	; 0x6f
 80068f6:	35ff      	adds	r5, #255	; 0xff
 80068f8:	0028      	movs	r0, r5
 80068fa:	4910      	ldr	r1, [pc, #64]	; (800693c <_scanf_float+0x408>)
 80068fc:	f000 f8e6 	bl	8006acc <siprintf>
 8006900:	e7cd      	b.n	800689e <_scanf_float+0x36a>
 8006902:	1d19      	adds	r1, r3, #4
 8006904:	0752      	lsls	r2, r2, #29
 8006906:	d502      	bpl.n	800690e <_scanf_float+0x3da>
 8006908:	9a07      	ldr	r2, [sp, #28]
 800690a:	6011      	str	r1, [r2, #0]
 800690c:	e7d6      	b.n	80068bc <_scanf_float+0x388>
 800690e:	9a07      	ldr	r2, [sp, #28]
 8006910:	0020      	movs	r0, r4
 8006912:	6011      	str	r1, [r2, #0]
 8006914:	681e      	ldr	r6, [r3, #0]
 8006916:	0022      	movs	r2, r4
 8006918:	002b      	movs	r3, r5
 800691a:	0029      	movs	r1, r5
 800691c:	f7fb fcec 	bl	80022f8 <__aeabi_dcmpun>
 8006920:	2800      	cmp	r0, #0
 8006922:	d004      	beq.n	800692e <_scanf_float+0x3fa>
 8006924:	4806      	ldr	r0, [pc, #24]	; (8006940 <_scanf_float+0x40c>)
 8006926:	f000 f9cf 	bl	8006cc8 <nanf>
 800692a:	6030      	str	r0, [r6, #0]
 800692c:	e7c9      	b.n	80068c2 <_scanf_float+0x38e>
 800692e:	0020      	movs	r0, r4
 8006930:	0029      	movs	r1, r5
 8006932:	f7fb fd8b 	bl	800244c <__aeabi_d2f>
 8006936:	e7f8      	b.n	800692a <_scanf_float+0x3f6>
 8006938:	2300      	movs	r3, #0
 800693a:	e63f      	b.n	80065bc <_scanf_float+0x88>
 800693c:	0800a658 	.word	0x0800a658
 8006940:	0800a9ed 	.word	0x0800a9ed

08006944 <std>:
 8006944:	2300      	movs	r3, #0
 8006946:	b510      	push	{r4, lr}
 8006948:	0004      	movs	r4, r0
 800694a:	6003      	str	r3, [r0, #0]
 800694c:	6043      	str	r3, [r0, #4]
 800694e:	6083      	str	r3, [r0, #8]
 8006950:	8181      	strh	r1, [r0, #12]
 8006952:	6643      	str	r3, [r0, #100]	; 0x64
 8006954:	81c2      	strh	r2, [r0, #14]
 8006956:	6103      	str	r3, [r0, #16]
 8006958:	6143      	str	r3, [r0, #20]
 800695a:	6183      	str	r3, [r0, #24]
 800695c:	0019      	movs	r1, r3
 800695e:	2208      	movs	r2, #8
 8006960:	305c      	adds	r0, #92	; 0x5c
 8006962:	f000 f91f 	bl	8006ba4 <memset>
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <std+0x50>)
 8006968:	6224      	str	r4, [r4, #32]
 800696a:	6263      	str	r3, [r4, #36]	; 0x24
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <std+0x54>)
 800696e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <std+0x58>)
 8006972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <std+0x5c>)
 8006976:	6323      	str	r3, [r4, #48]	; 0x30
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <std+0x60>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d005      	beq.n	800698a <std+0x46>
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <std+0x64>)
 8006980:	429c      	cmp	r4, r3
 8006982:	d002      	beq.n	800698a <std+0x46>
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <std+0x68>)
 8006986:	429c      	cmp	r4, r3
 8006988:	d103      	bne.n	8006992 <std+0x4e>
 800698a:	0020      	movs	r0, r4
 800698c:	3058      	adds	r0, #88	; 0x58
 800698e:	f000 f98d 	bl	8006cac <__retarget_lock_init_recursive>
 8006992:	bd10      	pop	{r4, pc}
 8006994:	08006b0d 	.word	0x08006b0d
 8006998:	08006b35 	.word	0x08006b35
 800699c:	08006b6d 	.word	0x08006b6d
 80069a0:	08006b99 	.word	0x08006b99
 80069a4:	200002c0 	.word	0x200002c0
 80069a8:	20000328 	.word	0x20000328
 80069ac:	20000390 	.word	0x20000390

080069b0 <stdio_exit_handler>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4a03      	ldr	r2, [pc, #12]	; (80069c0 <stdio_exit_handler+0x10>)
 80069b4:	4903      	ldr	r1, [pc, #12]	; (80069c4 <stdio_exit_handler+0x14>)
 80069b6:	4804      	ldr	r0, [pc, #16]	; (80069c8 <stdio_exit_handler+0x18>)
 80069b8:	f000 f86c 	bl	8006a94 <_fwalk_sglue>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	2000000c 	.word	0x2000000c
 80069c4:	080096d5 	.word	0x080096d5
 80069c8:	20000018 	.word	0x20000018

080069cc <cleanup_stdio>:
 80069cc:	6841      	ldr	r1, [r0, #4]
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <cleanup_stdio+0x30>)
 80069d0:	b510      	push	{r4, lr}
 80069d2:	0004      	movs	r4, r0
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d001      	beq.n	80069dc <cleanup_stdio+0x10>
 80069d8:	f002 fe7c 	bl	80096d4 <_fflush_r>
 80069dc:	68a1      	ldr	r1, [r4, #8]
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <cleanup_stdio+0x34>)
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d002      	beq.n	80069ea <cleanup_stdio+0x1e>
 80069e4:	0020      	movs	r0, r4
 80069e6:	f002 fe75 	bl	80096d4 <_fflush_r>
 80069ea:	68e1      	ldr	r1, [r4, #12]
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <cleanup_stdio+0x38>)
 80069ee:	4299      	cmp	r1, r3
 80069f0:	d002      	beq.n	80069f8 <cleanup_stdio+0x2c>
 80069f2:	0020      	movs	r0, r4
 80069f4:	f002 fe6e 	bl	80096d4 <_fflush_r>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	200002c0 	.word	0x200002c0
 8006a00:	20000328 	.word	0x20000328
 8006a04:	20000390 	.word	0x20000390

08006a08 <global_stdio_init.part.0>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <global_stdio_init.part.0+0x28>)
 8006a0c:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <global_stdio_init.part.0+0x2c>)
 8006a0e:	2104      	movs	r1, #4
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	4809      	ldr	r0, [pc, #36]	; (8006a38 <global_stdio_init.part.0+0x30>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	f7ff ff95 	bl	8006944 <std>
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	2109      	movs	r1, #9
 8006a1e:	4807      	ldr	r0, [pc, #28]	; (8006a3c <global_stdio_init.part.0+0x34>)
 8006a20:	f7ff ff90 	bl	8006944 <std>
 8006a24:	2202      	movs	r2, #2
 8006a26:	2112      	movs	r1, #18
 8006a28:	4805      	ldr	r0, [pc, #20]	; (8006a40 <global_stdio_init.part.0+0x38>)
 8006a2a:	f7ff ff8b 	bl	8006944 <std>
 8006a2e:	bd10      	pop	{r4, pc}
 8006a30:	200003f8 	.word	0x200003f8
 8006a34:	080069b1 	.word	0x080069b1
 8006a38:	200002c0 	.word	0x200002c0
 8006a3c:	20000328 	.word	0x20000328
 8006a40:	20000390 	.word	0x20000390

08006a44 <__sfp_lock_acquire>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	4802      	ldr	r0, [pc, #8]	; (8006a50 <__sfp_lock_acquire+0xc>)
 8006a48:	f000 f931 	bl	8006cae <__retarget_lock_acquire_recursive>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	20000401 	.word	0x20000401

08006a54 <__sfp_lock_release>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <__sfp_lock_release+0xc>)
 8006a58:	f000 f92a 	bl	8006cb0 <__retarget_lock_release_recursive>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	20000401 	.word	0x20000401

08006a64 <__sinit>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	0004      	movs	r4, r0
 8006a68:	f7ff ffec 	bl	8006a44 <__sfp_lock_acquire>
 8006a6c:	6a23      	ldr	r3, [r4, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <__sinit+0x14>
 8006a72:	f7ff ffef 	bl	8006a54 <__sfp_lock_release>
 8006a76:	bd10      	pop	{r4, pc}
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <__sinit+0x28>)
 8006a7a:	6223      	str	r3, [r4, #32]
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <__sinit+0x2c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f6      	bne.n	8006a72 <__sinit+0xe>
 8006a84:	f7ff ffc0 	bl	8006a08 <global_stdio_init.part.0>
 8006a88:	e7f3      	b.n	8006a72 <__sinit+0xe>
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	080069cd 	.word	0x080069cd
 8006a90:	200003f8 	.word	0x200003f8

08006a94 <_fwalk_sglue>:
 8006a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a96:	0014      	movs	r4, r2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	9000      	str	r0, [sp, #0]
 8006a9c:	9101      	str	r1, [sp, #4]
 8006a9e:	68a5      	ldr	r5, [r4, #8]
 8006aa0:	6867      	ldr	r7, [r4, #4]
 8006aa2:	3f01      	subs	r7, #1
 8006aa4:	d504      	bpl.n	8006ab0 <_fwalk_sglue+0x1c>
 8006aa6:	6824      	ldr	r4, [r4, #0]
 8006aa8:	2c00      	cmp	r4, #0
 8006aaa:	d1f8      	bne.n	8006a9e <_fwalk_sglue+0xa>
 8006aac:	0030      	movs	r0, r6
 8006aae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ab0:	89ab      	ldrh	r3, [r5, #12]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d908      	bls.n	8006ac8 <_fwalk_sglue+0x34>
 8006ab6:	220e      	movs	r2, #14
 8006ab8:	5eab      	ldrsh	r3, [r5, r2]
 8006aba:	3301      	adds	r3, #1
 8006abc:	d004      	beq.n	8006ac8 <_fwalk_sglue+0x34>
 8006abe:	0029      	movs	r1, r5
 8006ac0:	9800      	ldr	r0, [sp, #0]
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	4798      	blx	r3
 8006ac6:	4306      	orrs	r6, r0
 8006ac8:	3568      	adds	r5, #104	; 0x68
 8006aca:	e7ea      	b.n	8006aa2 <_fwalk_sglue+0xe>

08006acc <siprintf>:
 8006acc:	b40e      	push	{r1, r2, r3}
 8006ace:	b500      	push	{lr}
 8006ad0:	490b      	ldr	r1, [pc, #44]	; (8006b00 <siprintf+0x34>)
 8006ad2:	b09c      	sub	sp, #112	; 0x70
 8006ad4:	ab1d      	add	r3, sp, #116	; 0x74
 8006ad6:	9002      	str	r0, [sp, #8]
 8006ad8:	9006      	str	r0, [sp, #24]
 8006ada:	9107      	str	r1, [sp, #28]
 8006adc:	9104      	str	r1, [sp, #16]
 8006ade:	4809      	ldr	r0, [pc, #36]	; (8006b04 <siprintf+0x38>)
 8006ae0:	4909      	ldr	r1, [pc, #36]	; (8006b08 <siprintf+0x3c>)
 8006ae2:	cb04      	ldmia	r3!, {r2}
 8006ae4:	9105      	str	r1, [sp, #20]
 8006ae6:	6800      	ldr	r0, [r0, #0]
 8006ae8:	a902      	add	r1, sp, #8
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f002 fc68 	bl	80093c0 <_svfiprintf_r>
 8006af0:	2200      	movs	r2, #0
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	b01c      	add	sp, #112	; 0x70
 8006af8:	bc08      	pop	{r3}
 8006afa:	b003      	add	sp, #12
 8006afc:	4718      	bx	r3
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	7fffffff 	.word	0x7fffffff
 8006b04:	20000064 	.word	0x20000064
 8006b08:	ffff0208 	.word	0xffff0208

08006b0c <__sread>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	000c      	movs	r4, r1
 8006b10:	250e      	movs	r5, #14
 8006b12:	5f49      	ldrsh	r1, [r1, r5]
 8006b14:	f000 f878 	bl	8006c08 <_read_r>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	db03      	blt.n	8006b24 <__sread+0x18>
 8006b1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b1e:	181b      	adds	r3, r3, r0
 8006b20:	6563      	str	r3, [r4, #84]	; 0x54
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	4a02      	ldr	r2, [pc, #8]	; (8006b30 <__sread+0x24>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	e7f9      	b.n	8006b22 <__sread+0x16>
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	ffffefff 	.word	0xffffefff

08006b34 <__swrite>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	001f      	movs	r7, r3
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	0005      	movs	r5, r0
 8006b3c:	000c      	movs	r4, r1
 8006b3e:	0016      	movs	r6, r2
 8006b40:	05db      	lsls	r3, r3, #23
 8006b42:	d505      	bpl.n	8006b50 <__swrite+0x1c>
 8006b44:	230e      	movs	r3, #14
 8006b46:	5ec9      	ldrsh	r1, [r1, r3]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f000 f848 	bl	8006be0 <_lseek_r>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	4a05      	ldr	r2, [pc, #20]	; (8006b68 <__swrite+0x34>)
 8006b54:	0028      	movs	r0, r5
 8006b56:	4013      	ands	r3, r2
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	0032      	movs	r2, r6
 8006b5c:	230e      	movs	r3, #14
 8006b5e:	5ee1      	ldrsh	r1, [r4, r3]
 8006b60:	003b      	movs	r3, r7
 8006b62:	f000 f865 	bl	8006c30 <_write_r>
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b68:	ffffefff 	.word	0xffffefff

08006b6c <__sseek>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	000c      	movs	r4, r1
 8006b70:	250e      	movs	r5, #14
 8006b72:	5f49      	ldrsh	r1, [r1, r5]
 8006b74:	f000 f834 	bl	8006be0 <_lseek_r>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	1c42      	adds	r2, r0, #1
 8006b7c:	d103      	bne.n	8006b86 <__sseek+0x1a>
 8006b7e:	4a05      	ldr	r2, [pc, #20]	; (8006b94 <__sseek+0x28>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	81a3      	strh	r3, [r4, #12]
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	2280      	movs	r2, #128	; 0x80
 8006b88:	0152      	lsls	r2, r2, #5
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b90:	e7f8      	b.n	8006b84 <__sseek+0x18>
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	ffffefff 	.word	0xffffefff

08006b98 <__sclose>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	230e      	movs	r3, #14
 8006b9c:	5ec9      	ldrsh	r1, [r1, r3]
 8006b9e:	f000 f80d 	bl	8006bbc <_close_r>
 8006ba2:	bd10      	pop	{r4, pc}

08006ba4 <memset>:
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	1882      	adds	r2, r0, r2
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d100      	bne.n	8006bae <memset+0xa>
 8006bac:	4770      	bx	lr
 8006bae:	7019      	strb	r1, [r3, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	e7f9      	b.n	8006ba8 <memset+0x4>

08006bb4 <_localeconv_r>:
 8006bb4:	4800      	ldr	r0, [pc, #0]	; (8006bb8 <_localeconv_r+0x4>)
 8006bb6:	4770      	bx	lr
 8006bb8:	20000158 	.word	0x20000158

08006bbc <_close_r>:
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	4d06      	ldr	r5, [pc, #24]	; (8006bdc <_close_r+0x20>)
 8006bc2:	0004      	movs	r4, r0
 8006bc4:	0008      	movs	r0, r1
 8006bc6:	602b      	str	r3, [r5, #0]
 8006bc8:	f7fc f881 	bl	8002cce <_close>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d103      	bne.n	8006bd8 <_close_r+0x1c>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d000      	beq.n	8006bd8 <_close_r+0x1c>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	200003fc 	.word	0x200003fc

08006be0 <_lseek_r>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	0004      	movs	r4, r0
 8006be4:	0008      	movs	r0, r1
 8006be6:	0011      	movs	r1, r2
 8006be8:	001a      	movs	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	4d05      	ldr	r5, [pc, #20]	; (8006c04 <_lseek_r+0x24>)
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fc f88e 	bl	8002d10 <_lseek>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d103      	bne.n	8006c00 <_lseek_r+0x20>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d000      	beq.n	8006c00 <_lseek_r+0x20>
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	200003fc 	.word	0x200003fc

08006c08 <_read_r>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	0004      	movs	r4, r0
 8006c0c:	0008      	movs	r0, r1
 8006c0e:	0011      	movs	r1, r2
 8006c10:	001a      	movs	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	4d05      	ldr	r5, [pc, #20]	; (8006c2c <_read_r+0x24>)
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fc f820 	bl	8002c5c <_read>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d103      	bne.n	8006c28 <_read_r+0x20>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d000      	beq.n	8006c28 <_read_r+0x20>
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	200003fc 	.word	0x200003fc

08006c30 <_write_r>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	0004      	movs	r4, r0
 8006c34:	0008      	movs	r0, r1
 8006c36:	0011      	movs	r1, r2
 8006c38:	001a      	movs	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4d05      	ldr	r5, [pc, #20]	; (8006c54 <_write_r+0x24>)
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fc f829 	bl	8002c96 <_write>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d103      	bne.n	8006c50 <_write_r+0x20>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d000      	beq.n	8006c50 <_write_r+0x20>
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	200003fc 	.word	0x200003fc

08006c58 <__errno>:
 8006c58:	4b01      	ldr	r3, [pc, #4]	; (8006c60 <__errno+0x8>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	4770      	bx	lr
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	20000064 	.word	0x20000064

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	2600      	movs	r6, #0
 8006c68:	4c0c      	ldr	r4, [pc, #48]	; (8006c9c <__libc_init_array+0x38>)
 8006c6a:	4d0d      	ldr	r5, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6c:	1b64      	subs	r4, r4, r5
 8006c6e:	10a4      	asrs	r4, r4, #2
 8006c70:	42a6      	cmp	r6, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	2600      	movs	r6, #0
 8006c76:	f003 fc71 	bl	800a55c <_init>
 8006c7a:	4c0a      	ldr	r4, [pc, #40]	; (8006ca4 <__libc_init_array+0x40>)
 8006c7c:	4d0a      	ldr	r5, [pc, #40]	; (8006ca8 <__libc_init_array+0x44>)
 8006c7e:	1b64      	subs	r4, r4, r5
 8006c80:	10a4      	asrs	r4, r4, #2
 8006c82:	42a6      	cmp	r6, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	00b3      	lsls	r3, r6, #2
 8006c8a:	58eb      	ldr	r3, [r5, r3]
 8006c8c:	4798      	blx	r3
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	00b3      	lsls	r3, r6, #2
 8006c94:	58eb      	ldr	r3, [r5, r3]
 8006c96:	4798      	blx	r3
 8006c98:	3601      	adds	r6, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	0800aa58 	.word	0x0800aa58
 8006ca0:	0800aa58 	.word	0x0800aa58
 8006ca4:	0800aa5c 	.word	0x0800aa5c
 8006ca8:	0800aa58 	.word	0x0800aa58

08006cac <__retarget_lock_init_recursive>:
 8006cac:	4770      	bx	lr

08006cae <__retarget_lock_acquire_recursive>:
 8006cae:	4770      	bx	lr

08006cb0 <__retarget_lock_release_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <memchr>:
 8006cb2:	b2c9      	uxtb	r1, r1
 8006cb4:	1882      	adds	r2, r0, r2
 8006cb6:	4290      	cmp	r0, r2
 8006cb8:	d101      	bne.n	8006cbe <memchr+0xc>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	4770      	bx	lr
 8006cbe:	7803      	ldrb	r3, [r0, #0]
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	d0fb      	beq.n	8006cbc <memchr+0xa>
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	e7f6      	b.n	8006cb6 <memchr+0x4>

08006cc8 <nanf>:
 8006cc8:	4800      	ldr	r0, [pc, #0]	; (8006ccc <nanf+0x4>)
 8006cca:	4770      	bx	lr
 8006ccc:	7fc00000 	.word	0x7fc00000

08006cd0 <quorem>:
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	6902      	ldr	r2, [r0, #16]
 8006cd4:	690b      	ldr	r3, [r1, #16]
 8006cd6:	b089      	sub	sp, #36	; 0x24
 8006cd8:	0007      	movs	r7, r0
 8006cda:	9104      	str	r1, [sp, #16]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	db69      	blt.n	8006db6 <quorem+0xe6>
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	009c      	lsls	r4, r3, #2
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	000b      	movs	r3, r1
 8006cea:	3314      	adds	r3, #20
 8006cec:	9306      	str	r3, [sp, #24]
 8006cee:	191b      	adds	r3, r3, r4
 8006cf0:	9305      	str	r3, [sp, #20]
 8006cf2:	003b      	movs	r3, r7
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	9303      	str	r3, [sp, #12]
 8006cf8:	191c      	adds	r4, r3, r4
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	6826      	ldr	r6, [r4, #0]
 8006cfe:	681d      	ldr	r5, [r3, #0]
 8006d00:	0030      	movs	r0, r6
 8006d02:	3501      	adds	r5, #1
 8006d04:	0029      	movs	r1, r5
 8006d06:	f7f9 fa1b 	bl	8000140 <__udivsi3>
 8006d0a:	9002      	str	r0, [sp, #8]
 8006d0c:	42ae      	cmp	r6, r5
 8006d0e:	d329      	bcc.n	8006d64 <quorem+0x94>
 8006d10:	9b06      	ldr	r3, [sp, #24]
 8006d12:	2600      	movs	r6, #0
 8006d14:	469c      	mov	ip, r3
 8006d16:	9d03      	ldr	r5, [sp, #12]
 8006d18:	9606      	str	r6, [sp, #24]
 8006d1a:	4662      	mov	r2, ip
 8006d1c:	ca08      	ldmia	r2!, {r3}
 8006d1e:	6828      	ldr	r0, [r5, #0]
 8006d20:	4694      	mov	ip, r2
 8006d22:	9a02      	ldr	r2, [sp, #8]
 8006d24:	b299      	uxth	r1, r3
 8006d26:	4351      	muls	r1, r2
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	4353      	muls	r3, r2
 8006d2c:	1989      	adds	r1, r1, r6
 8006d2e:	0c0a      	lsrs	r2, r1, #16
 8006d30:	189b      	adds	r3, r3, r2
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	0c1e      	lsrs	r6, r3, #16
 8006d36:	9b06      	ldr	r3, [sp, #24]
 8006d38:	b282      	uxth	r2, r0
 8006d3a:	18d2      	adds	r2, r2, r3
 8006d3c:	466b      	mov	r3, sp
 8006d3e:	b289      	uxth	r1, r1
 8006d40:	8b9b      	ldrh	r3, [r3, #28]
 8006d42:	1a52      	subs	r2, r2, r1
 8006d44:	0c01      	lsrs	r1, r0, #16
 8006d46:	1ac9      	subs	r1, r1, r3
 8006d48:	1413      	asrs	r3, r2, #16
 8006d4a:	18cb      	adds	r3, r1, r3
 8006d4c:	1419      	asrs	r1, r3, #16
 8006d4e:	b292      	uxth	r2, r2
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	4313      	orrs	r3, r2
 8006d54:	c508      	stmia	r5!, {r3}
 8006d56:	9b05      	ldr	r3, [sp, #20]
 8006d58:	9106      	str	r1, [sp, #24]
 8006d5a:	4563      	cmp	r3, ip
 8006d5c:	d2dd      	bcs.n	8006d1a <quorem+0x4a>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d030      	beq.n	8006dc6 <quorem+0xf6>
 8006d64:	0038      	movs	r0, r7
 8006d66:	9904      	ldr	r1, [sp, #16]
 8006d68:	f001 fa2a 	bl	80081c0 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	db21      	blt.n	8006db4 <quorem+0xe4>
 8006d70:	0038      	movs	r0, r7
 8006d72:	2600      	movs	r6, #0
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	9c04      	ldr	r4, [sp, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	3014      	adds	r0, #20
 8006d7e:	3414      	adds	r4, #20
 8006d80:	6803      	ldr	r3, [r0, #0]
 8006d82:	cc02      	ldmia	r4!, {r1}
 8006d84:	b29d      	uxth	r5, r3
 8006d86:	19ad      	adds	r5, r5, r6
 8006d88:	b28a      	uxth	r2, r1
 8006d8a:	1aaa      	subs	r2, r5, r2
 8006d8c:	0c09      	lsrs	r1, r1, #16
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	1a5b      	subs	r3, r3, r1
 8006d92:	1411      	asrs	r1, r2, #16
 8006d94:	185b      	adds	r3, r3, r1
 8006d96:	141e      	asrs	r6, r3, #16
 8006d98:	b292      	uxth	r2, r2
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	c008      	stmia	r0!, {r3}
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	d2ec      	bcs.n	8006d80 <quorem+0xb0>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	9a03      	ldr	r2, [sp, #12]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	18d3      	adds	r3, r2, r3
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	d015      	beq.n	8006de0 <quorem+0x110>
 8006db4:	9802      	ldr	r0, [sp, #8]
 8006db6:	b009      	add	sp, #36	; 0x24
 8006db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <quorem+0xfe>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	3c04      	subs	r4, #4
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	d3f5      	bcc.n	8006dba <quorem+0xea>
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e7c7      	b.n	8006d64 <quorem+0x94>
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	d106      	bne.n	8006de8 <quorem+0x118>
 8006dda:	9a01      	ldr	r2, [sp, #4]
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	9201      	str	r2, [sp, #4]
 8006de0:	9a03      	ldr	r2, [sp, #12]
 8006de2:	3b04      	subs	r3, #4
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d3f5      	bcc.n	8006dd4 <quorem+0x104>
 8006de8:	9b01      	ldr	r3, [sp, #4]
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	e7e2      	b.n	8006db4 <quorem+0xe4>
	...

08006df0 <_dtoa_r>:
 8006df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df2:	0014      	movs	r4, r2
 8006df4:	001d      	movs	r5, r3
 8006df6:	69c6      	ldr	r6, [r0, #28]
 8006df8:	b09d      	sub	sp, #116	; 0x74
 8006dfa:	9408      	str	r4, [sp, #32]
 8006dfc:	9509      	str	r5, [sp, #36]	; 0x24
 8006dfe:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8006e00:	9004      	str	r0, [sp, #16]
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	d10f      	bne.n	8006e26 <_dtoa_r+0x36>
 8006e06:	2010      	movs	r0, #16
 8006e08:	f000 fe4a 	bl	8007aa0 <malloc>
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	1e02      	subs	r2, r0, #0
 8006e10:	61d8      	str	r0, [r3, #28]
 8006e12:	d104      	bne.n	8006e1e <_dtoa_r+0x2e>
 8006e14:	21ef      	movs	r1, #239	; 0xef
 8006e16:	4bc6      	ldr	r3, [pc, #792]	; (8007130 <_dtoa_r+0x340>)
 8006e18:	48c6      	ldr	r0, [pc, #792]	; (8007134 <_dtoa_r+0x344>)
 8006e1a:	f002 fccd 	bl	80097b8 <__assert_func>
 8006e1e:	6046      	str	r6, [r0, #4]
 8006e20:	6086      	str	r6, [r0, #8]
 8006e22:	6006      	str	r6, [r0, #0]
 8006e24:	60c6      	str	r6, [r0, #12]
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d00b      	beq.n	8006e48 <_dtoa_r+0x58>
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	2301      	movs	r3, #1
 8006e34:	4093      	lsls	r3, r2
 8006e36:	604a      	str	r2, [r1, #4]
 8006e38:	608b      	str	r3, [r1, #8]
 8006e3a:	9804      	ldr	r0, [sp, #16]
 8006e3c:	f000 ff32 	bl	8007ca4 <_Bfree>
 8006e40:	2200      	movs	r2, #0
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	da1e      	bge.n	8006e8a <_dtoa_r+0x9a>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	006b      	lsls	r3, r5, #1
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	9309      	str	r3, [sp, #36]	; 0x24
 8006e56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e58:	4bb7      	ldr	r3, [pc, #732]	; (8007138 <_dtoa_r+0x348>)
 8006e5a:	4ab7      	ldr	r2, [pc, #732]	; (8007138 <_dtoa_r+0x348>)
 8006e5c:	403b      	ands	r3, r7
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d116      	bne.n	8006e90 <_dtoa_r+0xa0>
 8006e62:	4bb6      	ldr	r3, [pc, #728]	; (800713c <_dtoa_r+0x34c>)
 8006e64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	033b      	lsls	r3, r7, #12
 8006e6a:	0b1b      	lsrs	r3, r3, #12
 8006e6c:	4323      	orrs	r3, r4
 8006e6e:	d101      	bne.n	8006e74 <_dtoa_r+0x84>
 8006e70:	f000 fdb5 	bl	80079de <_dtoa_r+0xbee>
 8006e74:	4bb2      	ldr	r3, [pc, #712]	; (8007140 <_dtoa_r+0x350>)
 8006e76:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d002      	beq.n	8006e84 <_dtoa_r+0x94>
 8006e7e:	4bb1      	ldr	r3, [pc, #708]	; (8007144 <_dtoa_r+0x354>)
 8006e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	9806      	ldr	r0, [sp, #24]
 8006e86:	b01d      	add	sp, #116	; 0x74
 8006e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	e7e2      	b.n	8006e56 <_dtoa_r+0x66>
 8006e90:	9a08      	ldr	r2, [sp, #32]
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	9210      	str	r2, [sp, #64]	; 0x40
 8006e96:	9311      	str	r3, [sp, #68]	; 0x44
 8006e98:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f7f9 fad4 	bl	800044c <__aeabi_dcmpeq>
 8006ea4:	1e06      	subs	r6, r0, #0
 8006ea6:	d009      	beq.n	8006ebc <_dtoa_r+0xcc>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	4ba6      	ldr	r3, [pc, #664]	; (8007148 <_dtoa_r+0x358>)
 8006eb0:	9306      	str	r3, [sp, #24]
 8006eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0e5      	beq.n	8006e84 <_dtoa_r+0x94>
 8006eb8:	4ba4      	ldr	r3, [pc, #656]	; (800714c <_dtoa_r+0x35c>)
 8006eba:	e7e1      	b.n	8006e80 <_dtoa_r+0x90>
 8006ebc:	ab1a      	add	r3, sp, #104	; 0x68
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	ab1b      	add	r3, sp, #108	; 0x6c
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	9804      	ldr	r0, [sp, #16]
 8006ec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eca:	f001 fa95 	bl	80083f8 <__d2b>
 8006ece:	007a      	lsls	r2, r7, #1
 8006ed0:	9005      	str	r0, [sp, #20]
 8006ed2:	0d52      	lsrs	r2, r2, #21
 8006ed4:	d100      	bne.n	8006ed8 <_dtoa_r+0xe8>
 8006ed6:	e07b      	b.n	8006fd0 <_dtoa_r+0x1e0>
 8006ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eda:	9617      	str	r6, [sp, #92]	; 0x5c
 8006edc:	0319      	lsls	r1, r3, #12
 8006ede:	4b9c      	ldr	r3, [pc, #624]	; (8007150 <_dtoa_r+0x360>)
 8006ee0:	0b09      	lsrs	r1, r1, #12
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	499b      	ldr	r1, [pc, #620]	; (8007154 <_dtoa_r+0x364>)
 8006ee6:	1857      	adds	r7, r2, r1
 8006ee8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006eea:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006eec:	0019      	movs	r1, r3
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4b99      	ldr	r3, [pc, #612]	; (8007158 <_dtoa_r+0x368>)
 8006ef2:	f7fa fe7f 	bl	8001bf4 <__aeabi_dsub>
 8006ef6:	4a99      	ldr	r2, [pc, #612]	; (800715c <_dtoa_r+0x36c>)
 8006ef8:	4b99      	ldr	r3, [pc, #612]	; (8007160 <_dtoa_r+0x370>)
 8006efa:	f7fa fbb9 	bl	8001670 <__aeabi_dmul>
 8006efe:	4a99      	ldr	r2, [pc, #612]	; (8007164 <_dtoa_r+0x374>)
 8006f00:	4b99      	ldr	r3, [pc, #612]	; (8007168 <_dtoa_r+0x378>)
 8006f02:	f7f9 fc5b 	bl	80007bc <__aeabi_dadd>
 8006f06:	0004      	movs	r4, r0
 8006f08:	0038      	movs	r0, r7
 8006f0a:	000d      	movs	r5, r1
 8006f0c:	f7fb fa48 	bl	80023a0 <__aeabi_i2d>
 8006f10:	4a96      	ldr	r2, [pc, #600]	; (800716c <_dtoa_r+0x37c>)
 8006f12:	4b97      	ldr	r3, [pc, #604]	; (8007170 <_dtoa_r+0x380>)
 8006f14:	f7fa fbac 	bl	8001670 <__aeabi_dmul>
 8006f18:	0002      	movs	r2, r0
 8006f1a:	000b      	movs	r3, r1
 8006f1c:	0020      	movs	r0, r4
 8006f1e:	0029      	movs	r1, r5
 8006f20:	f7f9 fc4c 	bl	80007bc <__aeabi_dadd>
 8006f24:	0004      	movs	r4, r0
 8006f26:	000d      	movs	r5, r1
 8006f28:	f7fb fa04 	bl	8002334 <__aeabi_d2iz>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	9003      	str	r0, [sp, #12]
 8006f30:	2300      	movs	r3, #0
 8006f32:	0020      	movs	r0, r4
 8006f34:	0029      	movs	r1, r5
 8006f36:	f7f9 fa8f 	bl	8000458 <__aeabi_dcmplt>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d00b      	beq.n	8006f56 <_dtoa_r+0x166>
 8006f3e:	9803      	ldr	r0, [sp, #12]
 8006f40:	f7fb fa2e 	bl	80023a0 <__aeabi_i2d>
 8006f44:	002b      	movs	r3, r5
 8006f46:	0022      	movs	r2, r4
 8006f48:	f7f9 fa80 	bl	800044c <__aeabi_dcmpeq>
 8006f4c:	4243      	negs	r3, r0
 8006f4e:	4158      	adcs	r0, r3
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	1a1b      	subs	r3, r3, r0
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	2301      	movs	r3, #1
 8006f58:	9316      	str	r3, [sp, #88]	; 0x58
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	2b16      	cmp	r3, #22
 8006f5e:	d810      	bhi.n	8006f82 <_dtoa_r+0x192>
 8006f60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006f62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006f64:	9a03      	ldr	r2, [sp, #12]
 8006f66:	4b83      	ldr	r3, [pc, #524]	; (8007174 <_dtoa_r+0x384>)
 8006f68:	00d2      	lsls	r2, r2, #3
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f7f9 fa72 	bl	8000458 <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d047      	beq.n	8007008 <_dtoa_r+0x218>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9316      	str	r3, [sp, #88]	; 0x58
 8006f82:	2200      	movs	r2, #0
 8006f84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006f86:	920a      	str	r2, [sp, #40]	; 0x28
 8006f88:	1bdb      	subs	r3, r3, r7
 8006f8a:	1e5a      	subs	r2, r3, #1
 8006f8c:	d53e      	bpl.n	800700c <_dtoa_r+0x21c>
 8006f8e:	2201      	movs	r2, #1
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	930a      	str	r3, [sp, #40]	; 0x28
 8006f94:	2300      	movs	r3, #0
 8006f96:	930c      	str	r3, [sp, #48]	; 0x30
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db38      	blt.n	8007010 <_dtoa_r+0x220>
 8006f9e:	9a03      	ldr	r2, [sp, #12]
 8006fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fa2:	4694      	mov	ip, r2
 8006fa4:	4463      	add	r3, ip
 8006fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006fac:	930d      	str	r3, [sp, #52]	; 0x34
 8006fae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fb0:	2401      	movs	r4, #1
 8006fb2:	2b09      	cmp	r3, #9
 8006fb4:	d867      	bhi.n	8007086 <_dtoa_r+0x296>
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	dd02      	ble.n	8006fc0 <_dtoa_r+0x1d0>
 8006fba:	2400      	movs	r4, #0
 8006fbc:	3b04      	subs	r3, #4
 8006fbe:	9322      	str	r3, [sp, #136]	; 0x88
 8006fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fc2:	1e98      	subs	r0, r3, #2
 8006fc4:	2803      	cmp	r0, #3
 8006fc6:	d867      	bhi.n	8007098 <_dtoa_r+0x2a8>
 8006fc8:	f7f9 f8a6 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006fcc:	5b383a2b 	.word	0x5b383a2b
 8006fd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fd2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8006fd4:	18f6      	adds	r6, r6, r3
 8006fd6:	4b68      	ldr	r3, [pc, #416]	; (8007178 <_dtoa_r+0x388>)
 8006fd8:	18f2      	adds	r2, r6, r3
 8006fda:	2a20      	cmp	r2, #32
 8006fdc:	dd0f      	ble.n	8006ffe <_dtoa_r+0x20e>
 8006fde:	2340      	movs	r3, #64	; 0x40
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	409f      	lsls	r7, r3
 8006fe4:	4b65      	ldr	r3, [pc, #404]	; (800717c <_dtoa_r+0x38c>)
 8006fe6:	0038      	movs	r0, r7
 8006fe8:	18f3      	adds	r3, r6, r3
 8006fea:	40dc      	lsrs	r4, r3
 8006fec:	4320      	orrs	r0, r4
 8006fee:	f7fb fa07 	bl	8002400 <__aeabi_ui2d>
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4b62      	ldr	r3, [pc, #392]	; (8007180 <_dtoa_r+0x390>)
 8006ff6:	1e77      	subs	r7, r6, #1
 8006ff8:	18cb      	adds	r3, r1, r3
 8006ffa:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ffc:	e776      	b.n	8006eec <_dtoa_r+0xfc>
 8006ffe:	2320      	movs	r3, #32
 8007000:	0020      	movs	r0, r4
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	4098      	lsls	r0, r3
 8007006:	e7f2      	b.n	8006fee <_dtoa_r+0x1fe>
 8007008:	9016      	str	r0, [sp, #88]	; 0x58
 800700a:	e7ba      	b.n	8006f82 <_dtoa_r+0x192>
 800700c:	920c      	str	r2, [sp, #48]	; 0x30
 800700e:	e7c3      	b.n	8006f98 <_dtoa_r+0x1a8>
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	9a03      	ldr	r2, [sp, #12]
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	930a      	str	r3, [sp, #40]	; 0x28
 8007018:	4253      	negs	r3, r2
 800701a:	930d      	str	r3, [sp, #52]	; 0x34
 800701c:	2300      	movs	r3, #0
 800701e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007020:	e7c5      	b.n	8006fae <_dtoa_r+0x1be>
 8007022:	2300      	movs	r3, #0
 8007024:	930f      	str	r3, [sp, #60]	; 0x3c
 8007026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007028:	930b      	str	r3, [sp, #44]	; 0x2c
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc13      	bgt.n	8007058 <_dtoa_r+0x268>
 8007030:	2301      	movs	r3, #1
 8007032:	001a      	movs	r2, r3
 8007034:	930b      	str	r3, [sp, #44]	; 0x2c
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	9223      	str	r2, [sp, #140]	; 0x8c
 800703a:	e00d      	b.n	8007058 <_dtoa_r+0x268>
 800703c:	2301      	movs	r3, #1
 800703e:	e7f1      	b.n	8007024 <_dtoa_r+0x234>
 8007040:	2300      	movs	r3, #0
 8007042:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007044:	930f      	str	r3, [sp, #60]	; 0x3c
 8007046:	4694      	mov	ip, r2
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	4463      	add	r3, ip
 800704c:	930b      	str	r3, [sp, #44]	; 0x2c
 800704e:	3301      	adds	r3, #1
 8007050:	9307      	str	r3, [sp, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc00      	bgt.n	8007058 <_dtoa_r+0x268>
 8007056:	2301      	movs	r3, #1
 8007058:	9a04      	ldr	r2, [sp, #16]
 800705a:	2100      	movs	r1, #0
 800705c:	69d0      	ldr	r0, [r2, #28]
 800705e:	2204      	movs	r2, #4
 8007060:	0015      	movs	r5, r2
 8007062:	3514      	adds	r5, #20
 8007064:	429d      	cmp	r5, r3
 8007066:	d91b      	bls.n	80070a0 <_dtoa_r+0x2b0>
 8007068:	6041      	str	r1, [r0, #4]
 800706a:	9804      	ldr	r0, [sp, #16]
 800706c:	f000 fdd6 	bl	8007c1c <_Balloc>
 8007070:	9006      	str	r0, [sp, #24]
 8007072:	2800      	cmp	r0, #0
 8007074:	d117      	bne.n	80070a6 <_dtoa_r+0x2b6>
 8007076:	21b0      	movs	r1, #176	; 0xb0
 8007078:	4b42      	ldr	r3, [pc, #264]	; (8007184 <_dtoa_r+0x394>)
 800707a:	482e      	ldr	r0, [pc, #184]	; (8007134 <_dtoa_r+0x344>)
 800707c:	9a06      	ldr	r2, [sp, #24]
 800707e:	31ff      	adds	r1, #255	; 0xff
 8007080:	e6cb      	b.n	8006e1a <_dtoa_r+0x2a>
 8007082:	2301      	movs	r3, #1
 8007084:	e7dd      	b.n	8007042 <_dtoa_r+0x252>
 8007086:	2300      	movs	r3, #0
 8007088:	940f      	str	r4, [sp, #60]	; 0x3c
 800708a:	9322      	str	r3, [sp, #136]	; 0x88
 800708c:	3b01      	subs	r3, #1
 800708e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007090:	9307      	str	r3, [sp, #28]
 8007092:	2200      	movs	r2, #0
 8007094:	3313      	adds	r3, #19
 8007096:	e7cf      	b.n	8007038 <_dtoa_r+0x248>
 8007098:	2301      	movs	r3, #1
 800709a:	930f      	str	r3, [sp, #60]	; 0x3c
 800709c:	3b02      	subs	r3, #2
 800709e:	e7f6      	b.n	800708e <_dtoa_r+0x29e>
 80070a0:	3101      	adds	r1, #1
 80070a2:	0052      	lsls	r2, r2, #1
 80070a4:	e7dc      	b.n	8007060 <_dtoa_r+0x270>
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	9a06      	ldr	r2, [sp, #24]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	9b07      	ldr	r3, [sp, #28]
 80070b0:	2b0e      	cmp	r3, #14
 80070b2:	d900      	bls.n	80070b6 <_dtoa_r+0x2c6>
 80070b4:	e0e5      	b.n	8007282 <_dtoa_r+0x492>
 80070b6:	2c00      	cmp	r4, #0
 80070b8:	d100      	bne.n	80070bc <_dtoa_r+0x2cc>
 80070ba:	e0e2      	b.n	8007282 <_dtoa_r+0x492>
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd64      	ble.n	800718c <_dtoa_r+0x39c>
 80070c2:	210f      	movs	r1, #15
 80070c4:	9a03      	ldr	r2, [sp, #12]
 80070c6:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <_dtoa_r+0x384>)
 80070c8:	400a      	ands	r2, r1
 80070ca:	00d2      	lsls	r2, r2, #3
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	681e      	ldr	r6, [r3, #0]
 80070d0:	685f      	ldr	r7, [r3, #4]
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	2402      	movs	r4, #2
 80070d6:	111d      	asrs	r5, r3, #4
 80070d8:	05db      	lsls	r3, r3, #23
 80070da:	d50a      	bpl.n	80070f2 <_dtoa_r+0x302>
 80070dc:	4b2a      	ldr	r3, [pc, #168]	; (8007188 <_dtoa_r+0x398>)
 80070de:	400d      	ands	r5, r1
 80070e0:	6a1a      	ldr	r2, [r3, #32]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80070e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070e8:	f7f9 fec8 	bl	8000e7c <__aeabi_ddiv>
 80070ec:	9008      	str	r0, [sp, #32]
 80070ee:	9109      	str	r1, [sp, #36]	; 0x24
 80070f0:	3401      	adds	r4, #1
 80070f2:	4b25      	ldr	r3, [pc, #148]	; (8007188 <_dtoa_r+0x398>)
 80070f4:	930e      	str	r3, [sp, #56]	; 0x38
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	d108      	bne.n	800710c <_dtoa_r+0x31c>
 80070fa:	9808      	ldr	r0, [sp, #32]
 80070fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fe:	0032      	movs	r2, r6
 8007100:	003b      	movs	r3, r7
 8007102:	f7f9 febb 	bl	8000e7c <__aeabi_ddiv>
 8007106:	9008      	str	r0, [sp, #32]
 8007108:	9109      	str	r1, [sp, #36]	; 0x24
 800710a:	e05a      	b.n	80071c2 <_dtoa_r+0x3d2>
 800710c:	2301      	movs	r3, #1
 800710e:	421d      	tst	r5, r3
 8007110:	d009      	beq.n	8007126 <_dtoa_r+0x336>
 8007112:	18e4      	adds	r4, r4, r3
 8007114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007116:	0030      	movs	r0, r6
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0039      	movs	r1, r7
 800711e:	f7fa faa7 	bl	8001670 <__aeabi_dmul>
 8007122:	0006      	movs	r6, r0
 8007124:	000f      	movs	r7, r1
 8007126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007128:	106d      	asrs	r5, r5, #1
 800712a:	3308      	adds	r3, #8
 800712c:	e7e2      	b.n	80070f4 <_dtoa_r+0x304>
 800712e:	46c0      	nop			; (mov r8, r8)
 8007130:	0800a66a 	.word	0x0800a66a
 8007134:	0800a681 	.word	0x0800a681
 8007138:	7ff00000 	.word	0x7ff00000
 800713c:	0000270f 	.word	0x0000270f
 8007140:	0800a666 	.word	0x0800a666
 8007144:	0800a669 	.word	0x0800a669
 8007148:	0800a634 	.word	0x0800a634
 800714c:	0800a635 	.word	0x0800a635
 8007150:	3ff00000 	.word	0x3ff00000
 8007154:	fffffc01 	.word	0xfffffc01
 8007158:	3ff80000 	.word	0x3ff80000
 800715c:	636f4361 	.word	0x636f4361
 8007160:	3fd287a7 	.word	0x3fd287a7
 8007164:	8b60c8b3 	.word	0x8b60c8b3
 8007168:	3fc68a28 	.word	0x3fc68a28
 800716c:	509f79fb 	.word	0x509f79fb
 8007170:	3fd34413 	.word	0x3fd34413
 8007174:	0800a770 	.word	0x0800a770
 8007178:	00000432 	.word	0x00000432
 800717c:	00000412 	.word	0x00000412
 8007180:	fe100000 	.word	0xfe100000
 8007184:	0800a6d9 	.word	0x0800a6d9
 8007188:	0800a748 	.word	0x0800a748
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	2402      	movs	r4, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d016      	beq.n	80071c2 <_dtoa_r+0x3d2>
 8007194:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007196:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007198:	220f      	movs	r2, #15
 800719a:	425d      	negs	r5, r3
 800719c:	402a      	ands	r2, r5
 800719e:	4bdd      	ldr	r3, [pc, #884]	; (8007514 <_dtoa_r+0x724>)
 80071a0:	00d2      	lsls	r2, r2, #3
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f7fa fa62 	bl	8001670 <__aeabi_dmul>
 80071ac:	2701      	movs	r7, #1
 80071ae:	2300      	movs	r3, #0
 80071b0:	9008      	str	r0, [sp, #32]
 80071b2:	9109      	str	r1, [sp, #36]	; 0x24
 80071b4:	4ed8      	ldr	r6, [pc, #864]	; (8007518 <_dtoa_r+0x728>)
 80071b6:	112d      	asrs	r5, r5, #4
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	d000      	beq.n	80071be <_dtoa_r+0x3ce>
 80071bc:	e091      	b.n	80072e2 <_dtoa_r+0x4f2>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1a1      	bne.n	8007106 <_dtoa_r+0x316>
 80071c2:	9e08      	ldr	r6, [sp, #32]
 80071c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d100      	bne.n	80071ce <_dtoa_r+0x3de>
 80071cc:	e094      	b.n	80072f8 <_dtoa_r+0x508>
 80071ce:	2200      	movs	r2, #0
 80071d0:	0030      	movs	r0, r6
 80071d2:	0039      	movs	r1, r7
 80071d4:	4bd1      	ldr	r3, [pc, #836]	; (800751c <_dtoa_r+0x72c>)
 80071d6:	f7f9 f93f 	bl	8000458 <__aeabi_dcmplt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d100      	bne.n	80071e0 <_dtoa_r+0x3f0>
 80071de:	e08b      	b.n	80072f8 <_dtoa_r+0x508>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d100      	bne.n	80071e8 <_dtoa_r+0x3f8>
 80071e6:	e087      	b.n	80072f8 <_dtoa_r+0x508>
 80071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dd45      	ble.n	800727a <_dtoa_r+0x48a>
 80071ee:	9b03      	ldr	r3, [sp, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	3b01      	subs	r3, #1
 80071f4:	930e      	str	r3, [sp, #56]	; 0x38
 80071f6:	0030      	movs	r0, r6
 80071f8:	4bc9      	ldr	r3, [pc, #804]	; (8007520 <_dtoa_r+0x730>)
 80071fa:	0039      	movs	r1, r7
 80071fc:	f7fa fa38 	bl	8001670 <__aeabi_dmul>
 8007200:	9008      	str	r0, [sp, #32]
 8007202:	9109      	str	r1, [sp, #36]	; 0x24
 8007204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007206:	3401      	adds	r4, #1
 8007208:	0020      	movs	r0, r4
 800720a:	9e08      	ldr	r6, [sp, #32]
 800720c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800720e:	9312      	str	r3, [sp, #72]	; 0x48
 8007210:	f7fb f8c6 	bl	80023a0 <__aeabi_i2d>
 8007214:	0032      	movs	r2, r6
 8007216:	003b      	movs	r3, r7
 8007218:	f7fa fa2a 	bl	8001670 <__aeabi_dmul>
 800721c:	2200      	movs	r2, #0
 800721e:	4bc1      	ldr	r3, [pc, #772]	; (8007524 <_dtoa_r+0x734>)
 8007220:	f7f9 facc 	bl	80007bc <__aeabi_dadd>
 8007224:	4ac0      	ldr	r2, [pc, #768]	; (8007528 <_dtoa_r+0x738>)
 8007226:	9014      	str	r0, [sp, #80]	; 0x50
 8007228:	9115      	str	r1, [sp, #84]	; 0x54
 800722a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800722c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800722e:	4694      	mov	ip, r2
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	9409      	str	r4, [sp, #36]	; 0x24
 8007234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007236:	4463      	add	r3, ip
 8007238:	9318      	str	r3, [sp, #96]	; 0x60
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800723e:	2b00      	cmp	r3, #0
 8007240:	d15e      	bne.n	8007300 <_dtoa_r+0x510>
 8007242:	2200      	movs	r2, #0
 8007244:	4bb9      	ldr	r3, [pc, #740]	; (800752c <_dtoa_r+0x73c>)
 8007246:	0030      	movs	r0, r6
 8007248:	0039      	movs	r1, r7
 800724a:	f7fa fcd3 	bl	8001bf4 <__aeabi_dsub>
 800724e:	9a08      	ldr	r2, [sp, #32]
 8007250:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007252:	0004      	movs	r4, r0
 8007254:	000d      	movs	r5, r1
 8007256:	f7f9 f913 	bl	8000480 <__aeabi_dcmpgt>
 800725a:	2800      	cmp	r0, #0
 800725c:	d000      	beq.n	8007260 <_dtoa_r+0x470>
 800725e:	e2b3      	b.n	80077c8 <_dtoa_r+0x9d8>
 8007260:	48b3      	ldr	r0, [pc, #716]	; (8007530 <_dtoa_r+0x740>)
 8007262:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007264:	4684      	mov	ip, r0
 8007266:	4461      	add	r1, ip
 8007268:	000b      	movs	r3, r1
 800726a:	0020      	movs	r0, r4
 800726c:	0029      	movs	r1, r5
 800726e:	9a08      	ldr	r2, [sp, #32]
 8007270:	f7f9 f8f2 	bl	8000458 <__aeabi_dcmplt>
 8007274:	2800      	cmp	r0, #0
 8007276:	d000      	beq.n	800727a <_dtoa_r+0x48a>
 8007278:	e2a3      	b.n	80077c2 <_dtoa_r+0x9d2>
 800727a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800727c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800727e:	9308      	str	r3, [sp, #32]
 8007280:	9409      	str	r4, [sp, #36]	; 0x24
 8007282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007284:	2b00      	cmp	r3, #0
 8007286:	da00      	bge.n	800728a <_dtoa_r+0x49a>
 8007288:	e179      	b.n	800757e <_dtoa_r+0x78e>
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	2a0e      	cmp	r2, #14
 800728e:	dd00      	ble.n	8007292 <_dtoa_r+0x4a2>
 8007290:	e175      	b.n	800757e <_dtoa_r+0x78e>
 8007292:	4ba0      	ldr	r3, [pc, #640]	; (8007514 <_dtoa_r+0x724>)
 8007294:	00d2      	lsls	r2, r2, #3
 8007296:	189b      	adds	r3, r3, r2
 8007298:	681e      	ldr	r6, [r3, #0]
 800729a:	685f      	ldr	r7, [r3, #4]
 800729c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	db00      	blt.n	80072a4 <_dtoa_r+0x4b4>
 80072a2:	e0e5      	b.n	8007470 <_dtoa_r+0x680>
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd00      	ble.n	80072ac <_dtoa_r+0x4bc>
 80072aa:	e0e1      	b.n	8007470 <_dtoa_r+0x680>
 80072ac:	d000      	beq.n	80072b0 <_dtoa_r+0x4c0>
 80072ae:	e288      	b.n	80077c2 <_dtoa_r+0x9d2>
 80072b0:	2200      	movs	r2, #0
 80072b2:	0030      	movs	r0, r6
 80072b4:	0039      	movs	r1, r7
 80072b6:	4b9d      	ldr	r3, [pc, #628]	; (800752c <_dtoa_r+0x73c>)
 80072b8:	f7fa f9da 	bl	8001670 <__aeabi_dmul>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	f7f9 f8e8 	bl	8000494 <__aeabi_dcmpge>
 80072c4:	9e07      	ldr	r6, [sp, #28]
 80072c6:	0037      	movs	r7, r6
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d000      	beq.n	80072ce <_dtoa_r+0x4de>
 80072cc:	e25f      	b.n	800778e <_dtoa_r+0x99e>
 80072ce:	9b06      	ldr	r3, [sp, #24]
 80072d0:	9a06      	ldr	r2, [sp, #24]
 80072d2:	3301      	adds	r3, #1
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	2331      	movs	r3, #49	; 0x31
 80072d8:	7013      	strb	r3, [r2, #0]
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	e25a      	b.n	8007798 <_dtoa_r+0x9a8>
 80072e2:	423d      	tst	r5, r7
 80072e4:	d005      	beq.n	80072f2 <_dtoa_r+0x502>
 80072e6:	6832      	ldr	r2, [r6, #0]
 80072e8:	6873      	ldr	r3, [r6, #4]
 80072ea:	f7fa f9c1 	bl	8001670 <__aeabi_dmul>
 80072ee:	003b      	movs	r3, r7
 80072f0:	3401      	adds	r4, #1
 80072f2:	106d      	asrs	r5, r5, #1
 80072f4:	3608      	adds	r6, #8
 80072f6:	e75f      	b.n	80071b8 <_dtoa_r+0x3c8>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	930e      	str	r3, [sp, #56]	; 0x38
 80072fc:	9b07      	ldr	r3, [sp, #28]
 80072fe:	e783      	b.n	8007208 <_dtoa_r+0x418>
 8007300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007302:	4b84      	ldr	r3, [pc, #528]	; (8007514 <_dtoa_r+0x724>)
 8007304:	3a01      	subs	r2, #1
 8007306:	00d2      	lsls	r2, r2, #3
 8007308:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800730a:	189b      	adds	r3, r3, r2
 800730c:	9c08      	ldr	r4, [sp, #32]
 800730e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2900      	cmp	r1, #0
 8007316:	d051      	beq.n	80073bc <_dtoa_r+0x5cc>
 8007318:	2000      	movs	r0, #0
 800731a:	4986      	ldr	r1, [pc, #536]	; (8007534 <_dtoa_r+0x744>)
 800731c:	f7f9 fdae 	bl	8000e7c <__aeabi_ddiv>
 8007320:	0022      	movs	r2, r4
 8007322:	002b      	movs	r3, r5
 8007324:	f7fa fc66 	bl	8001bf4 <__aeabi_dsub>
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	0004      	movs	r4, r0
 800732c:	4694      	mov	ip, r2
 800732e:	000d      	movs	r5, r1
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	9314      	str	r3, [sp, #80]	; 0x50
 8007334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007336:	4463      	add	r3, ip
 8007338:	9318      	str	r3, [sp, #96]	; 0x60
 800733a:	0039      	movs	r1, r7
 800733c:	0030      	movs	r0, r6
 800733e:	f7fa fff9 	bl	8002334 <__aeabi_d2iz>
 8007342:	9012      	str	r0, [sp, #72]	; 0x48
 8007344:	f7fb f82c 	bl	80023a0 <__aeabi_i2d>
 8007348:	0002      	movs	r2, r0
 800734a:	000b      	movs	r3, r1
 800734c:	0030      	movs	r0, r6
 800734e:	0039      	movs	r1, r7
 8007350:	f7fa fc50 	bl	8001bf4 <__aeabi_dsub>
 8007354:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007356:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007358:	3301      	adds	r3, #1
 800735a:	9308      	str	r3, [sp, #32]
 800735c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800735e:	0006      	movs	r6, r0
 8007360:	3330      	adds	r3, #48	; 0x30
 8007362:	7013      	strb	r3, [r2, #0]
 8007364:	0022      	movs	r2, r4
 8007366:	002b      	movs	r3, r5
 8007368:	000f      	movs	r7, r1
 800736a:	f7f9 f875 	bl	8000458 <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d174      	bne.n	800745c <_dtoa_r+0x66c>
 8007372:	0032      	movs	r2, r6
 8007374:	003b      	movs	r3, r7
 8007376:	2000      	movs	r0, #0
 8007378:	4968      	ldr	r1, [pc, #416]	; (800751c <_dtoa_r+0x72c>)
 800737a:	f7fa fc3b 	bl	8001bf4 <__aeabi_dsub>
 800737e:	0022      	movs	r2, r4
 8007380:	002b      	movs	r3, r5
 8007382:	f7f9 f869 	bl	8000458 <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d000      	beq.n	800738c <_dtoa_r+0x59c>
 800738a:	e0d7      	b.n	800753c <_dtoa_r+0x74c>
 800738c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800738e:	9a08      	ldr	r2, [sp, #32]
 8007390:	4293      	cmp	r3, r2
 8007392:	d100      	bne.n	8007396 <_dtoa_r+0x5a6>
 8007394:	e771      	b.n	800727a <_dtoa_r+0x48a>
 8007396:	2200      	movs	r2, #0
 8007398:	0020      	movs	r0, r4
 800739a:	0029      	movs	r1, r5
 800739c:	4b60      	ldr	r3, [pc, #384]	; (8007520 <_dtoa_r+0x730>)
 800739e:	f7fa f967 	bl	8001670 <__aeabi_dmul>
 80073a2:	4b5f      	ldr	r3, [pc, #380]	; (8007520 <_dtoa_r+0x730>)
 80073a4:	0004      	movs	r4, r0
 80073a6:	000d      	movs	r5, r1
 80073a8:	0030      	movs	r0, r6
 80073aa:	0039      	movs	r1, r7
 80073ac:	2200      	movs	r2, #0
 80073ae:	f7fa f95f 	bl	8001670 <__aeabi_dmul>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	0006      	movs	r6, r0
 80073b6:	000f      	movs	r7, r1
 80073b8:	9314      	str	r3, [sp, #80]	; 0x50
 80073ba:	e7be      	b.n	800733a <_dtoa_r+0x54a>
 80073bc:	0020      	movs	r0, r4
 80073be:	0029      	movs	r1, r5
 80073c0:	f7fa f956 	bl	8001670 <__aeabi_dmul>
 80073c4:	9a06      	ldr	r2, [sp, #24]
 80073c6:	9b06      	ldr	r3, [sp, #24]
 80073c8:	4694      	mov	ip, r2
 80073ca:	9308      	str	r3, [sp, #32]
 80073cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073ce:	9014      	str	r0, [sp, #80]	; 0x50
 80073d0:	9115      	str	r1, [sp, #84]	; 0x54
 80073d2:	4463      	add	r3, ip
 80073d4:	9319      	str	r3, [sp, #100]	; 0x64
 80073d6:	0030      	movs	r0, r6
 80073d8:	0039      	movs	r1, r7
 80073da:	f7fa ffab 	bl	8002334 <__aeabi_d2iz>
 80073de:	9018      	str	r0, [sp, #96]	; 0x60
 80073e0:	f7fa ffde 	bl	80023a0 <__aeabi_i2d>
 80073e4:	0002      	movs	r2, r0
 80073e6:	000b      	movs	r3, r1
 80073e8:	0030      	movs	r0, r6
 80073ea:	0039      	movs	r1, r7
 80073ec:	f7fa fc02 	bl	8001bf4 <__aeabi_dsub>
 80073f0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80073f2:	9b08      	ldr	r3, [sp, #32]
 80073f4:	3630      	adds	r6, #48	; 0x30
 80073f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073f8:	701e      	strb	r6, [r3, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	0004      	movs	r4, r0
 80073fe:	000d      	movs	r5, r1
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	4293      	cmp	r3, r2
 8007404:	d12d      	bne.n	8007462 <_dtoa_r+0x672>
 8007406:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007408:	9915      	ldr	r1, [sp, #84]	; 0x54
 800740a:	9a06      	ldr	r2, [sp, #24]
 800740c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800740e:	4694      	mov	ip, r2
 8007410:	4463      	add	r3, ip
 8007412:	2200      	movs	r2, #0
 8007414:	9308      	str	r3, [sp, #32]
 8007416:	4b47      	ldr	r3, [pc, #284]	; (8007534 <_dtoa_r+0x744>)
 8007418:	f7f9 f9d0 	bl	80007bc <__aeabi_dadd>
 800741c:	0002      	movs	r2, r0
 800741e:	000b      	movs	r3, r1
 8007420:	0020      	movs	r0, r4
 8007422:	0029      	movs	r1, r5
 8007424:	f7f9 f82c 	bl	8000480 <__aeabi_dcmpgt>
 8007428:	2800      	cmp	r0, #0
 800742a:	d000      	beq.n	800742e <_dtoa_r+0x63e>
 800742c:	e086      	b.n	800753c <_dtoa_r+0x74c>
 800742e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007432:	2000      	movs	r0, #0
 8007434:	493f      	ldr	r1, [pc, #252]	; (8007534 <_dtoa_r+0x744>)
 8007436:	f7fa fbdd 	bl	8001bf4 <__aeabi_dsub>
 800743a:	0002      	movs	r2, r0
 800743c:	000b      	movs	r3, r1
 800743e:	0020      	movs	r0, r4
 8007440:	0029      	movs	r1, r5
 8007442:	f7f9 f809 	bl	8000458 <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	d100      	bne.n	800744c <_dtoa_r+0x65c>
 800744a:	e716      	b.n	800727a <_dtoa_r+0x48a>
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	001a      	movs	r2, r3
 8007450:	3a01      	subs	r2, #1
 8007452:	9208      	str	r2, [sp, #32]
 8007454:	7812      	ldrb	r2, [r2, #0]
 8007456:	2a30      	cmp	r2, #48	; 0x30
 8007458:	d0f8      	beq.n	800744c <_dtoa_r+0x65c>
 800745a:	9308      	str	r3, [sp, #32]
 800745c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	e046      	b.n	80074f0 <_dtoa_r+0x700>
 8007462:	2200      	movs	r2, #0
 8007464:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <_dtoa_r+0x730>)
 8007466:	f7fa f903 	bl	8001670 <__aeabi_dmul>
 800746a:	0006      	movs	r6, r0
 800746c:	000f      	movs	r7, r1
 800746e:	e7b2      	b.n	80073d6 <_dtoa_r+0x5e6>
 8007470:	9b06      	ldr	r3, [sp, #24]
 8007472:	9a06      	ldr	r2, [sp, #24]
 8007474:	930a      	str	r3, [sp, #40]	; 0x28
 8007476:	9b07      	ldr	r3, [sp, #28]
 8007478:	9c08      	ldr	r4, [sp, #32]
 800747a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800747c:	3b01      	subs	r3, #1
 800747e:	189b      	adds	r3, r3, r2
 8007480:	930b      	str	r3, [sp, #44]	; 0x2c
 8007482:	0032      	movs	r2, r6
 8007484:	003b      	movs	r3, r7
 8007486:	0020      	movs	r0, r4
 8007488:	0029      	movs	r1, r5
 800748a:	f7f9 fcf7 	bl	8000e7c <__aeabi_ddiv>
 800748e:	f7fa ff51 	bl	8002334 <__aeabi_d2iz>
 8007492:	9007      	str	r0, [sp, #28]
 8007494:	f7fa ff84 	bl	80023a0 <__aeabi_i2d>
 8007498:	0032      	movs	r2, r6
 800749a:	003b      	movs	r3, r7
 800749c:	f7fa f8e8 	bl	8001670 <__aeabi_dmul>
 80074a0:	0002      	movs	r2, r0
 80074a2:	000b      	movs	r3, r1
 80074a4:	0020      	movs	r0, r4
 80074a6:	0029      	movs	r1, r5
 80074a8:	f7fa fba4 	bl	8001bf4 <__aeabi_dsub>
 80074ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ae:	001a      	movs	r2, r3
 80074b0:	3201      	adds	r2, #1
 80074b2:	920a      	str	r2, [sp, #40]	; 0x28
 80074b4:	9208      	str	r2, [sp, #32]
 80074b6:	9a07      	ldr	r2, [sp, #28]
 80074b8:	3230      	adds	r2, #48	; 0x30
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074be:	429a      	cmp	r2, r3
 80074c0:	d14f      	bne.n	8007562 <_dtoa_r+0x772>
 80074c2:	0002      	movs	r2, r0
 80074c4:	000b      	movs	r3, r1
 80074c6:	f7f9 f979 	bl	80007bc <__aeabi_dadd>
 80074ca:	0032      	movs	r2, r6
 80074cc:	003b      	movs	r3, r7
 80074ce:	0004      	movs	r4, r0
 80074d0:	000d      	movs	r5, r1
 80074d2:	f7f8 ffd5 	bl	8000480 <__aeabi_dcmpgt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	d12e      	bne.n	8007538 <_dtoa_r+0x748>
 80074da:	0032      	movs	r2, r6
 80074dc:	003b      	movs	r3, r7
 80074de:	0020      	movs	r0, r4
 80074e0:	0029      	movs	r1, r5
 80074e2:	f7f8 ffb3 	bl	800044c <__aeabi_dcmpeq>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d002      	beq.n	80074f0 <_dtoa_r+0x700>
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	07de      	lsls	r6, r3, #31
 80074ee:	d423      	bmi.n	8007538 <_dtoa_r+0x748>
 80074f0:	9905      	ldr	r1, [sp, #20]
 80074f2:	9804      	ldr	r0, [sp, #16]
 80074f4:	f000 fbd6 	bl	8007ca4 <_Bfree>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9a08      	ldr	r2, [sp, #32]
 80074fc:	7013      	strb	r3, [r2, #0]
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007502:	3301      	adds	r3, #1
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007508:	2b00      	cmp	r3, #0
 800750a:	d100      	bne.n	800750e <_dtoa_r+0x71e>
 800750c:	e4ba      	b.n	8006e84 <_dtoa_r+0x94>
 800750e:	9a08      	ldr	r2, [sp, #32]
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e4b7      	b.n	8006e84 <_dtoa_r+0x94>
 8007514:	0800a770 	.word	0x0800a770
 8007518:	0800a748 	.word	0x0800a748
 800751c:	3ff00000 	.word	0x3ff00000
 8007520:	40240000 	.word	0x40240000
 8007524:	401c0000 	.word	0x401c0000
 8007528:	fcc00000 	.word	0xfcc00000
 800752c:	40140000 	.word	0x40140000
 8007530:	7cc00000 	.word	0x7cc00000
 8007534:	3fe00000 	.word	0x3fe00000
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	930e      	str	r3, [sp, #56]	; 0x38
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	9308      	str	r3, [sp, #32]
 8007540:	3b01      	subs	r3, #1
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	2a39      	cmp	r2, #57	; 0x39
 8007546:	d108      	bne.n	800755a <_dtoa_r+0x76a>
 8007548:	9a06      	ldr	r2, [sp, #24]
 800754a:	429a      	cmp	r2, r3
 800754c:	d1f7      	bne.n	800753e <_dtoa_r+0x74e>
 800754e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007550:	9906      	ldr	r1, [sp, #24]
 8007552:	3201      	adds	r2, #1
 8007554:	920e      	str	r2, [sp, #56]	; 0x38
 8007556:	2230      	movs	r2, #48	; 0x30
 8007558:	700a      	strb	r2, [r1, #0]
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	3201      	adds	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e77c      	b.n	800745c <_dtoa_r+0x66c>
 8007562:	2200      	movs	r2, #0
 8007564:	4ba9      	ldr	r3, [pc, #676]	; (800780c <_dtoa_r+0xa1c>)
 8007566:	f7fa f883 	bl	8001670 <__aeabi_dmul>
 800756a:	2200      	movs	r2, #0
 800756c:	2300      	movs	r3, #0
 800756e:	0004      	movs	r4, r0
 8007570:	000d      	movs	r5, r1
 8007572:	f7f8 ff6b 	bl	800044c <__aeabi_dcmpeq>
 8007576:	2800      	cmp	r0, #0
 8007578:	d100      	bne.n	800757c <_dtoa_r+0x78c>
 800757a:	e782      	b.n	8007482 <_dtoa_r+0x692>
 800757c:	e7b8      	b.n	80074f0 <_dtoa_r+0x700>
 800757e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007580:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007582:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007584:	2f00      	cmp	r7, #0
 8007586:	d012      	beq.n	80075ae <_dtoa_r+0x7be>
 8007588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800758a:	2a01      	cmp	r2, #1
 800758c:	dc6e      	bgt.n	800766c <_dtoa_r+0x87c>
 800758e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007590:	2a00      	cmp	r2, #0
 8007592:	d065      	beq.n	8007660 <_dtoa_r+0x870>
 8007594:	4a9e      	ldr	r2, [pc, #632]	; (8007810 <_dtoa_r+0xa20>)
 8007596:	189b      	adds	r3, r3, r2
 8007598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800759a:	2101      	movs	r1, #1
 800759c:	18d2      	adds	r2, r2, r3
 800759e:	920a      	str	r2, [sp, #40]	; 0x28
 80075a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a2:	9804      	ldr	r0, [sp, #16]
 80075a4:	18d3      	adds	r3, r2, r3
 80075a6:	930c      	str	r3, [sp, #48]	; 0x30
 80075a8:	f000 fc78 	bl	8007e9c <__i2b>
 80075ac:	0007      	movs	r7, r0
 80075ae:	2c00      	cmp	r4, #0
 80075b0:	d00e      	beq.n	80075d0 <_dtoa_r+0x7e0>
 80075b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	dd0b      	ble.n	80075d0 <_dtoa_r+0x7e0>
 80075b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ba:	0023      	movs	r3, r4
 80075bc:	4294      	cmp	r4, r2
 80075be:	dd00      	ble.n	80075c2 <_dtoa_r+0x7d2>
 80075c0:	0013      	movs	r3, r2
 80075c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c4:	1ae4      	subs	r4, r4, r3
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	920a      	str	r2, [sp, #40]	; 0x28
 80075ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	930c      	str	r3, [sp, #48]	; 0x30
 80075d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01e      	beq.n	8007614 <_dtoa_r+0x824>
 80075d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d05c      	beq.n	8007696 <_dtoa_r+0x8a6>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	dd10      	ble.n	8007602 <_dtoa_r+0x812>
 80075e0:	0039      	movs	r1, r7
 80075e2:	002a      	movs	r2, r5
 80075e4:	9804      	ldr	r0, [sp, #16]
 80075e6:	f000 fd21 	bl	800802c <__pow5mult>
 80075ea:	9a05      	ldr	r2, [sp, #20]
 80075ec:	0001      	movs	r1, r0
 80075ee:	0007      	movs	r7, r0
 80075f0:	9804      	ldr	r0, [sp, #16]
 80075f2:	f000 fc6b 	bl	8007ecc <__multiply>
 80075f6:	0006      	movs	r6, r0
 80075f8:	9905      	ldr	r1, [sp, #20]
 80075fa:	9804      	ldr	r0, [sp, #16]
 80075fc:	f000 fb52 	bl	8007ca4 <_Bfree>
 8007600:	9605      	str	r6, [sp, #20]
 8007602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007604:	1b5a      	subs	r2, r3, r5
 8007606:	42ab      	cmp	r3, r5
 8007608:	d004      	beq.n	8007614 <_dtoa_r+0x824>
 800760a:	9905      	ldr	r1, [sp, #20]
 800760c:	9804      	ldr	r0, [sp, #16]
 800760e:	f000 fd0d 	bl	800802c <__pow5mult>
 8007612:	9005      	str	r0, [sp, #20]
 8007614:	2101      	movs	r1, #1
 8007616:	9804      	ldr	r0, [sp, #16]
 8007618:	f000 fc40 	bl	8007e9c <__i2b>
 800761c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800761e:	0006      	movs	r6, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	dd3a      	ble.n	800769a <_dtoa_r+0x8aa>
 8007624:	001a      	movs	r2, r3
 8007626:	0001      	movs	r1, r0
 8007628:	9804      	ldr	r0, [sp, #16]
 800762a:	f000 fcff 	bl	800802c <__pow5mult>
 800762e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007630:	0006      	movs	r6, r0
 8007632:	2500      	movs	r5, #0
 8007634:	2b01      	cmp	r3, #1
 8007636:	dc38      	bgt.n	80076aa <_dtoa_r+0x8ba>
 8007638:	2500      	movs	r5, #0
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	42ab      	cmp	r3, r5
 800763e:	d130      	bne.n	80076a2 <_dtoa_r+0x8b2>
 8007640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007642:	031b      	lsls	r3, r3, #12
 8007644:	42ab      	cmp	r3, r5
 8007646:	d12c      	bne.n	80076a2 <_dtoa_r+0x8b2>
 8007648:	4b72      	ldr	r3, [pc, #456]	; (8007814 <_dtoa_r+0xa24>)
 800764a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800764c:	4213      	tst	r3, r2
 800764e:	d028      	beq.n	80076a2 <_dtoa_r+0x8b2>
 8007650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007652:	3501      	adds	r5, #1
 8007654:	3301      	adds	r3, #1
 8007656:	930a      	str	r3, [sp, #40]	; 0x28
 8007658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800765a:	3301      	adds	r3, #1
 800765c:	930c      	str	r3, [sp, #48]	; 0x30
 800765e:	e020      	b.n	80076a2 <_dtoa_r+0x8b2>
 8007660:	2336      	movs	r3, #54	; 0x36
 8007662:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007664:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007666:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	e795      	b.n	8007598 <_dtoa_r+0x7a8>
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	1e5d      	subs	r5, r3, #1
 8007670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007672:	42ab      	cmp	r3, r5
 8007674:	db07      	blt.n	8007686 <_dtoa_r+0x896>
 8007676:	1b5d      	subs	r5, r3, r5
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800767c:	2b00      	cmp	r3, #0
 800767e:	da8b      	bge.n	8007598 <_dtoa_r+0x7a8>
 8007680:	1ae4      	subs	r4, r4, r3
 8007682:	2300      	movs	r3, #0
 8007684:	e788      	b.n	8007598 <_dtoa_r+0x7a8>
 8007686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800768a:	1aeb      	subs	r3, r5, r3
 800768c:	18d3      	adds	r3, r2, r3
 800768e:	950d      	str	r5, [sp, #52]	; 0x34
 8007690:	9313      	str	r3, [sp, #76]	; 0x4c
 8007692:	2500      	movs	r5, #0
 8007694:	e7f0      	b.n	8007678 <_dtoa_r+0x888>
 8007696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007698:	e7b7      	b.n	800760a <_dtoa_r+0x81a>
 800769a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800769c:	2500      	movs	r5, #0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	ddca      	ble.n	8007638 <_dtoa_r+0x848>
 80076a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076a4:	2001      	movs	r0, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <_dtoa_r+0x8cc>
 80076aa:	6933      	ldr	r3, [r6, #16]
 80076ac:	3303      	adds	r3, #3
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	18f3      	adds	r3, r6, r3
 80076b2:	6858      	ldr	r0, [r3, #4]
 80076b4:	f000 fbaa 	bl	8007e0c <__hi0bits>
 80076b8:	2320      	movs	r3, #32
 80076ba:	1a18      	subs	r0, r3, r0
 80076bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076be:	1818      	adds	r0, r3, r0
 80076c0:	0002      	movs	r2, r0
 80076c2:	231f      	movs	r3, #31
 80076c4:	401a      	ands	r2, r3
 80076c6:	4218      	tst	r0, r3
 80076c8:	d047      	beq.n	800775a <_dtoa_r+0x96a>
 80076ca:	3301      	adds	r3, #1
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	dd3f      	ble.n	8007752 <_dtoa_r+0x962>
 80076d2:	231c      	movs	r3, #28
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076d8:	18e4      	adds	r4, r4, r3
 80076da:	18d2      	adds	r2, r2, r3
 80076dc:	920a      	str	r2, [sp, #40]	; 0x28
 80076de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076e0:	18d3      	adds	r3, r2, r3
 80076e2:	930c      	str	r3, [sp, #48]	; 0x30
 80076e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	dd05      	ble.n	80076f6 <_dtoa_r+0x906>
 80076ea:	001a      	movs	r2, r3
 80076ec:	9905      	ldr	r1, [sp, #20]
 80076ee:	9804      	ldr	r0, [sp, #16]
 80076f0:	f000 fcf8 	bl	80080e4 <__lshift>
 80076f4:	9005      	str	r0, [sp, #20]
 80076f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd05      	ble.n	8007708 <_dtoa_r+0x918>
 80076fc:	0031      	movs	r1, r6
 80076fe:	001a      	movs	r2, r3
 8007700:	9804      	ldr	r0, [sp, #16]
 8007702:	f000 fcef 	bl	80080e4 <__lshift>
 8007706:	0006      	movs	r6, r0
 8007708:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800770a:	2b00      	cmp	r3, #0
 800770c:	d027      	beq.n	800775e <_dtoa_r+0x96e>
 800770e:	0031      	movs	r1, r6
 8007710:	9805      	ldr	r0, [sp, #20]
 8007712:	f000 fd55 	bl	80081c0 <__mcmp>
 8007716:	2800      	cmp	r0, #0
 8007718:	da21      	bge.n	800775e <_dtoa_r+0x96e>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	220a      	movs	r2, #10
 800771e:	3b01      	subs	r3, #1
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	9905      	ldr	r1, [sp, #20]
 8007724:	2300      	movs	r3, #0
 8007726:	9804      	ldr	r0, [sp, #16]
 8007728:	f000 fae0 	bl	8007cec <__multadd>
 800772c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800772e:	9005      	str	r0, [sp, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d100      	bne.n	8007736 <_dtoa_r+0x946>
 8007734:	e15d      	b.n	80079f2 <_dtoa_r+0xc02>
 8007736:	2300      	movs	r3, #0
 8007738:	0039      	movs	r1, r7
 800773a:	220a      	movs	r2, #10
 800773c:	9804      	ldr	r0, [sp, #16]
 800773e:	f000 fad5 	bl	8007cec <__multadd>
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	0007      	movs	r7, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc49      	bgt.n	80077de <_dtoa_r+0x9ee>
 800774a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800774c:	2b02      	cmp	r3, #2
 800774e:	dc0e      	bgt.n	800776e <_dtoa_r+0x97e>
 8007750:	e045      	b.n	80077de <_dtoa_r+0x9ee>
 8007752:	2b04      	cmp	r3, #4
 8007754:	d0c6      	beq.n	80076e4 <_dtoa_r+0x8f4>
 8007756:	331c      	adds	r3, #28
 8007758:	e7bd      	b.n	80076d6 <_dtoa_r+0x8e6>
 800775a:	0013      	movs	r3, r2
 800775c:	e7fb      	b.n	8007756 <_dtoa_r+0x966>
 800775e:	9b07      	ldr	r3, [sp, #28]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dc36      	bgt.n	80077d2 <_dtoa_r+0x9e2>
 8007764:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007766:	2b02      	cmp	r3, #2
 8007768:	dd33      	ble.n	80077d2 <_dtoa_r+0x9e2>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	930b      	str	r3, [sp, #44]	; 0x2c
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10c      	bne.n	800778e <_dtoa_r+0x99e>
 8007774:	0031      	movs	r1, r6
 8007776:	2205      	movs	r2, #5
 8007778:	9804      	ldr	r0, [sp, #16]
 800777a:	f000 fab7 	bl	8007cec <__multadd>
 800777e:	0006      	movs	r6, r0
 8007780:	0001      	movs	r1, r0
 8007782:	9805      	ldr	r0, [sp, #20]
 8007784:	f000 fd1c 	bl	80081c0 <__mcmp>
 8007788:	2800      	cmp	r0, #0
 800778a:	dd00      	ble.n	800778e <_dtoa_r+0x99e>
 800778c:	e59f      	b.n	80072ce <_dtoa_r+0x4de>
 800778e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007790:	43db      	mvns	r3, r3
 8007792:	9303      	str	r3, [sp, #12]
 8007794:	9b06      	ldr	r3, [sp, #24]
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	2500      	movs	r5, #0
 800779a:	0031      	movs	r1, r6
 800779c:	9804      	ldr	r0, [sp, #16]
 800779e:	f000 fa81 	bl	8007ca4 <_Bfree>
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	d100      	bne.n	80077a8 <_dtoa_r+0x9b8>
 80077a6:	e6a3      	b.n	80074f0 <_dtoa_r+0x700>
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	d005      	beq.n	80077b8 <_dtoa_r+0x9c8>
 80077ac:	42bd      	cmp	r5, r7
 80077ae:	d003      	beq.n	80077b8 <_dtoa_r+0x9c8>
 80077b0:	0029      	movs	r1, r5
 80077b2:	9804      	ldr	r0, [sp, #16]
 80077b4:	f000 fa76 	bl	8007ca4 <_Bfree>
 80077b8:	0039      	movs	r1, r7
 80077ba:	9804      	ldr	r0, [sp, #16]
 80077bc:	f000 fa72 	bl	8007ca4 <_Bfree>
 80077c0:	e696      	b.n	80074f0 <_dtoa_r+0x700>
 80077c2:	2600      	movs	r6, #0
 80077c4:	0037      	movs	r7, r6
 80077c6:	e7e2      	b.n	800778e <_dtoa_r+0x99e>
 80077c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	0037      	movs	r7, r6
 80077d0:	e57d      	b.n	80072ce <_dtoa_r+0x4de>
 80077d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d100      	bne.n	80077da <_dtoa_r+0x9ea>
 80077d8:	e0c3      	b.n	8007962 <_dtoa_r+0xb72>
 80077da:	9b07      	ldr	r3, [sp, #28]
 80077dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80077de:	2c00      	cmp	r4, #0
 80077e0:	dd05      	ble.n	80077ee <_dtoa_r+0x9fe>
 80077e2:	0039      	movs	r1, r7
 80077e4:	0022      	movs	r2, r4
 80077e6:	9804      	ldr	r0, [sp, #16]
 80077e8:	f000 fc7c 	bl	80080e4 <__lshift>
 80077ec:	0007      	movs	r7, r0
 80077ee:	0038      	movs	r0, r7
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	d024      	beq.n	800783e <_dtoa_r+0xa4e>
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	9804      	ldr	r0, [sp, #16]
 80077f8:	f000 fa10 	bl	8007c1c <_Balloc>
 80077fc:	1e04      	subs	r4, r0, #0
 80077fe:	d111      	bne.n	8007824 <_dtoa_r+0xa34>
 8007800:	0022      	movs	r2, r4
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <_dtoa_r+0xa28>)
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <_dtoa_r+0xa2c>)
 8007806:	4906      	ldr	r1, [pc, #24]	; (8007820 <_dtoa_r+0xa30>)
 8007808:	f7ff fb07 	bl	8006e1a <_dtoa_r+0x2a>
 800780c:	40240000 	.word	0x40240000
 8007810:	00000433 	.word	0x00000433
 8007814:	7ff00000 	.word	0x7ff00000
 8007818:	0800a6d9 	.word	0x0800a6d9
 800781c:	0800a681 	.word	0x0800a681
 8007820:	000002ef 	.word	0x000002ef
 8007824:	0039      	movs	r1, r7
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	310c      	adds	r1, #12
 800782a:	3202      	adds	r2, #2
 800782c:	0092      	lsls	r2, r2, #2
 800782e:	300c      	adds	r0, #12
 8007830:	f001 ffb2 	bl	8009798 <memcpy>
 8007834:	2201      	movs	r2, #1
 8007836:	0021      	movs	r1, r4
 8007838:	9804      	ldr	r0, [sp, #16]
 800783a:	f000 fc53 	bl	80080e4 <__lshift>
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	3b01      	subs	r3, #1
 8007846:	189b      	adds	r3, r3, r2
 8007848:	2201      	movs	r2, #1
 800784a:	003d      	movs	r5, r7
 800784c:	0007      	movs	r7, r0
 800784e:	930e      	str	r3, [sp, #56]	; 0x38
 8007850:	9b08      	ldr	r3, [sp, #32]
 8007852:	4013      	ands	r3, r2
 8007854:	930d      	str	r3, [sp, #52]	; 0x34
 8007856:	0031      	movs	r1, r6
 8007858:	9805      	ldr	r0, [sp, #20]
 800785a:	f7ff fa39 	bl	8006cd0 <quorem>
 800785e:	0029      	movs	r1, r5
 8007860:	0004      	movs	r4, r0
 8007862:	900b      	str	r0, [sp, #44]	; 0x2c
 8007864:	9805      	ldr	r0, [sp, #20]
 8007866:	f000 fcab 	bl	80081c0 <__mcmp>
 800786a:	003a      	movs	r2, r7
 800786c:	900c      	str	r0, [sp, #48]	; 0x30
 800786e:	0031      	movs	r1, r6
 8007870:	9804      	ldr	r0, [sp, #16]
 8007872:	f000 fcc1 	bl	80081f8 <__mdiff>
 8007876:	2201      	movs	r2, #1
 8007878:	68c3      	ldr	r3, [r0, #12]
 800787a:	3430      	adds	r4, #48	; 0x30
 800787c:	9008      	str	r0, [sp, #32]
 800787e:	920a      	str	r2, [sp, #40]	; 0x28
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <_dtoa_r+0xa9e>
 8007884:	0001      	movs	r1, r0
 8007886:	9805      	ldr	r0, [sp, #20]
 8007888:	f000 fc9a 	bl	80081c0 <__mcmp>
 800788c:	900a      	str	r0, [sp, #40]	; 0x28
 800788e:	9908      	ldr	r1, [sp, #32]
 8007890:	9804      	ldr	r0, [sp, #16]
 8007892:	f000 fa07 	bl	8007ca4 <_Bfree>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789a:	3301      	adds	r3, #1
 800789c:	9308      	str	r3, [sp, #32]
 800789e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078a0:	4313      	orrs	r3, r2
 80078a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d109      	bne.n	80078bc <_dtoa_r+0xacc>
 80078a8:	2c39      	cmp	r4, #57	; 0x39
 80078aa:	d022      	beq.n	80078f2 <_dtoa_r+0xb02>
 80078ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	dd01      	ble.n	80078b6 <_dtoa_r+0xac6>
 80078b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80078b4:	3431      	adds	r4, #49	; 0x31
 80078b6:	9b07      	ldr	r3, [sp, #28]
 80078b8:	701c      	strb	r4, [r3, #0]
 80078ba:	e76e      	b.n	800779a <_dtoa_r+0x9aa>
 80078bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078be:	2b00      	cmp	r3, #0
 80078c0:	db04      	blt.n	80078cc <_dtoa_r+0xadc>
 80078c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078c4:	4313      	orrs	r3, r2
 80078c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078c8:	4313      	orrs	r3, r2
 80078ca:	d11e      	bne.n	800790a <_dtoa_r+0xb1a>
 80078cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	ddf1      	ble.n	80078b6 <_dtoa_r+0xac6>
 80078d2:	9905      	ldr	r1, [sp, #20]
 80078d4:	2201      	movs	r2, #1
 80078d6:	9804      	ldr	r0, [sp, #16]
 80078d8:	f000 fc04 	bl	80080e4 <__lshift>
 80078dc:	0031      	movs	r1, r6
 80078de:	9005      	str	r0, [sp, #20]
 80078e0:	f000 fc6e 	bl	80081c0 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	dc02      	bgt.n	80078ee <_dtoa_r+0xafe>
 80078e8:	d1e5      	bne.n	80078b6 <_dtoa_r+0xac6>
 80078ea:	07e3      	lsls	r3, r4, #31
 80078ec:	d5e3      	bpl.n	80078b6 <_dtoa_r+0xac6>
 80078ee:	2c39      	cmp	r4, #57	; 0x39
 80078f0:	d1df      	bne.n	80078b2 <_dtoa_r+0xac2>
 80078f2:	2339      	movs	r3, #57	; 0x39
 80078f4:	9a07      	ldr	r2, [sp, #28]
 80078f6:	7013      	strb	r3, [r2, #0]
 80078f8:	9b08      	ldr	r3, [sp, #32]
 80078fa:	9308      	str	r3, [sp, #32]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	2a39      	cmp	r2, #57	; 0x39
 8007902:	d063      	beq.n	80079cc <_dtoa_r+0xbdc>
 8007904:	3201      	adds	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e747      	b.n	800779a <_dtoa_r+0x9aa>
 800790a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd03      	ble.n	8007918 <_dtoa_r+0xb28>
 8007910:	2c39      	cmp	r4, #57	; 0x39
 8007912:	d0ee      	beq.n	80078f2 <_dtoa_r+0xb02>
 8007914:	3401      	adds	r4, #1
 8007916:	e7ce      	b.n	80078b6 <_dtoa_r+0xac6>
 8007918:	9b07      	ldr	r3, [sp, #28]
 800791a:	9a07      	ldr	r2, [sp, #28]
 800791c:	701c      	strb	r4, [r3, #0]
 800791e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007920:	4293      	cmp	r3, r2
 8007922:	d03e      	beq.n	80079a2 <_dtoa_r+0xbb2>
 8007924:	2300      	movs	r3, #0
 8007926:	220a      	movs	r2, #10
 8007928:	9905      	ldr	r1, [sp, #20]
 800792a:	9804      	ldr	r0, [sp, #16]
 800792c:	f000 f9de 	bl	8007cec <__multadd>
 8007930:	2300      	movs	r3, #0
 8007932:	9005      	str	r0, [sp, #20]
 8007934:	220a      	movs	r2, #10
 8007936:	0029      	movs	r1, r5
 8007938:	9804      	ldr	r0, [sp, #16]
 800793a:	42bd      	cmp	r5, r7
 800793c:	d106      	bne.n	800794c <_dtoa_r+0xb5c>
 800793e:	f000 f9d5 	bl	8007cec <__multadd>
 8007942:	0005      	movs	r5, r0
 8007944:	0007      	movs	r7, r0
 8007946:	9b08      	ldr	r3, [sp, #32]
 8007948:	9307      	str	r3, [sp, #28]
 800794a:	e784      	b.n	8007856 <_dtoa_r+0xa66>
 800794c:	f000 f9ce 	bl	8007cec <__multadd>
 8007950:	0039      	movs	r1, r7
 8007952:	0005      	movs	r5, r0
 8007954:	2300      	movs	r3, #0
 8007956:	220a      	movs	r2, #10
 8007958:	9804      	ldr	r0, [sp, #16]
 800795a:	f000 f9c7 	bl	8007cec <__multadd>
 800795e:	0007      	movs	r7, r0
 8007960:	e7f1      	b.n	8007946 <_dtoa_r+0xb56>
 8007962:	9b07      	ldr	r3, [sp, #28]
 8007964:	930b      	str	r3, [sp, #44]	; 0x2c
 8007966:	2500      	movs	r5, #0
 8007968:	0031      	movs	r1, r6
 800796a:	9805      	ldr	r0, [sp, #20]
 800796c:	f7ff f9b0 	bl	8006cd0 <quorem>
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	3030      	adds	r0, #48	; 0x30
 8007974:	5558      	strb	r0, [r3, r5]
 8007976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007978:	3501      	adds	r5, #1
 800797a:	0004      	movs	r4, r0
 800797c:	42ab      	cmp	r3, r5
 800797e:	dd07      	ble.n	8007990 <_dtoa_r+0xba0>
 8007980:	2300      	movs	r3, #0
 8007982:	220a      	movs	r2, #10
 8007984:	9905      	ldr	r1, [sp, #20]
 8007986:	9804      	ldr	r0, [sp, #16]
 8007988:	f000 f9b0 	bl	8007cec <__multadd>
 800798c:	9005      	str	r0, [sp, #20]
 800798e:	e7eb      	b.n	8007968 <_dtoa_r+0xb78>
 8007990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007992:	2301      	movs	r3, #1
 8007994:	2a00      	cmp	r2, #0
 8007996:	dd00      	ble.n	800799a <_dtoa_r+0xbaa>
 8007998:	0013      	movs	r3, r2
 800799a:	2500      	movs	r5, #0
 800799c:	9a06      	ldr	r2, [sp, #24]
 800799e:	18d3      	adds	r3, r2, r3
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9905      	ldr	r1, [sp, #20]
 80079a4:	2201      	movs	r2, #1
 80079a6:	9804      	ldr	r0, [sp, #16]
 80079a8:	f000 fb9c 	bl	80080e4 <__lshift>
 80079ac:	0031      	movs	r1, r6
 80079ae:	9005      	str	r0, [sp, #20]
 80079b0:	f000 fc06 	bl	80081c0 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	dc9f      	bgt.n	80078f8 <_dtoa_r+0xb08>
 80079b8:	d101      	bne.n	80079be <_dtoa_r+0xbce>
 80079ba:	07e4      	lsls	r4, r4, #31
 80079bc:	d49c      	bmi.n	80078f8 <_dtoa_r+0xb08>
 80079be:	9b08      	ldr	r3, [sp, #32]
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	781a      	ldrb	r2, [r3, #0]
 80079c6:	2a30      	cmp	r2, #48	; 0x30
 80079c8:	d0fa      	beq.n	80079c0 <_dtoa_r+0xbd0>
 80079ca:	e6e6      	b.n	800779a <_dtoa_r+0x9aa>
 80079cc:	9a06      	ldr	r2, [sp, #24]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d193      	bne.n	80078fa <_dtoa_r+0xb0a>
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	2331      	movs	r3, #49	; 0x31
 80079da:	7013      	strb	r3, [r2, #0]
 80079dc:	e6dd      	b.n	800779a <_dtoa_r+0x9aa>
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <_dtoa_r+0xc14>)
 80079e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079e2:	9306      	str	r3, [sp, #24]
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <_dtoa_r+0xc18>)
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	d001      	beq.n	80079ee <_dtoa_r+0xbfe>
 80079ea:	f7ff fa49 	bl	8006e80 <_dtoa_r+0x90>
 80079ee:	f7ff fa49 	bl	8006e84 <_dtoa_r+0x94>
 80079f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dcb6      	bgt.n	8007966 <_dtoa_r+0xb76>
 80079f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	dd00      	ble.n	8007a00 <_dtoa_r+0xc10>
 80079fe:	e6b6      	b.n	800776e <_dtoa_r+0x97e>
 8007a00:	e7b1      	b.n	8007966 <_dtoa_r+0xb76>
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	0800a65d 	.word	0x0800a65d
 8007a08:	0800a665 	.word	0x0800a665

08007a0c <_free_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	0005      	movs	r5, r0
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d010      	beq.n	8007a36 <_free_r+0x2a>
 8007a14:	1f0c      	subs	r4, r1, #4
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	da00      	bge.n	8007a1e <_free_r+0x12>
 8007a1c:	18e4      	adds	r4, r4, r3
 8007a1e:	0028      	movs	r0, r5
 8007a20:	f000 f8ec 	bl	8007bfc <__malloc_lock>
 8007a24:	4a1d      	ldr	r2, [pc, #116]	; (8007a9c <_free_r+0x90>)
 8007a26:	6813      	ldr	r3, [r2, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <_free_r+0x2c>
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	6014      	str	r4, [r2, #0]
 8007a30:	0028      	movs	r0, r5
 8007a32:	f000 f8eb 	bl	8007c0c <__malloc_unlock>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d908      	bls.n	8007a4e <_free_r+0x42>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	1821      	adds	r1, r4, r0
 8007a40:	428b      	cmp	r3, r1
 8007a42:	d1f3      	bne.n	8007a2c <_free_r+0x20>
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	1809      	adds	r1, r1, r0
 8007a4a:	6021      	str	r1, [r4, #0]
 8007a4c:	e7ee      	b.n	8007a2c <_free_r+0x20>
 8007a4e:	001a      	movs	r2, r3
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <_free_r+0x4e>
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	d9f9      	bls.n	8007a4e <_free_r+0x42>
 8007a5a:	6811      	ldr	r1, [r2, #0]
 8007a5c:	1850      	adds	r0, r2, r1
 8007a5e:	42a0      	cmp	r0, r4
 8007a60:	d10b      	bne.n	8007a7a <_free_r+0x6e>
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	1809      	adds	r1, r1, r0
 8007a66:	1850      	adds	r0, r2, r1
 8007a68:	6011      	str	r1, [r2, #0]
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	d1e0      	bne.n	8007a30 <_free_r+0x24>
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	1841      	adds	r1, r0, r1
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	6053      	str	r3, [r2, #4]
 8007a78:	e7da      	b.n	8007a30 <_free_r+0x24>
 8007a7a:	42a0      	cmp	r0, r4
 8007a7c:	d902      	bls.n	8007a84 <_free_r+0x78>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	e7d5      	b.n	8007a30 <_free_r+0x24>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	d103      	bne.n	8007a94 <_free_r+0x88>
 8007a8c:	6819      	ldr	r1, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	1809      	adds	r1, r1, r0
 8007a92:	6021      	str	r1, [r4, #0]
 8007a94:	6063      	str	r3, [r4, #4]
 8007a96:	6054      	str	r4, [r2, #4]
 8007a98:	e7ca      	b.n	8007a30 <_free_r+0x24>
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	20000404 	.word	0x20000404

08007aa0 <malloc>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <malloc+0x10>)
 8007aa4:	0001      	movs	r1, r0
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	f000 f826 	bl	8007af8 <_malloc_r>
 8007aac:	bd10      	pop	{r4, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	20000064 	.word	0x20000064

08007ab4 <sbrk_aligned>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4e0f      	ldr	r6, [pc, #60]	; (8007af4 <sbrk_aligned+0x40>)
 8007ab8:	000d      	movs	r5, r1
 8007aba:	6831      	ldr	r1, [r6, #0]
 8007abc:	0004      	movs	r4, r0
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d102      	bne.n	8007ac8 <sbrk_aligned+0x14>
 8007ac2:	f001 fe57 	bl	8009774 <_sbrk_r>
 8007ac6:	6030      	str	r0, [r6, #0]
 8007ac8:	0029      	movs	r1, r5
 8007aca:	0020      	movs	r0, r4
 8007acc:	f001 fe52 	bl	8009774 <_sbrk_r>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d00a      	beq.n	8007aea <sbrk_aligned+0x36>
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	1cc5      	adds	r5, r0, #3
 8007ad8:	439d      	bics	r5, r3
 8007ada:	42a8      	cmp	r0, r5
 8007adc:	d007      	beq.n	8007aee <sbrk_aligned+0x3a>
 8007ade:	1a29      	subs	r1, r5, r0
 8007ae0:	0020      	movs	r0, r4
 8007ae2:	f001 fe47 	bl	8009774 <_sbrk_r>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d101      	bne.n	8007aee <sbrk_aligned+0x3a>
 8007aea:	2501      	movs	r5, #1
 8007aec:	426d      	negs	r5, r5
 8007aee:	0028      	movs	r0, r5
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	20000408 	.word	0x20000408

08007af8 <_malloc_r>:
 8007af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007afa:	2203      	movs	r2, #3
 8007afc:	1ccb      	adds	r3, r1, #3
 8007afe:	4393      	bics	r3, r2
 8007b00:	3308      	adds	r3, #8
 8007b02:	0006      	movs	r6, r0
 8007b04:	001f      	movs	r7, r3
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	d238      	bcs.n	8007b7c <_malloc_r+0x84>
 8007b0a:	270c      	movs	r7, #12
 8007b0c:	42b9      	cmp	r1, r7
 8007b0e:	d837      	bhi.n	8007b80 <_malloc_r+0x88>
 8007b10:	0030      	movs	r0, r6
 8007b12:	f000 f873 	bl	8007bfc <__malloc_lock>
 8007b16:	4b38      	ldr	r3, [pc, #224]	; (8007bf8 <_malloc_r+0x100>)
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	001c      	movs	r4, r3
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d133      	bne.n	8007b8a <_malloc_r+0x92>
 8007b22:	0039      	movs	r1, r7
 8007b24:	0030      	movs	r0, r6
 8007b26:	f7ff ffc5 	bl	8007ab4 <sbrk_aligned>
 8007b2a:	0004      	movs	r4, r0
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d15e      	bne.n	8007bee <_malloc_r+0xf6>
 8007b30:	9b00      	ldr	r3, [sp, #0]
 8007b32:	681c      	ldr	r4, [r3, #0]
 8007b34:	0025      	movs	r5, r4
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	d14e      	bne.n	8007bd8 <_malloc_r+0xe0>
 8007b3a:	2c00      	cmp	r4, #0
 8007b3c:	d051      	beq.n	8007be2 <_malloc_r+0xea>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	0029      	movs	r1, r5
 8007b42:	18e3      	adds	r3, r4, r3
 8007b44:	0030      	movs	r0, r6
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	f001 fe14 	bl	8009774 <_sbrk_r>
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	4283      	cmp	r3, r0
 8007b50:	d147      	bne.n	8007be2 <_malloc_r+0xea>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	0030      	movs	r0, r6
 8007b56:	1aff      	subs	r7, r7, r3
 8007b58:	0039      	movs	r1, r7
 8007b5a:	f7ff ffab 	bl	8007ab4 <sbrk_aligned>
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d03f      	beq.n	8007be2 <_malloc_r+0xea>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	19db      	adds	r3, r3, r7
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d040      	beq.n	8007bf2 <_malloc_r+0xfa>
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	42a2      	cmp	r2, r4
 8007b74:	d133      	bne.n	8007bde <_malloc_r+0xe6>
 8007b76:	2200      	movs	r2, #0
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	e014      	b.n	8007ba6 <_malloc_r+0xae>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dac5      	bge.n	8007b0c <_malloc_r+0x14>
 8007b80:	230c      	movs	r3, #12
 8007b82:	2500      	movs	r5, #0
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	0028      	movs	r0, r5
 8007b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	1bc9      	subs	r1, r1, r7
 8007b8e:	d420      	bmi.n	8007bd2 <_malloc_r+0xda>
 8007b90:	290b      	cmp	r1, #11
 8007b92:	d918      	bls.n	8007bc6 <_malloc_r+0xce>
 8007b94:	19e2      	adds	r2, r4, r7
 8007b96:	6027      	str	r7, [r4, #0]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d112      	bne.n	8007bc2 <_malloc_r+0xca>
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	6011      	str	r1, [r2, #0]
 8007ba4:	6053      	str	r3, [r2, #4]
 8007ba6:	0030      	movs	r0, r6
 8007ba8:	0025      	movs	r5, r4
 8007baa:	f000 f82f 	bl	8007c0c <__malloc_unlock>
 8007bae:	2207      	movs	r2, #7
 8007bb0:	350b      	adds	r5, #11
 8007bb2:	1d23      	adds	r3, r4, #4
 8007bb4:	4395      	bics	r5, r2
 8007bb6:	1aea      	subs	r2, r5, r3
 8007bb8:	429d      	cmp	r5, r3
 8007bba:	d0e4      	beq.n	8007b86 <_malloc_r+0x8e>
 8007bbc:	1b5b      	subs	r3, r3, r5
 8007bbe:	50a3      	str	r3, [r4, r2]
 8007bc0:	e7e1      	b.n	8007b86 <_malloc_r+0x8e>
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	e7ec      	b.n	8007ba0 <_malloc_r+0xa8>
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d1d5      	bne.n	8007b78 <_malloc_r+0x80>
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e7e9      	b.n	8007ba6 <_malloc_r+0xae>
 8007bd2:	0023      	movs	r3, r4
 8007bd4:	6864      	ldr	r4, [r4, #4]
 8007bd6:	e7a2      	b.n	8007b1e <_malloc_r+0x26>
 8007bd8:	002c      	movs	r4, r5
 8007bda:	686d      	ldr	r5, [r5, #4]
 8007bdc:	e7ab      	b.n	8007b36 <_malloc_r+0x3e>
 8007bde:	0013      	movs	r3, r2
 8007be0:	e7c4      	b.n	8007b6c <_malloc_r+0x74>
 8007be2:	230c      	movs	r3, #12
 8007be4:	0030      	movs	r0, r6
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	f000 f810 	bl	8007c0c <__malloc_unlock>
 8007bec:	e7cb      	b.n	8007b86 <_malloc_r+0x8e>
 8007bee:	6027      	str	r7, [r4, #0]
 8007bf0:	e7d9      	b.n	8007ba6 <_malloc_r+0xae>
 8007bf2:	605b      	str	r3, [r3, #4]
 8007bf4:	deff      	udf	#255	; 0xff
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	20000404 	.word	0x20000404

08007bfc <__malloc_lock>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4802      	ldr	r0, [pc, #8]	; (8007c08 <__malloc_lock+0xc>)
 8007c00:	f7ff f855 	bl	8006cae <__retarget_lock_acquire_recursive>
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	20000400 	.word	0x20000400

08007c0c <__malloc_unlock>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4802      	ldr	r0, [pc, #8]	; (8007c18 <__malloc_unlock+0xc>)
 8007c10:	f7ff f84e 	bl	8006cb0 <__retarget_lock_release_recursive>
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	20000400 	.word	0x20000400

08007c1c <_Balloc>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	69c5      	ldr	r5, [r0, #28]
 8007c20:	0006      	movs	r6, r0
 8007c22:	000c      	movs	r4, r1
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	d10e      	bne.n	8007c46 <_Balloc+0x2a>
 8007c28:	2010      	movs	r0, #16
 8007c2a:	f7ff ff39 	bl	8007aa0 <malloc>
 8007c2e:	1e02      	subs	r2, r0, #0
 8007c30:	61f0      	str	r0, [r6, #28]
 8007c32:	d104      	bne.n	8007c3e <_Balloc+0x22>
 8007c34:	216b      	movs	r1, #107	; 0x6b
 8007c36:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <_Balloc+0x80>)
 8007c38:	4819      	ldr	r0, [pc, #100]	; (8007ca0 <_Balloc+0x84>)
 8007c3a:	f001 fdbd 	bl	80097b8 <__assert_func>
 8007c3e:	6045      	str	r5, [r0, #4]
 8007c40:	6085      	str	r5, [r0, #8]
 8007c42:	6005      	str	r5, [r0, #0]
 8007c44:	60c5      	str	r5, [r0, #12]
 8007c46:	69f5      	ldr	r5, [r6, #28]
 8007c48:	68eb      	ldr	r3, [r5, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d013      	beq.n	8007c76 <_Balloc+0x5a>
 8007c4e:	69f3      	ldr	r3, [r6, #28]
 8007c50:	00a2      	lsls	r2, r4, #2
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	189b      	adds	r3, r3, r2
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d118      	bne.n	8007c8e <_Balloc+0x72>
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	000d      	movs	r5, r1
 8007c60:	40a5      	lsls	r5, r4
 8007c62:	1d6a      	adds	r2, r5, #5
 8007c64:	0030      	movs	r0, r6
 8007c66:	0092      	lsls	r2, r2, #2
 8007c68:	f001 fdc4 	bl	80097f4 <_calloc_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d00c      	beq.n	8007c8a <_Balloc+0x6e>
 8007c70:	6044      	str	r4, [r0, #4]
 8007c72:	6085      	str	r5, [r0, #8]
 8007c74:	e00d      	b.n	8007c92 <_Balloc+0x76>
 8007c76:	2221      	movs	r2, #33	; 0x21
 8007c78:	2104      	movs	r1, #4
 8007c7a:	0030      	movs	r0, r6
 8007c7c:	f001 fdba 	bl	80097f4 <_calloc_r>
 8007c80:	69f3      	ldr	r3, [r6, #28]
 8007c82:	60e8      	str	r0, [r5, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e1      	bne.n	8007c4e <_Balloc+0x32>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	bd70      	pop	{r4, r5, r6, pc}
 8007c8e:	6802      	ldr	r2, [r0, #0]
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	2300      	movs	r3, #0
 8007c94:	6103      	str	r3, [r0, #16]
 8007c96:	60c3      	str	r3, [r0, #12]
 8007c98:	e7f8      	b.n	8007c8c <_Balloc+0x70>
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	0800a66a 	.word	0x0800a66a
 8007ca0:	0800a6ea 	.word	0x0800a6ea

08007ca4 <_Bfree>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	69c6      	ldr	r6, [r0, #28]
 8007ca8:	0005      	movs	r5, r0
 8007caa:	000c      	movs	r4, r1
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	d10e      	bne.n	8007cce <_Bfree+0x2a>
 8007cb0:	2010      	movs	r0, #16
 8007cb2:	f7ff fef5 	bl	8007aa0 <malloc>
 8007cb6:	1e02      	subs	r2, r0, #0
 8007cb8:	61e8      	str	r0, [r5, #28]
 8007cba:	d104      	bne.n	8007cc6 <_Bfree+0x22>
 8007cbc:	218f      	movs	r1, #143	; 0x8f
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <_Bfree+0x40>)
 8007cc0:	4809      	ldr	r0, [pc, #36]	; (8007ce8 <_Bfree+0x44>)
 8007cc2:	f001 fd79 	bl	80097b8 <__assert_func>
 8007cc6:	6046      	str	r6, [r0, #4]
 8007cc8:	6086      	str	r6, [r0, #8]
 8007cca:	6006      	str	r6, [r0, #0]
 8007ccc:	60c6      	str	r6, [r0, #12]
 8007cce:	2c00      	cmp	r4, #0
 8007cd0:	d007      	beq.n	8007ce2 <_Bfree+0x3e>
 8007cd2:	69eb      	ldr	r3, [r5, #28]
 8007cd4:	6862      	ldr	r2, [r4, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	189b      	adds	r3, r3, r2
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	601c      	str	r4, [r3, #0]
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	0800a66a 	.word	0x0800a66a
 8007ce8:	0800a6ea 	.word	0x0800a6ea

08007cec <__multadd>:
 8007cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cee:	000e      	movs	r6, r1
 8007cf0:	9001      	str	r0, [sp, #4]
 8007cf2:	000c      	movs	r4, r1
 8007cf4:	001d      	movs	r5, r3
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	690f      	ldr	r7, [r1, #16]
 8007cfa:	3614      	adds	r6, #20
 8007cfc:	6833      	ldr	r3, [r6, #0]
 8007cfe:	3001      	adds	r0, #1
 8007d00:	b299      	uxth	r1, r3
 8007d02:	4351      	muls	r1, r2
 8007d04:	0c1b      	lsrs	r3, r3, #16
 8007d06:	4353      	muls	r3, r2
 8007d08:	1949      	adds	r1, r1, r5
 8007d0a:	0c0d      	lsrs	r5, r1, #16
 8007d0c:	195b      	adds	r3, r3, r5
 8007d0e:	0c1d      	lsrs	r5, r3, #16
 8007d10:	b289      	uxth	r1, r1
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	185b      	adds	r3, r3, r1
 8007d16:	c608      	stmia	r6!, {r3}
 8007d18:	4287      	cmp	r7, r0
 8007d1a:	dcef      	bgt.n	8007cfc <__multadd+0x10>
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	d022      	beq.n	8007d66 <__multadd+0x7a>
 8007d20:	68a3      	ldr	r3, [r4, #8]
 8007d22:	42bb      	cmp	r3, r7
 8007d24:	dc19      	bgt.n	8007d5a <__multadd+0x6e>
 8007d26:	6861      	ldr	r1, [r4, #4]
 8007d28:	9801      	ldr	r0, [sp, #4]
 8007d2a:	3101      	adds	r1, #1
 8007d2c:	f7ff ff76 	bl	8007c1c <_Balloc>
 8007d30:	1e06      	subs	r6, r0, #0
 8007d32:	d105      	bne.n	8007d40 <__multadd+0x54>
 8007d34:	0032      	movs	r2, r6
 8007d36:	21ba      	movs	r1, #186	; 0xba
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <__multadd+0x80>)
 8007d3a:	480d      	ldr	r0, [pc, #52]	; (8007d70 <__multadd+0x84>)
 8007d3c:	f001 fd3c 	bl	80097b8 <__assert_func>
 8007d40:	0021      	movs	r1, r4
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	310c      	adds	r1, #12
 8007d46:	3202      	adds	r2, #2
 8007d48:	0092      	lsls	r2, r2, #2
 8007d4a:	300c      	adds	r0, #12
 8007d4c:	f001 fd24 	bl	8009798 <memcpy>
 8007d50:	0021      	movs	r1, r4
 8007d52:	9801      	ldr	r0, [sp, #4]
 8007d54:	f7ff ffa6 	bl	8007ca4 <_Bfree>
 8007d58:	0034      	movs	r4, r6
 8007d5a:	1d3b      	adds	r3, r7, #4
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	18e3      	adds	r3, r4, r3
 8007d60:	605d      	str	r5, [r3, #4]
 8007d62:	1c7b      	adds	r3, r7, #1
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	0020      	movs	r0, r4
 8007d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	0800a6d9 	.word	0x0800a6d9
 8007d70:	0800a6ea 	.word	0x0800a6ea

08007d74 <__s2b>:
 8007d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d76:	0006      	movs	r6, r0
 8007d78:	0018      	movs	r0, r3
 8007d7a:	000c      	movs	r4, r1
 8007d7c:	3008      	adds	r0, #8
 8007d7e:	2109      	movs	r1, #9
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	0015      	movs	r5, r2
 8007d84:	f7f8 fa66 	bl	8000254 <__divsi3>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4283      	cmp	r3, r0
 8007d8e:	db0a      	blt.n	8007da6 <__s2b+0x32>
 8007d90:	0030      	movs	r0, r6
 8007d92:	f7ff ff43 	bl	8007c1c <_Balloc>
 8007d96:	1e01      	subs	r1, r0, #0
 8007d98:	d108      	bne.n	8007dac <__s2b+0x38>
 8007d9a:	000a      	movs	r2, r1
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <__s2b+0x90>)
 8007d9e:	481a      	ldr	r0, [pc, #104]	; (8007e08 <__s2b+0x94>)
 8007da0:	31d3      	adds	r1, #211	; 0xd3
 8007da2:	f001 fd09 	bl	80097b8 <__assert_func>
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	3101      	adds	r1, #1
 8007daa:	e7ef      	b.n	8007d8c <__s2b+0x18>
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	6143      	str	r3, [r0, #20]
 8007db0:	2301      	movs	r3, #1
 8007db2:	6103      	str	r3, [r0, #16]
 8007db4:	2d09      	cmp	r5, #9
 8007db6:	dd18      	ble.n	8007dea <__s2b+0x76>
 8007db8:	0023      	movs	r3, r4
 8007dba:	3309      	adds	r3, #9
 8007dbc:	001f      	movs	r7, r3
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	1964      	adds	r4, r4, r5
 8007dc2:	783b      	ldrb	r3, [r7, #0]
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	0030      	movs	r0, r6
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	f7ff ff8f 	bl	8007cec <__multadd>
 8007dce:	3701      	adds	r7, #1
 8007dd0:	0001      	movs	r1, r0
 8007dd2:	42a7      	cmp	r7, r4
 8007dd4:	d1f5      	bne.n	8007dc2 <__s2b+0x4e>
 8007dd6:	002c      	movs	r4, r5
 8007dd8:	9b00      	ldr	r3, [sp, #0]
 8007dda:	3c08      	subs	r4, #8
 8007ddc:	191c      	adds	r4, r3, r4
 8007dde:	002f      	movs	r7, r5
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	429f      	cmp	r7, r3
 8007de4:	db04      	blt.n	8007df0 <__s2b+0x7c>
 8007de6:	0008      	movs	r0, r1
 8007de8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dea:	2509      	movs	r5, #9
 8007dec:	340a      	adds	r4, #10
 8007dee:	e7f6      	b.n	8007dde <__s2b+0x6a>
 8007df0:	1b63      	subs	r3, r4, r5
 8007df2:	5ddb      	ldrb	r3, [r3, r7]
 8007df4:	220a      	movs	r2, #10
 8007df6:	0030      	movs	r0, r6
 8007df8:	3b30      	subs	r3, #48	; 0x30
 8007dfa:	f7ff ff77 	bl	8007cec <__multadd>
 8007dfe:	3701      	adds	r7, #1
 8007e00:	0001      	movs	r1, r0
 8007e02:	e7ed      	b.n	8007de0 <__s2b+0x6c>
 8007e04:	0800a6d9 	.word	0x0800a6d9
 8007e08:	0800a6ea 	.word	0x0800a6ea

08007e0c <__hi0bits>:
 8007e0c:	0003      	movs	r3, r0
 8007e0e:	0c02      	lsrs	r2, r0, #16
 8007e10:	2000      	movs	r0, #0
 8007e12:	4282      	cmp	r2, r0
 8007e14:	d101      	bne.n	8007e1a <__hi0bits+0xe>
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	3010      	adds	r0, #16
 8007e1a:	0e1a      	lsrs	r2, r3, #24
 8007e1c:	d101      	bne.n	8007e22 <__hi0bits+0x16>
 8007e1e:	3008      	adds	r0, #8
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	0f1a      	lsrs	r2, r3, #28
 8007e24:	d101      	bne.n	8007e2a <__hi0bits+0x1e>
 8007e26:	3004      	adds	r0, #4
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	0f9a      	lsrs	r2, r3, #30
 8007e2c:	d101      	bne.n	8007e32 <__hi0bits+0x26>
 8007e2e:	3002      	adds	r0, #2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	db03      	blt.n	8007e3e <__hi0bits+0x32>
 8007e36:	3001      	adds	r0, #1
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	d400      	bmi.n	8007e3e <__hi0bits+0x32>
 8007e3c:	2020      	movs	r0, #32
 8007e3e:	4770      	bx	lr

08007e40 <__lo0bits>:
 8007e40:	6803      	ldr	r3, [r0, #0]
 8007e42:	0001      	movs	r1, r0
 8007e44:	2207      	movs	r2, #7
 8007e46:	0018      	movs	r0, r3
 8007e48:	4010      	ands	r0, r2
 8007e4a:	4213      	tst	r3, r2
 8007e4c:	d00d      	beq.n	8007e6a <__lo0bits+0x2a>
 8007e4e:	3a06      	subs	r2, #6
 8007e50:	2000      	movs	r0, #0
 8007e52:	4213      	tst	r3, r2
 8007e54:	d105      	bne.n	8007e62 <__lo0bits+0x22>
 8007e56:	3002      	adds	r0, #2
 8007e58:	4203      	tst	r3, r0
 8007e5a:	d003      	beq.n	8007e64 <__lo0bits+0x24>
 8007e5c:	40d3      	lsrs	r3, r2
 8007e5e:	0010      	movs	r0, r2
 8007e60:	600b      	str	r3, [r1, #0]
 8007e62:	4770      	bx	lr
 8007e64:	089b      	lsrs	r3, r3, #2
 8007e66:	600b      	str	r3, [r1, #0]
 8007e68:	e7fb      	b.n	8007e62 <__lo0bits+0x22>
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	d101      	bne.n	8007e74 <__lo0bits+0x34>
 8007e70:	2010      	movs	r0, #16
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	d101      	bne.n	8007e7e <__lo0bits+0x3e>
 8007e7a:	3008      	adds	r0, #8
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	071a      	lsls	r2, r3, #28
 8007e80:	d101      	bne.n	8007e86 <__lo0bits+0x46>
 8007e82:	3004      	adds	r0, #4
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	079a      	lsls	r2, r3, #30
 8007e88:	d101      	bne.n	8007e8e <__lo0bits+0x4e>
 8007e8a:	3002      	adds	r0, #2
 8007e8c:	089b      	lsrs	r3, r3, #2
 8007e8e:	07da      	lsls	r2, r3, #31
 8007e90:	d4e9      	bmi.n	8007e66 <__lo0bits+0x26>
 8007e92:	3001      	adds	r0, #1
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	d1e6      	bne.n	8007e66 <__lo0bits+0x26>
 8007e98:	2020      	movs	r0, #32
 8007e9a:	e7e2      	b.n	8007e62 <__lo0bits+0x22>

08007e9c <__i2b>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	000c      	movs	r4, r1
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	f7ff febb 	bl	8007c1c <_Balloc>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d107      	bne.n	8007eba <__i2b+0x1e>
 8007eaa:	2146      	movs	r1, #70	; 0x46
 8007eac:	4c05      	ldr	r4, [pc, #20]	; (8007ec4 <__i2b+0x28>)
 8007eae:	0002      	movs	r2, r0
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <__i2b+0x2c>)
 8007eb2:	0020      	movs	r0, r4
 8007eb4:	31ff      	adds	r1, #255	; 0xff
 8007eb6:	f001 fc7f 	bl	80097b8 <__assert_func>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	6144      	str	r4, [r0, #20]
 8007ebe:	6103      	str	r3, [r0, #16]
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	0800a6ea 	.word	0x0800a6ea
 8007ec8:	0800a6d9 	.word	0x0800a6d9

08007ecc <__multiply>:
 8007ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ece:	0015      	movs	r5, r2
 8007ed0:	690a      	ldr	r2, [r1, #16]
 8007ed2:	692b      	ldr	r3, [r5, #16]
 8007ed4:	000c      	movs	r4, r1
 8007ed6:	b08b      	sub	sp, #44	; 0x2c
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	da01      	bge.n	8007ee0 <__multiply+0x14>
 8007edc:	002c      	movs	r4, r5
 8007ede:	000d      	movs	r5, r1
 8007ee0:	6927      	ldr	r7, [r4, #16]
 8007ee2:	692e      	ldr	r6, [r5, #16]
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	19bb      	adds	r3, r7, r6
 8007ee8:	9303      	str	r3, [sp, #12]
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	19ba      	adds	r2, r7, r6
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	da00      	bge.n	8007ef4 <__multiply+0x28>
 8007ef2:	3101      	adds	r1, #1
 8007ef4:	f7ff fe92 	bl	8007c1c <_Balloc>
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d106      	bne.n	8007f0c <__multiply+0x40>
 8007efe:	21b1      	movs	r1, #177	; 0xb1
 8007f00:	4b48      	ldr	r3, [pc, #288]	; (8008024 <__multiply+0x158>)
 8007f02:	4849      	ldr	r0, [pc, #292]	; (8008028 <__multiply+0x15c>)
 8007f04:	9a02      	ldr	r2, [sp, #8]
 8007f06:	0049      	lsls	r1, r1, #1
 8007f08:	f001 fc56 	bl	80097b8 <__assert_func>
 8007f0c:	9b02      	ldr	r3, [sp, #8]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	3314      	adds	r3, #20
 8007f12:	469c      	mov	ip, r3
 8007f14:	19bb      	adds	r3, r7, r6
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4463      	add	r3, ip
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	4663      	mov	r3, ip
 8007f1e:	9904      	ldr	r1, [sp, #16]
 8007f20:	428b      	cmp	r3, r1
 8007f22:	d32a      	bcc.n	8007f7a <__multiply+0xae>
 8007f24:	0023      	movs	r3, r4
 8007f26:	00bf      	lsls	r7, r7, #2
 8007f28:	3314      	adds	r3, #20
 8007f2a:	3514      	adds	r5, #20
 8007f2c:	9308      	str	r3, [sp, #32]
 8007f2e:	00b6      	lsls	r6, r6, #2
 8007f30:	19db      	adds	r3, r3, r7
 8007f32:	9305      	str	r3, [sp, #20]
 8007f34:	19ab      	adds	r3, r5, r6
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	2304      	movs	r3, #4
 8007f3a:	9306      	str	r3, [sp, #24]
 8007f3c:	0023      	movs	r3, r4
 8007f3e:	9a05      	ldr	r2, [sp, #20]
 8007f40:	3315      	adds	r3, #21
 8007f42:	9501      	str	r5, [sp, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d305      	bcc.n	8007f54 <__multiply+0x88>
 8007f48:	1b13      	subs	r3, r2, r4
 8007f4a:	3b15      	subs	r3, #21
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	3301      	adds	r3, #1
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d310      	bcc.n	8007f7e <__multiply+0xb2>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd05      	ble.n	8007f6e <__multiply+0xa2>
 8007f62:	9b04      	ldr	r3, [sp, #16]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d056      	beq.n	800801c <__multiply+0x150>
 8007f6e:	9b02      	ldr	r3, [sp, #8]
 8007f70:	9a03      	ldr	r2, [sp, #12]
 8007f72:	0018      	movs	r0, r3
 8007f74:	611a      	str	r2, [r3, #16]
 8007f76:	b00b      	add	sp, #44	; 0x2c
 8007f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7a:	c304      	stmia	r3!, {r2}
 8007f7c:	e7cf      	b.n	8007f1e <__multiply+0x52>
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	b280      	uxth	r0, r0
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d01e      	beq.n	8007fc6 <__multiply+0xfa>
 8007f88:	4667      	mov	r7, ip
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	9e08      	ldr	r6, [sp, #32]
 8007f8e:	ce02      	ldmia	r6!, {r1}
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9307      	str	r3, [sp, #28]
 8007f94:	b28b      	uxth	r3, r1
 8007f96:	4343      	muls	r3, r0
 8007f98:	001a      	movs	r2, r3
 8007f9a:	466b      	mov	r3, sp
 8007f9c:	8b9b      	ldrh	r3, [r3, #28]
 8007f9e:	18d3      	adds	r3, r2, r3
 8007fa0:	195b      	adds	r3, r3, r5
 8007fa2:	0c0d      	lsrs	r5, r1, #16
 8007fa4:	4345      	muls	r5, r0
 8007fa6:	9a07      	ldr	r2, [sp, #28]
 8007fa8:	0c11      	lsrs	r1, r2, #16
 8007faa:	1869      	adds	r1, r5, r1
 8007fac:	0c1a      	lsrs	r2, r3, #16
 8007fae:	188a      	adds	r2, r1, r2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	0c15      	lsrs	r5, r2, #16
 8007fb4:	0412      	lsls	r2, r2, #16
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	c704      	stmia	r7!, {r2}
 8007fbc:	42b3      	cmp	r3, r6
 8007fbe:	d8e6      	bhi.n	8007f8e <__multiply+0xc2>
 8007fc0:	4663      	mov	r3, ip
 8007fc2:	9a06      	ldr	r2, [sp, #24]
 8007fc4:	509d      	str	r5, [r3, r2]
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	0c00      	lsrs	r0, r0, #16
 8007fcc:	d020      	beq.n	8008010 <__multiply+0x144>
 8007fce:	4663      	mov	r3, ip
 8007fd0:	0025      	movs	r5, r4
 8007fd2:	4661      	mov	r1, ip
 8007fd4:	2700      	movs	r7, #0
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3514      	adds	r5, #20
 8007fda:	682a      	ldr	r2, [r5, #0]
 8007fdc:	680e      	ldr	r6, [r1, #0]
 8007fde:	b292      	uxth	r2, r2
 8007fe0:	4342      	muls	r2, r0
 8007fe2:	0c36      	lsrs	r6, r6, #16
 8007fe4:	1992      	adds	r2, r2, r6
 8007fe6:	19d2      	adds	r2, r2, r7
 8007fe8:	0416      	lsls	r6, r2, #16
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	431e      	orrs	r6, r3
 8007fee:	600e      	str	r6, [r1, #0]
 8007ff0:	cd40      	ldmia	r5!, {r6}
 8007ff2:	684b      	ldr	r3, [r1, #4]
 8007ff4:	0c36      	lsrs	r6, r6, #16
 8007ff6:	4346      	muls	r6, r0
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	0c12      	lsrs	r2, r2, #16
 8007ffc:	18f3      	adds	r3, r6, r3
 8007ffe:	189b      	adds	r3, r3, r2
 8008000:	9a05      	ldr	r2, [sp, #20]
 8008002:	0c1f      	lsrs	r7, r3, #16
 8008004:	3104      	adds	r1, #4
 8008006:	42aa      	cmp	r2, r5
 8008008:	d8e7      	bhi.n	8007fda <__multiply+0x10e>
 800800a:	4662      	mov	r2, ip
 800800c:	9906      	ldr	r1, [sp, #24]
 800800e:	5053      	str	r3, [r2, r1]
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	2304      	movs	r3, #4
 8008018:	449c      	add	ip, r3
 800801a:	e79b      	b.n	8007f54 <__multiply+0x88>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	e79b      	b.n	8007f5c <__multiply+0x90>
 8008024:	0800a6d9 	.word	0x0800a6d9
 8008028:	0800a6ea 	.word	0x0800a6ea

0800802c <__pow5mult>:
 800802c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800802e:	2303      	movs	r3, #3
 8008030:	0015      	movs	r5, r2
 8008032:	0007      	movs	r7, r0
 8008034:	000e      	movs	r6, r1
 8008036:	401a      	ands	r2, r3
 8008038:	421d      	tst	r5, r3
 800803a:	d008      	beq.n	800804e <__pow5mult+0x22>
 800803c:	4925      	ldr	r1, [pc, #148]	; (80080d4 <__pow5mult+0xa8>)
 800803e:	3a01      	subs	r2, #1
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	5852      	ldr	r2, [r2, r1]
 8008044:	2300      	movs	r3, #0
 8008046:	0031      	movs	r1, r6
 8008048:	f7ff fe50 	bl	8007cec <__multadd>
 800804c:	0006      	movs	r6, r0
 800804e:	10ad      	asrs	r5, r5, #2
 8008050:	d03d      	beq.n	80080ce <__pow5mult+0xa2>
 8008052:	69fc      	ldr	r4, [r7, #28]
 8008054:	2c00      	cmp	r4, #0
 8008056:	d10f      	bne.n	8008078 <__pow5mult+0x4c>
 8008058:	2010      	movs	r0, #16
 800805a:	f7ff fd21 	bl	8007aa0 <malloc>
 800805e:	1e02      	subs	r2, r0, #0
 8008060:	61f8      	str	r0, [r7, #28]
 8008062:	d105      	bne.n	8008070 <__pow5mult+0x44>
 8008064:	21b4      	movs	r1, #180	; 0xb4
 8008066:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <__pow5mult+0xac>)
 8008068:	481c      	ldr	r0, [pc, #112]	; (80080dc <__pow5mult+0xb0>)
 800806a:	31ff      	adds	r1, #255	; 0xff
 800806c:	f001 fba4 	bl	80097b8 <__assert_func>
 8008070:	6044      	str	r4, [r0, #4]
 8008072:	6084      	str	r4, [r0, #8]
 8008074:	6004      	str	r4, [r0, #0]
 8008076:	60c4      	str	r4, [r0, #12]
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	689c      	ldr	r4, [r3, #8]
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	2c00      	cmp	r4, #0
 8008080:	d108      	bne.n	8008094 <__pow5mult+0x68>
 8008082:	0038      	movs	r0, r7
 8008084:	4916      	ldr	r1, [pc, #88]	; (80080e0 <__pow5mult+0xb4>)
 8008086:	f7ff ff09 	bl	8007e9c <__i2b>
 800808a:	9b01      	ldr	r3, [sp, #4]
 800808c:	0004      	movs	r4, r0
 800808e:	6098      	str	r0, [r3, #8]
 8008090:	2300      	movs	r3, #0
 8008092:	6003      	str	r3, [r0, #0]
 8008094:	2301      	movs	r3, #1
 8008096:	421d      	tst	r5, r3
 8008098:	d00a      	beq.n	80080b0 <__pow5mult+0x84>
 800809a:	0031      	movs	r1, r6
 800809c:	0022      	movs	r2, r4
 800809e:	0038      	movs	r0, r7
 80080a0:	f7ff ff14 	bl	8007ecc <__multiply>
 80080a4:	0031      	movs	r1, r6
 80080a6:	9001      	str	r0, [sp, #4]
 80080a8:	0038      	movs	r0, r7
 80080aa:	f7ff fdfb 	bl	8007ca4 <_Bfree>
 80080ae:	9e01      	ldr	r6, [sp, #4]
 80080b0:	106d      	asrs	r5, r5, #1
 80080b2:	d00c      	beq.n	80080ce <__pow5mult+0xa2>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d107      	bne.n	80080ca <__pow5mult+0x9e>
 80080ba:	0022      	movs	r2, r4
 80080bc:	0021      	movs	r1, r4
 80080be:	0038      	movs	r0, r7
 80080c0:	f7ff ff04 	bl	8007ecc <__multiply>
 80080c4:	2300      	movs	r3, #0
 80080c6:	6020      	str	r0, [r4, #0]
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	0004      	movs	r4, r0
 80080cc:	e7e2      	b.n	8008094 <__pow5mult+0x68>
 80080ce:	0030      	movs	r0, r6
 80080d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	0800a838 	.word	0x0800a838
 80080d8:	0800a66a 	.word	0x0800a66a
 80080dc:	0800a6ea 	.word	0x0800a6ea
 80080e0:	00000271 	.word	0x00000271

080080e4 <__lshift>:
 80080e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e6:	000c      	movs	r4, r1
 80080e8:	0017      	movs	r7, r2
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	1155      	asrs	r5, r2, #5
 80080ee:	b087      	sub	sp, #28
 80080f0:	18eb      	adds	r3, r5, r3
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	3301      	adds	r3, #1
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6849      	ldr	r1, [r1, #4]
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	9004      	str	r0, [sp, #16]
 80080fe:	9a01      	ldr	r2, [sp, #4]
 8008100:	4293      	cmp	r3, r2
 8008102:	db10      	blt.n	8008126 <__lshift+0x42>
 8008104:	9804      	ldr	r0, [sp, #16]
 8008106:	f7ff fd89 	bl	8007c1c <_Balloc>
 800810a:	2300      	movs	r3, #0
 800810c:	0002      	movs	r2, r0
 800810e:	0006      	movs	r6, r0
 8008110:	0019      	movs	r1, r3
 8008112:	3214      	adds	r2, #20
 8008114:	4298      	cmp	r0, r3
 8008116:	d10c      	bne.n	8008132 <__lshift+0x4e>
 8008118:	31df      	adds	r1, #223	; 0xdf
 800811a:	0032      	movs	r2, r6
 800811c:	4b26      	ldr	r3, [pc, #152]	; (80081b8 <__lshift+0xd4>)
 800811e:	4827      	ldr	r0, [pc, #156]	; (80081bc <__lshift+0xd8>)
 8008120:	31ff      	adds	r1, #255	; 0xff
 8008122:	f001 fb49 	bl	80097b8 <__assert_func>
 8008126:	3101      	adds	r1, #1
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	e7e8      	b.n	80080fe <__lshift+0x1a>
 800812c:	0098      	lsls	r0, r3, #2
 800812e:	5011      	str	r1, [r2, r0]
 8008130:	3301      	adds	r3, #1
 8008132:	42ab      	cmp	r3, r5
 8008134:	dbfa      	blt.n	800812c <__lshift+0x48>
 8008136:	43eb      	mvns	r3, r5
 8008138:	17db      	asrs	r3, r3, #31
 800813a:	401d      	ands	r5, r3
 800813c:	211f      	movs	r1, #31
 800813e:	0023      	movs	r3, r4
 8008140:	0038      	movs	r0, r7
 8008142:	00ad      	lsls	r5, r5, #2
 8008144:	1955      	adds	r5, r2, r5
 8008146:	6922      	ldr	r2, [r4, #16]
 8008148:	3314      	adds	r3, #20
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	4008      	ands	r0, r1
 800814e:	4684      	mov	ip, r0
 8008150:	189a      	adds	r2, r3, r2
 8008152:	420f      	tst	r7, r1
 8008154:	d02a      	beq.n	80081ac <__lshift+0xc8>
 8008156:	3101      	adds	r1, #1
 8008158:	1a09      	subs	r1, r1, r0
 800815a:	9105      	str	r1, [sp, #20]
 800815c:	2100      	movs	r1, #0
 800815e:	9503      	str	r5, [sp, #12]
 8008160:	4667      	mov	r7, ip
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	40b8      	lsls	r0, r7
 8008166:	4308      	orrs	r0, r1
 8008168:	9903      	ldr	r1, [sp, #12]
 800816a:	c101      	stmia	r1!, {r0}
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	9805      	ldr	r0, [sp, #20]
 8008170:	cb02      	ldmia	r3!, {r1}
 8008172:	40c1      	lsrs	r1, r0
 8008174:	429a      	cmp	r2, r3
 8008176:	d8f3      	bhi.n	8008160 <__lshift+0x7c>
 8008178:	0020      	movs	r0, r4
 800817a:	3015      	adds	r0, #21
 800817c:	2304      	movs	r3, #4
 800817e:	4282      	cmp	r2, r0
 8008180:	d304      	bcc.n	800818c <__lshift+0xa8>
 8008182:	1b13      	subs	r3, r2, r4
 8008184:	3b15      	subs	r3, #21
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	3301      	adds	r3, #1
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	50e9      	str	r1, [r5, r3]
 800818e:	2900      	cmp	r1, #0
 8008190:	d002      	beq.n	8008198 <__lshift+0xb4>
 8008192:	9b02      	ldr	r3, [sp, #8]
 8008194:	3302      	adds	r3, #2
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	9804      	ldr	r0, [sp, #16]
 800819c:	3b01      	subs	r3, #1
 800819e:	0021      	movs	r1, r4
 80081a0:	6133      	str	r3, [r6, #16]
 80081a2:	f7ff fd7f 	bl	8007ca4 <_Bfree>
 80081a6:	0030      	movs	r0, r6
 80081a8:	b007      	add	sp, #28
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ac:	cb02      	ldmia	r3!, {r1}
 80081ae:	c502      	stmia	r5!, {r1}
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d8fb      	bhi.n	80081ac <__lshift+0xc8>
 80081b4:	e7f0      	b.n	8008198 <__lshift+0xb4>
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	0800a6d9 	.word	0x0800a6d9
 80081bc:	0800a6ea 	.word	0x0800a6ea

080081c0 <__mcmp>:
 80081c0:	b530      	push	{r4, r5, lr}
 80081c2:	690b      	ldr	r3, [r1, #16]
 80081c4:	6904      	ldr	r4, [r0, #16]
 80081c6:	0002      	movs	r2, r0
 80081c8:	1ae0      	subs	r0, r4, r3
 80081ca:	429c      	cmp	r4, r3
 80081cc:	d10e      	bne.n	80081ec <__mcmp+0x2c>
 80081ce:	3214      	adds	r2, #20
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	3114      	adds	r1, #20
 80081d4:	0014      	movs	r4, r2
 80081d6:	18c9      	adds	r1, r1, r3
 80081d8:	18d2      	adds	r2, r2, r3
 80081da:	3a04      	subs	r2, #4
 80081dc:	3904      	subs	r1, #4
 80081de:	6815      	ldr	r5, [r2, #0]
 80081e0:	680b      	ldr	r3, [r1, #0]
 80081e2:	429d      	cmp	r5, r3
 80081e4:	d003      	beq.n	80081ee <__mcmp+0x2e>
 80081e6:	2001      	movs	r0, #1
 80081e8:	429d      	cmp	r5, r3
 80081ea:	d303      	bcc.n	80081f4 <__mcmp+0x34>
 80081ec:	bd30      	pop	{r4, r5, pc}
 80081ee:	4294      	cmp	r4, r2
 80081f0:	d3f3      	bcc.n	80081da <__mcmp+0x1a>
 80081f2:	e7fb      	b.n	80081ec <__mcmp+0x2c>
 80081f4:	4240      	negs	r0, r0
 80081f6:	e7f9      	b.n	80081ec <__mcmp+0x2c>

080081f8 <__mdiff>:
 80081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fa:	000e      	movs	r6, r1
 80081fc:	0007      	movs	r7, r0
 80081fe:	0011      	movs	r1, r2
 8008200:	0030      	movs	r0, r6
 8008202:	b087      	sub	sp, #28
 8008204:	0014      	movs	r4, r2
 8008206:	f7ff ffdb 	bl	80081c0 <__mcmp>
 800820a:	1e05      	subs	r5, r0, #0
 800820c:	d110      	bne.n	8008230 <__mdiff+0x38>
 800820e:	0001      	movs	r1, r0
 8008210:	0038      	movs	r0, r7
 8008212:	f7ff fd03 	bl	8007c1c <_Balloc>
 8008216:	1e02      	subs	r2, r0, #0
 8008218:	d104      	bne.n	8008224 <__mdiff+0x2c>
 800821a:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <__mdiff+0x120>)
 800821c:	483f      	ldr	r0, [pc, #252]	; (800831c <__mdiff+0x124>)
 800821e:	4940      	ldr	r1, [pc, #256]	; (8008320 <__mdiff+0x128>)
 8008220:	f001 faca 	bl	80097b8 <__assert_func>
 8008224:	2301      	movs	r3, #1
 8008226:	6145      	str	r5, [r0, #20]
 8008228:	6103      	str	r3, [r0, #16]
 800822a:	0010      	movs	r0, r2
 800822c:	b007      	add	sp, #28
 800822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008230:	2301      	movs	r3, #1
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	2800      	cmp	r0, #0
 8008236:	db04      	blt.n	8008242 <__mdiff+0x4a>
 8008238:	0023      	movs	r3, r4
 800823a:	0034      	movs	r4, r6
 800823c:	001e      	movs	r6, r3
 800823e:	2300      	movs	r3, #0
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	0038      	movs	r0, r7
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	f7ff fce9 	bl	8007c1c <_Balloc>
 800824a:	1e02      	subs	r2, r0, #0
 800824c:	d103      	bne.n	8008256 <__mdiff+0x5e>
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <__mdiff+0x120>)
 8008250:	4832      	ldr	r0, [pc, #200]	; (800831c <__mdiff+0x124>)
 8008252:	4934      	ldr	r1, [pc, #208]	; (8008324 <__mdiff+0x12c>)
 8008254:	e7e4      	b.n	8008220 <__mdiff+0x28>
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	2700      	movs	r7, #0
 800825a:	60c3      	str	r3, [r0, #12]
 800825c:	6920      	ldr	r0, [r4, #16]
 800825e:	3414      	adds	r4, #20
 8008260:	0083      	lsls	r3, r0, #2
 8008262:	18e3      	adds	r3, r4, r3
 8008264:	0021      	movs	r1, r4
 8008266:	9401      	str	r4, [sp, #4]
 8008268:	0034      	movs	r4, r6
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	6933      	ldr	r3, [r6, #16]
 800826e:	3414      	adds	r4, #20
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	18e3      	adds	r3, r4, r3
 8008274:	9303      	str	r3, [sp, #12]
 8008276:	0013      	movs	r3, r2
 8008278:	3314      	adds	r3, #20
 800827a:	469c      	mov	ip, r3
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	9104      	str	r1, [sp, #16]
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	cc02      	ldmia	r4!, {r1}
 8008284:	cb20      	ldmia	r3!, {r5}
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	b2ab      	uxth	r3, r5
 800828a:	19df      	adds	r7, r3, r7
 800828c:	b28b      	uxth	r3, r1
 800828e:	1afb      	subs	r3, r7, r3
 8008290:	0c09      	lsrs	r1, r1, #16
 8008292:	0c2d      	lsrs	r5, r5, #16
 8008294:	1a6d      	subs	r5, r5, r1
 8008296:	1419      	asrs	r1, r3, #16
 8008298:	1869      	adds	r1, r5, r1
 800829a:	b29b      	uxth	r3, r3
 800829c:	140f      	asrs	r7, r1, #16
 800829e:	0409      	lsls	r1, r1, #16
 80082a0:	4319      	orrs	r1, r3
 80082a2:	4663      	mov	r3, ip
 80082a4:	c302      	stmia	r3!, {r1}
 80082a6:	469c      	mov	ip, r3
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	d8e8      	bhi.n	8008280 <__mdiff+0x88>
 80082ae:	0031      	movs	r1, r6
 80082b0:	9c03      	ldr	r4, [sp, #12]
 80082b2:	3115      	adds	r1, #21
 80082b4:	2304      	movs	r3, #4
 80082b6:	428c      	cmp	r4, r1
 80082b8:	d304      	bcc.n	80082c4 <__mdiff+0xcc>
 80082ba:	1ba3      	subs	r3, r4, r6
 80082bc:	3b15      	subs	r3, #21
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	3301      	adds	r3, #1
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	9901      	ldr	r1, [sp, #4]
 80082c6:	18cd      	adds	r5, r1, r3
 80082c8:	9905      	ldr	r1, [sp, #20]
 80082ca:	002e      	movs	r6, r5
 80082cc:	18cb      	adds	r3, r1, r3
 80082ce:	469c      	mov	ip, r3
 80082d0:	9902      	ldr	r1, [sp, #8]
 80082d2:	428e      	cmp	r6, r1
 80082d4:	d310      	bcc.n	80082f8 <__mdiff+0x100>
 80082d6:	9e02      	ldr	r6, [sp, #8]
 80082d8:	1ee9      	subs	r1, r5, #3
 80082da:	2400      	movs	r4, #0
 80082dc:	428e      	cmp	r6, r1
 80082de:	d304      	bcc.n	80082ea <__mdiff+0xf2>
 80082e0:	0031      	movs	r1, r6
 80082e2:	3103      	adds	r1, #3
 80082e4:	1b49      	subs	r1, r1, r5
 80082e6:	0889      	lsrs	r1, r1, #2
 80082e8:	008c      	lsls	r4, r1, #2
 80082ea:	191b      	adds	r3, r3, r4
 80082ec:	3b04      	subs	r3, #4
 80082ee:	6819      	ldr	r1, [r3, #0]
 80082f0:	2900      	cmp	r1, #0
 80082f2:	d00f      	beq.n	8008314 <__mdiff+0x11c>
 80082f4:	6110      	str	r0, [r2, #16]
 80082f6:	e798      	b.n	800822a <__mdiff+0x32>
 80082f8:	ce02      	ldmia	r6!, {r1}
 80082fa:	b28c      	uxth	r4, r1
 80082fc:	19e4      	adds	r4, r4, r7
 80082fe:	0c0f      	lsrs	r7, r1, #16
 8008300:	1421      	asrs	r1, r4, #16
 8008302:	1879      	adds	r1, r7, r1
 8008304:	b2a4      	uxth	r4, r4
 8008306:	140f      	asrs	r7, r1, #16
 8008308:	0409      	lsls	r1, r1, #16
 800830a:	4321      	orrs	r1, r4
 800830c:	4664      	mov	r4, ip
 800830e:	c402      	stmia	r4!, {r1}
 8008310:	46a4      	mov	ip, r4
 8008312:	e7dd      	b.n	80082d0 <__mdiff+0xd8>
 8008314:	3801      	subs	r0, #1
 8008316:	e7e9      	b.n	80082ec <__mdiff+0xf4>
 8008318:	0800a6d9 	.word	0x0800a6d9
 800831c:	0800a6ea 	.word	0x0800a6ea
 8008320:	00000237 	.word	0x00000237
 8008324:	00000245 	.word	0x00000245

08008328 <__ulp>:
 8008328:	2000      	movs	r0, #0
 800832a:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <__ulp+0x30>)
 800832c:	4019      	ands	r1, r3
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <__ulp+0x34>)
 8008330:	18c9      	adds	r1, r1, r3
 8008332:	4281      	cmp	r1, r0
 8008334:	dc06      	bgt.n	8008344 <__ulp+0x1c>
 8008336:	4249      	negs	r1, r1
 8008338:	150b      	asrs	r3, r1, #20
 800833a:	2b13      	cmp	r3, #19
 800833c:	dc03      	bgt.n	8008346 <__ulp+0x1e>
 800833e:	2180      	movs	r1, #128	; 0x80
 8008340:	0309      	lsls	r1, r1, #12
 8008342:	4119      	asrs	r1, r3
 8008344:	4770      	bx	lr
 8008346:	3b14      	subs	r3, #20
 8008348:	2001      	movs	r0, #1
 800834a:	2b1e      	cmp	r3, #30
 800834c:	dc02      	bgt.n	8008354 <__ulp+0x2c>
 800834e:	2080      	movs	r0, #128	; 0x80
 8008350:	0600      	lsls	r0, r0, #24
 8008352:	40d8      	lsrs	r0, r3
 8008354:	2100      	movs	r1, #0
 8008356:	e7f5      	b.n	8008344 <__ulp+0x1c>
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	fcc00000 	.word	0xfcc00000

08008360 <__b2d>:
 8008360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008362:	0006      	movs	r6, r0
 8008364:	6903      	ldr	r3, [r0, #16]
 8008366:	3614      	adds	r6, #20
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	18f3      	adds	r3, r6, r3
 800836c:	1f1d      	subs	r5, r3, #4
 800836e:	682c      	ldr	r4, [r5, #0]
 8008370:	000f      	movs	r7, r1
 8008372:	0020      	movs	r0, r4
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	f7ff fd49 	bl	8007e0c <__hi0bits>
 800837a:	2220      	movs	r2, #32
 800837c:	1a12      	subs	r2, r2, r0
 800837e:	603a      	str	r2, [r7, #0]
 8008380:	0003      	movs	r3, r0
 8008382:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <__b2d+0x94>)
 8008384:	280a      	cmp	r0, #10
 8008386:	dc15      	bgt.n	80083b4 <__b2d+0x54>
 8008388:	210b      	movs	r1, #11
 800838a:	0027      	movs	r7, r4
 800838c:	1a09      	subs	r1, r1, r0
 800838e:	40cf      	lsrs	r7, r1
 8008390:	433a      	orrs	r2, r7
 8008392:	468c      	mov	ip, r1
 8008394:	0011      	movs	r1, r2
 8008396:	2200      	movs	r2, #0
 8008398:	42ae      	cmp	r6, r5
 800839a:	d202      	bcs.n	80083a2 <__b2d+0x42>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	3a08      	subs	r2, #8
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	3315      	adds	r3, #21
 80083a4:	409c      	lsls	r4, r3
 80083a6:	4663      	mov	r3, ip
 80083a8:	0027      	movs	r7, r4
 80083aa:	40da      	lsrs	r2, r3
 80083ac:	4317      	orrs	r7, r2
 80083ae:	0038      	movs	r0, r7
 80083b0:	b003      	add	sp, #12
 80083b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b4:	2700      	movs	r7, #0
 80083b6:	42ae      	cmp	r6, r5
 80083b8:	d202      	bcs.n	80083c0 <__b2d+0x60>
 80083ba:	9d01      	ldr	r5, [sp, #4]
 80083bc:	3d08      	subs	r5, #8
 80083be:	682f      	ldr	r7, [r5, #0]
 80083c0:	210b      	movs	r1, #11
 80083c2:	4249      	negs	r1, r1
 80083c4:	468c      	mov	ip, r1
 80083c6:	449c      	add	ip, r3
 80083c8:	2b0b      	cmp	r3, #11
 80083ca:	d010      	beq.n	80083ee <__b2d+0x8e>
 80083cc:	4661      	mov	r1, ip
 80083ce:	2320      	movs	r3, #32
 80083d0:	408c      	lsls	r4, r1
 80083d2:	1a5b      	subs	r3, r3, r1
 80083d4:	0039      	movs	r1, r7
 80083d6:	40d9      	lsrs	r1, r3
 80083d8:	430c      	orrs	r4, r1
 80083da:	4322      	orrs	r2, r4
 80083dc:	0011      	movs	r1, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	42b5      	cmp	r5, r6
 80083e2:	d901      	bls.n	80083e8 <__b2d+0x88>
 80083e4:	3d04      	subs	r5, #4
 80083e6:	682a      	ldr	r2, [r5, #0]
 80083e8:	4664      	mov	r4, ip
 80083ea:	40a7      	lsls	r7, r4
 80083ec:	e7dd      	b.n	80083aa <__b2d+0x4a>
 80083ee:	4322      	orrs	r2, r4
 80083f0:	0011      	movs	r1, r2
 80083f2:	e7dc      	b.n	80083ae <__b2d+0x4e>
 80083f4:	3ff00000 	.word	0x3ff00000

080083f8 <__d2b>:
 80083f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fa:	2101      	movs	r1, #1
 80083fc:	0014      	movs	r4, r2
 80083fe:	001d      	movs	r5, r3
 8008400:	9f08      	ldr	r7, [sp, #32]
 8008402:	f7ff fc0b 	bl	8007c1c <_Balloc>
 8008406:	1e06      	subs	r6, r0, #0
 8008408:	d105      	bne.n	8008416 <__d2b+0x1e>
 800840a:	0032      	movs	r2, r6
 800840c:	4b24      	ldr	r3, [pc, #144]	; (80084a0 <__d2b+0xa8>)
 800840e:	4825      	ldr	r0, [pc, #148]	; (80084a4 <__d2b+0xac>)
 8008410:	4925      	ldr	r1, [pc, #148]	; (80084a8 <__d2b+0xb0>)
 8008412:	f001 f9d1 	bl	80097b8 <__assert_func>
 8008416:	032b      	lsls	r3, r5, #12
 8008418:	006d      	lsls	r5, r5, #1
 800841a:	0b1b      	lsrs	r3, r3, #12
 800841c:	0d6d      	lsrs	r5, r5, #21
 800841e:	d125      	bne.n	800846c <__d2b+0x74>
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	2c00      	cmp	r4, #0
 8008424:	d028      	beq.n	8008478 <__d2b+0x80>
 8008426:	4668      	mov	r0, sp
 8008428:	9400      	str	r4, [sp, #0]
 800842a:	f7ff fd09 	bl	8007e40 <__lo0bits>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	9900      	ldr	r1, [sp, #0]
 8008432:	2800      	cmp	r0, #0
 8008434:	d01e      	beq.n	8008474 <__d2b+0x7c>
 8008436:	2220      	movs	r2, #32
 8008438:	001c      	movs	r4, r3
 800843a:	1a12      	subs	r2, r2, r0
 800843c:	4094      	lsls	r4, r2
 800843e:	0022      	movs	r2, r4
 8008440:	40c3      	lsrs	r3, r0
 8008442:	430a      	orrs	r2, r1
 8008444:	6172      	str	r2, [r6, #20]
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	9c01      	ldr	r4, [sp, #4]
 800844a:	61b4      	str	r4, [r6, #24]
 800844c:	1e63      	subs	r3, r4, #1
 800844e:	419c      	sbcs	r4, r3
 8008450:	3401      	adds	r4, #1
 8008452:	6134      	str	r4, [r6, #16]
 8008454:	2d00      	cmp	r5, #0
 8008456:	d017      	beq.n	8008488 <__d2b+0x90>
 8008458:	2435      	movs	r4, #53	; 0x35
 800845a:	4b14      	ldr	r3, [pc, #80]	; (80084ac <__d2b+0xb4>)
 800845c:	18ed      	adds	r5, r5, r3
 800845e:	182d      	adds	r5, r5, r0
 8008460:	603d      	str	r5, [r7, #0]
 8008462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008464:	1a24      	subs	r4, r4, r0
 8008466:	601c      	str	r4, [r3, #0]
 8008468:	0030      	movs	r0, r6
 800846a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800846c:	2280      	movs	r2, #128	; 0x80
 800846e:	0352      	lsls	r2, r2, #13
 8008470:	4313      	orrs	r3, r2
 8008472:	e7d5      	b.n	8008420 <__d2b+0x28>
 8008474:	6171      	str	r1, [r6, #20]
 8008476:	e7e7      	b.n	8008448 <__d2b+0x50>
 8008478:	a801      	add	r0, sp, #4
 800847a:	f7ff fce1 	bl	8007e40 <__lo0bits>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	2401      	movs	r4, #1
 8008482:	6173      	str	r3, [r6, #20]
 8008484:	3020      	adds	r0, #32
 8008486:	e7e4      	b.n	8008452 <__d2b+0x5a>
 8008488:	4b09      	ldr	r3, [pc, #36]	; (80084b0 <__d2b+0xb8>)
 800848a:	18c0      	adds	r0, r0, r3
 800848c:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <__d2b+0xbc>)
 800848e:	6038      	str	r0, [r7, #0]
 8008490:	18e3      	adds	r3, r4, r3
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	18f3      	adds	r3, r6, r3
 8008496:	6958      	ldr	r0, [r3, #20]
 8008498:	f7ff fcb8 	bl	8007e0c <__hi0bits>
 800849c:	0164      	lsls	r4, r4, #5
 800849e:	e7e0      	b.n	8008462 <__d2b+0x6a>
 80084a0:	0800a6d9 	.word	0x0800a6d9
 80084a4:	0800a6ea 	.word	0x0800a6ea
 80084a8:	0000030f 	.word	0x0000030f
 80084ac:	fffffbcd 	.word	0xfffffbcd
 80084b0:	fffffbce 	.word	0xfffffbce
 80084b4:	3fffffff 	.word	0x3fffffff

080084b8 <__ratio>:
 80084b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ba:	b087      	sub	sp, #28
 80084bc:	000f      	movs	r7, r1
 80084be:	a904      	add	r1, sp, #16
 80084c0:	0006      	movs	r6, r0
 80084c2:	f7ff ff4d 	bl	8008360 <__b2d>
 80084c6:	9000      	str	r0, [sp, #0]
 80084c8:	9101      	str	r1, [sp, #4]
 80084ca:	9c00      	ldr	r4, [sp, #0]
 80084cc:	9d01      	ldr	r5, [sp, #4]
 80084ce:	0038      	movs	r0, r7
 80084d0:	a905      	add	r1, sp, #20
 80084d2:	f7ff ff45 	bl	8008360 <__b2d>
 80084d6:	9002      	str	r0, [sp, #8]
 80084d8:	9103      	str	r1, [sp, #12]
 80084da:	9a02      	ldr	r2, [sp, #8]
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	6930      	ldr	r0, [r6, #16]
 80084e0:	6939      	ldr	r1, [r7, #16]
 80084e2:	9e04      	ldr	r6, [sp, #16]
 80084e4:	1a40      	subs	r0, r0, r1
 80084e6:	9905      	ldr	r1, [sp, #20]
 80084e8:	0140      	lsls	r0, r0, #5
 80084ea:	1a71      	subs	r1, r6, r1
 80084ec:	1841      	adds	r1, r0, r1
 80084ee:	0508      	lsls	r0, r1, #20
 80084f0:	2900      	cmp	r1, #0
 80084f2:	dd07      	ble.n	8008504 <__ratio+0x4c>
 80084f4:	9901      	ldr	r1, [sp, #4]
 80084f6:	1845      	adds	r5, r0, r1
 80084f8:	0020      	movs	r0, r4
 80084fa:	0029      	movs	r1, r5
 80084fc:	f7f8 fcbe 	bl	8000e7c <__aeabi_ddiv>
 8008500:	b007      	add	sp, #28
 8008502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008504:	9903      	ldr	r1, [sp, #12]
 8008506:	1a0b      	subs	r3, r1, r0
 8008508:	e7f6      	b.n	80084f8 <__ratio+0x40>

0800850a <__copybits>:
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	0014      	movs	r4, r2
 800850e:	0005      	movs	r5, r0
 8008510:	3901      	subs	r1, #1
 8008512:	6913      	ldr	r3, [r2, #16]
 8008514:	1149      	asrs	r1, r1, #5
 8008516:	3101      	adds	r1, #1
 8008518:	0089      	lsls	r1, r1, #2
 800851a:	3414      	adds	r4, #20
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	1841      	adds	r1, r0, r1
 8008520:	18e3      	adds	r3, r4, r3
 8008522:	42a3      	cmp	r3, r4
 8008524:	d80d      	bhi.n	8008542 <__copybits+0x38>
 8008526:	0014      	movs	r4, r2
 8008528:	3411      	adds	r4, #17
 800852a:	2500      	movs	r5, #0
 800852c:	429c      	cmp	r4, r3
 800852e:	d803      	bhi.n	8008538 <__copybits+0x2e>
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	3b11      	subs	r3, #17
 8008534:	089b      	lsrs	r3, r3, #2
 8008536:	009d      	lsls	r5, r3, #2
 8008538:	2300      	movs	r3, #0
 800853a:	1940      	adds	r0, r0, r5
 800853c:	4281      	cmp	r1, r0
 800853e:	d803      	bhi.n	8008548 <__copybits+0x3e>
 8008540:	bd70      	pop	{r4, r5, r6, pc}
 8008542:	cc40      	ldmia	r4!, {r6}
 8008544:	c540      	stmia	r5!, {r6}
 8008546:	e7ec      	b.n	8008522 <__copybits+0x18>
 8008548:	c008      	stmia	r0!, {r3}
 800854a:	e7f7      	b.n	800853c <__copybits+0x32>

0800854c <__any_on>:
 800854c:	0002      	movs	r2, r0
 800854e:	6900      	ldr	r0, [r0, #16]
 8008550:	b510      	push	{r4, lr}
 8008552:	3214      	adds	r2, #20
 8008554:	114b      	asrs	r3, r1, #5
 8008556:	4298      	cmp	r0, r3
 8008558:	db13      	blt.n	8008582 <__any_on+0x36>
 800855a:	dd0c      	ble.n	8008576 <__any_on+0x2a>
 800855c:	241f      	movs	r4, #31
 800855e:	0008      	movs	r0, r1
 8008560:	4020      	ands	r0, r4
 8008562:	4221      	tst	r1, r4
 8008564:	d007      	beq.n	8008576 <__any_on+0x2a>
 8008566:	0099      	lsls	r1, r3, #2
 8008568:	588c      	ldr	r4, [r1, r2]
 800856a:	0021      	movs	r1, r4
 800856c:	40c1      	lsrs	r1, r0
 800856e:	4081      	lsls	r1, r0
 8008570:	2001      	movs	r0, #1
 8008572:	428c      	cmp	r4, r1
 8008574:	d104      	bne.n	8008580 <__any_on+0x34>
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	4293      	cmp	r3, r2
 800857c:	d803      	bhi.n	8008586 <__any_on+0x3a>
 800857e:	2000      	movs	r0, #0
 8008580:	bd10      	pop	{r4, pc}
 8008582:	0003      	movs	r3, r0
 8008584:	e7f7      	b.n	8008576 <__any_on+0x2a>
 8008586:	3b04      	subs	r3, #4
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	2900      	cmp	r1, #0
 800858c:	d0f5      	beq.n	800857a <__any_on+0x2e>
 800858e:	2001      	movs	r0, #1
 8008590:	e7f6      	b.n	8008580 <__any_on+0x34>
	...

08008594 <sulp>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	0016      	movs	r6, r2
 8008598:	000d      	movs	r5, r1
 800859a:	f7ff fec5 	bl	8008328 <__ulp>
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d00d      	beq.n	80085be <sulp+0x2a>
 80085a2:	236b      	movs	r3, #107	; 0x6b
 80085a4:	006a      	lsls	r2, r5, #1
 80085a6:	0d52      	lsrs	r2, r2, #21
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd07      	ble.n	80085be <sulp+0x2a>
 80085ae:	2400      	movs	r4, #0
 80085b0:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <sulp+0x2c>)
 80085b2:	051b      	lsls	r3, r3, #20
 80085b4:	189d      	adds	r5, r3, r2
 80085b6:	002b      	movs	r3, r5
 80085b8:	0022      	movs	r2, r4
 80085ba:	f7f9 f859 	bl	8001670 <__aeabi_dmul>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	3ff00000 	.word	0x3ff00000

080085c4 <_strtod_l>:
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	b0a1      	sub	sp, #132	; 0x84
 80085c8:	9219      	str	r2, [sp, #100]	; 0x64
 80085ca:	2200      	movs	r2, #0
 80085cc:	2600      	movs	r6, #0
 80085ce:	2700      	movs	r7, #0
 80085d0:	9004      	str	r0, [sp, #16]
 80085d2:	9107      	str	r1, [sp, #28]
 80085d4:	921c      	str	r2, [sp, #112]	; 0x70
 80085d6:	911b      	str	r1, [sp, #108]	; 0x6c
 80085d8:	780a      	ldrb	r2, [r1, #0]
 80085da:	2a2b      	cmp	r2, #43	; 0x2b
 80085dc:	d055      	beq.n	800868a <_strtod_l+0xc6>
 80085de:	d841      	bhi.n	8008664 <_strtod_l+0xa0>
 80085e0:	2a0d      	cmp	r2, #13
 80085e2:	d83b      	bhi.n	800865c <_strtod_l+0x98>
 80085e4:	2a08      	cmp	r2, #8
 80085e6:	d83b      	bhi.n	8008660 <_strtod_l+0x9c>
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	d044      	beq.n	8008676 <_strtod_l+0xb2>
 80085ec:	2200      	movs	r2, #0
 80085ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80085f0:	2100      	movs	r1, #0
 80085f2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80085f4:	9109      	str	r1, [sp, #36]	; 0x24
 80085f6:	782a      	ldrb	r2, [r5, #0]
 80085f8:	2a30      	cmp	r2, #48	; 0x30
 80085fa:	d000      	beq.n	80085fe <_strtod_l+0x3a>
 80085fc:	e085      	b.n	800870a <_strtod_l+0x146>
 80085fe:	786a      	ldrb	r2, [r5, #1]
 8008600:	3120      	adds	r1, #32
 8008602:	438a      	bics	r2, r1
 8008604:	2a58      	cmp	r2, #88	; 0x58
 8008606:	d000      	beq.n	800860a <_strtod_l+0x46>
 8008608:	e075      	b.n	80086f6 <_strtod_l+0x132>
 800860a:	9302      	str	r3, [sp, #8]
 800860c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800860e:	4a97      	ldr	r2, [pc, #604]	; (800886c <_strtod_l+0x2a8>)
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	ab1c      	add	r3, sp, #112	; 0x70
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	9804      	ldr	r0, [sp, #16]
 8008618:	ab1d      	add	r3, sp, #116	; 0x74
 800861a:	a91b      	add	r1, sp, #108	; 0x6c
 800861c:	f001 f982 	bl	8009924 <__gethex>
 8008620:	230f      	movs	r3, #15
 8008622:	0002      	movs	r2, r0
 8008624:	401a      	ands	r2, r3
 8008626:	0004      	movs	r4, r0
 8008628:	9205      	str	r2, [sp, #20]
 800862a:	4218      	tst	r0, r3
 800862c:	d005      	beq.n	800863a <_strtod_l+0x76>
 800862e:	2a06      	cmp	r2, #6
 8008630:	d12d      	bne.n	800868e <_strtod_l+0xca>
 8008632:	1c6b      	adds	r3, r5, #1
 8008634:	931b      	str	r3, [sp, #108]	; 0x6c
 8008636:	2300      	movs	r3, #0
 8008638:	930f      	str	r3, [sp, #60]	; 0x3c
 800863a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <_strtod_l+0x82>
 8008640:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008642:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <_strtod_l+0xc0>
 800864c:	2380      	movs	r3, #128	; 0x80
 800864e:	0032      	movs	r2, r6
 8008650:	061b      	lsls	r3, r3, #24
 8008652:	18fb      	adds	r3, r7, r3
 8008654:	0010      	movs	r0, r2
 8008656:	0019      	movs	r1, r3
 8008658:	b021      	add	sp, #132	; 0x84
 800865a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865c:	2a20      	cmp	r2, #32
 800865e:	d1c5      	bne.n	80085ec <_strtod_l+0x28>
 8008660:	3101      	adds	r1, #1
 8008662:	e7b8      	b.n	80085d6 <_strtod_l+0x12>
 8008664:	2a2d      	cmp	r2, #45	; 0x2d
 8008666:	d1c1      	bne.n	80085ec <_strtod_l+0x28>
 8008668:	3a2c      	subs	r2, #44	; 0x2c
 800866a:	920f      	str	r2, [sp, #60]	; 0x3c
 800866c:	1c4a      	adds	r2, r1, #1
 800866e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008670:	784a      	ldrb	r2, [r1, #1]
 8008672:	2a00      	cmp	r2, #0
 8008674:	d1bc      	bne.n	80085f0 <_strtod_l+0x2c>
 8008676:	9b07      	ldr	r3, [sp, #28]
 8008678:	931b      	str	r3, [sp, #108]	; 0x6c
 800867a:	2300      	movs	r3, #0
 800867c:	930f      	str	r3, [sp, #60]	; 0x3c
 800867e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1dd      	bne.n	8008640 <_strtod_l+0x7c>
 8008684:	0032      	movs	r2, r6
 8008686:	003b      	movs	r3, r7
 8008688:	e7e4      	b.n	8008654 <_strtod_l+0x90>
 800868a:	2200      	movs	r2, #0
 800868c:	e7ed      	b.n	800866a <_strtod_l+0xa6>
 800868e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008690:	2a00      	cmp	r2, #0
 8008692:	d007      	beq.n	80086a4 <_strtod_l+0xe0>
 8008694:	2135      	movs	r1, #53	; 0x35
 8008696:	a81e      	add	r0, sp, #120	; 0x78
 8008698:	f7ff ff37 	bl	800850a <__copybits>
 800869c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800869e:	9804      	ldr	r0, [sp, #16]
 80086a0:	f7ff fb00 	bl	8007ca4 <_Bfree>
 80086a4:	9805      	ldr	r0, [sp, #20]
 80086a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086a8:	3801      	subs	r0, #1
 80086aa:	2804      	cmp	r0, #4
 80086ac:	d806      	bhi.n	80086bc <_strtod_l+0xf8>
 80086ae:	f7f7 fd33 	bl	8000118 <__gnu_thumb1_case_uqi>
 80086b2:	0312      	.short	0x0312
 80086b4:	1e1c      	.short	0x1e1c
 80086b6:	12          	.byte	0x12
 80086b7:	00          	.byte	0x00
 80086b8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80086ba:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80086bc:	05e4      	lsls	r4, r4, #23
 80086be:	d502      	bpl.n	80086c6 <_strtod_l+0x102>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	061b      	lsls	r3, r3, #24
 80086c4:	431f      	orrs	r7, r3
 80086c6:	4b6a      	ldr	r3, [pc, #424]	; (8008870 <_strtod_l+0x2ac>)
 80086c8:	423b      	tst	r3, r7
 80086ca:	d1b6      	bne.n	800863a <_strtod_l+0x76>
 80086cc:	f7fe fac4 	bl	8006c58 <__errno>
 80086d0:	2322      	movs	r3, #34	; 0x22
 80086d2:	6003      	str	r3, [r0, #0]
 80086d4:	e7b1      	b.n	800863a <_strtod_l+0x76>
 80086d6:	4967      	ldr	r1, [pc, #412]	; (8008874 <_strtod_l+0x2b0>)
 80086d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80086da:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80086dc:	400a      	ands	r2, r1
 80086de:	4966      	ldr	r1, [pc, #408]	; (8008878 <_strtod_l+0x2b4>)
 80086e0:	185b      	adds	r3, r3, r1
 80086e2:	051b      	lsls	r3, r3, #20
 80086e4:	431a      	orrs	r2, r3
 80086e6:	0017      	movs	r7, r2
 80086e8:	e7e8      	b.n	80086bc <_strtod_l+0xf8>
 80086ea:	4f61      	ldr	r7, [pc, #388]	; (8008870 <_strtod_l+0x2ac>)
 80086ec:	e7e6      	b.n	80086bc <_strtod_l+0xf8>
 80086ee:	2601      	movs	r6, #1
 80086f0:	4f62      	ldr	r7, [pc, #392]	; (800887c <_strtod_l+0x2b8>)
 80086f2:	4276      	negs	r6, r6
 80086f4:	e7e2      	b.n	80086bc <_strtod_l+0xf8>
 80086f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b30      	cmp	r3, #48	; 0x30
 8008700:	d0f9      	beq.n	80086f6 <_strtod_l+0x132>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d099      	beq.n	800863a <_strtod_l+0x76>
 8008706:	2301      	movs	r3, #1
 8008708:	9309      	str	r3, [sp, #36]	; 0x24
 800870a:	2500      	movs	r5, #0
 800870c:	220a      	movs	r2, #10
 800870e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008710:	950d      	str	r5, [sp, #52]	; 0x34
 8008712:	9310      	str	r3, [sp, #64]	; 0x40
 8008714:	9508      	str	r5, [sp, #32]
 8008716:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008718:	7804      	ldrb	r4, [r0, #0]
 800871a:	0023      	movs	r3, r4
 800871c:	3b30      	subs	r3, #48	; 0x30
 800871e:	b2d9      	uxtb	r1, r3
 8008720:	2909      	cmp	r1, #9
 8008722:	d927      	bls.n	8008774 <_strtod_l+0x1b0>
 8008724:	2201      	movs	r2, #1
 8008726:	4956      	ldr	r1, [pc, #344]	; (8008880 <_strtod_l+0x2bc>)
 8008728:	f001 f812 	bl	8009750 <strncmp>
 800872c:	2800      	cmp	r0, #0
 800872e:	d031      	beq.n	8008794 <_strtod_l+0x1d0>
 8008730:	2000      	movs	r0, #0
 8008732:	0023      	movs	r3, r4
 8008734:	4684      	mov	ip, r0
 8008736:	9a08      	ldr	r2, [sp, #32]
 8008738:	900c      	str	r0, [sp, #48]	; 0x30
 800873a:	9205      	str	r2, [sp, #20]
 800873c:	2220      	movs	r2, #32
 800873e:	0019      	movs	r1, r3
 8008740:	4391      	bics	r1, r2
 8008742:	000a      	movs	r2, r1
 8008744:	2100      	movs	r1, #0
 8008746:	9106      	str	r1, [sp, #24]
 8008748:	2a45      	cmp	r2, #69	; 0x45
 800874a:	d000      	beq.n	800874e <_strtod_l+0x18a>
 800874c:	e0c2      	b.n	80088d4 <_strtod_l+0x310>
 800874e:	9b05      	ldr	r3, [sp, #20]
 8008750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008752:	4303      	orrs	r3, r0
 8008754:	4313      	orrs	r3, r2
 8008756:	428b      	cmp	r3, r1
 8008758:	d08d      	beq.n	8008676 <_strtod_l+0xb2>
 800875a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	3301      	adds	r3, #1
 8008760:	931b      	str	r3, [sp, #108]	; 0x6c
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	2b2b      	cmp	r3, #43	; 0x2b
 8008768:	d071      	beq.n	800884e <_strtod_l+0x28a>
 800876a:	000c      	movs	r4, r1
 800876c:	2b2d      	cmp	r3, #45	; 0x2d
 800876e:	d174      	bne.n	800885a <_strtod_l+0x296>
 8008770:	2401      	movs	r4, #1
 8008772:	e06d      	b.n	8008850 <_strtod_l+0x28c>
 8008774:	9908      	ldr	r1, [sp, #32]
 8008776:	2908      	cmp	r1, #8
 8008778:	dc09      	bgt.n	800878e <_strtod_l+0x1ca>
 800877a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800877c:	4351      	muls	r1, r2
 800877e:	185b      	adds	r3, r3, r1
 8008780:	930d      	str	r3, [sp, #52]	; 0x34
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	3001      	adds	r0, #1
 8008786:	3301      	adds	r3, #1
 8008788:	9308      	str	r3, [sp, #32]
 800878a:	901b      	str	r0, [sp, #108]	; 0x6c
 800878c:	e7c3      	b.n	8008716 <_strtod_l+0x152>
 800878e:	4355      	muls	r5, r2
 8008790:	195d      	adds	r5, r3, r5
 8008792:	e7f6      	b.n	8008782 <_strtod_l+0x1be>
 8008794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	921b      	str	r2, [sp, #108]	; 0x6c
 800879a:	9a08      	ldr	r2, [sp, #32]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2a00      	cmp	r2, #0
 80087a0:	d03a      	beq.n	8008818 <_strtod_l+0x254>
 80087a2:	900c      	str	r0, [sp, #48]	; 0x30
 80087a4:	9205      	str	r2, [sp, #20]
 80087a6:	001a      	movs	r2, r3
 80087a8:	3a30      	subs	r2, #48	; 0x30
 80087aa:	2a09      	cmp	r2, #9
 80087ac:	d912      	bls.n	80087d4 <_strtod_l+0x210>
 80087ae:	2201      	movs	r2, #1
 80087b0:	4694      	mov	ip, r2
 80087b2:	e7c3      	b.n	800873c <_strtod_l+0x178>
 80087b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087b6:	3001      	adds	r0, #1
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b30      	cmp	r3, #48	; 0x30
 80087c0:	d0f8      	beq.n	80087b4 <_strtod_l+0x1f0>
 80087c2:	001a      	movs	r2, r3
 80087c4:	3a31      	subs	r2, #49	; 0x31
 80087c6:	2a08      	cmp	r2, #8
 80087c8:	d83c      	bhi.n	8008844 <_strtod_l+0x280>
 80087ca:	900c      	str	r0, [sp, #48]	; 0x30
 80087cc:	2000      	movs	r0, #0
 80087ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80087d0:	9005      	str	r0, [sp, #20]
 80087d2:	9210      	str	r2, [sp, #64]	; 0x40
 80087d4:	001a      	movs	r2, r3
 80087d6:	1c41      	adds	r1, r0, #1
 80087d8:	3a30      	subs	r2, #48	; 0x30
 80087da:	2b30      	cmp	r3, #48	; 0x30
 80087dc:	d016      	beq.n	800880c <_strtod_l+0x248>
 80087de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e0:	185b      	adds	r3, r3, r1
 80087e2:	930c      	str	r3, [sp, #48]	; 0x30
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	210a      	movs	r1, #10
 80087e8:	469c      	mov	ip, r3
 80087ea:	4484      	add	ip, r0
 80087ec:	4563      	cmp	r3, ip
 80087ee:	d115      	bne.n	800881c <_strtod_l+0x258>
 80087f0:	9905      	ldr	r1, [sp, #20]
 80087f2:	9b05      	ldr	r3, [sp, #20]
 80087f4:	3101      	adds	r1, #1
 80087f6:	1809      	adds	r1, r1, r0
 80087f8:	181b      	adds	r3, r3, r0
 80087fa:	9105      	str	r1, [sp, #20]
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	dc19      	bgt.n	8008834 <_strtod_l+0x270>
 8008800:	230a      	movs	r3, #10
 8008802:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008804:	434b      	muls	r3, r1
 8008806:	2100      	movs	r1, #0
 8008808:	18d3      	adds	r3, r2, r3
 800880a:	930d      	str	r3, [sp, #52]	; 0x34
 800880c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800880e:	0008      	movs	r0, r1
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	921b      	str	r2, [sp, #108]	; 0x6c
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	e7c6      	b.n	80087a6 <_strtod_l+0x1e2>
 8008818:	9808      	ldr	r0, [sp, #32]
 800881a:	e7d0      	b.n	80087be <_strtod_l+0x1fa>
 800881c:	1c5c      	adds	r4, r3, #1
 800881e:	2b08      	cmp	r3, #8
 8008820:	dc04      	bgt.n	800882c <_strtod_l+0x268>
 8008822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008824:	434b      	muls	r3, r1
 8008826:	930d      	str	r3, [sp, #52]	; 0x34
 8008828:	0023      	movs	r3, r4
 800882a:	e7df      	b.n	80087ec <_strtod_l+0x228>
 800882c:	2c10      	cmp	r4, #16
 800882e:	dcfb      	bgt.n	8008828 <_strtod_l+0x264>
 8008830:	434d      	muls	r5, r1
 8008832:	e7f9      	b.n	8008828 <_strtod_l+0x264>
 8008834:	9b05      	ldr	r3, [sp, #20]
 8008836:	2100      	movs	r1, #0
 8008838:	2b10      	cmp	r3, #16
 800883a:	dce7      	bgt.n	800880c <_strtod_l+0x248>
 800883c:	230a      	movs	r3, #10
 800883e:	435d      	muls	r5, r3
 8008840:	1955      	adds	r5, r2, r5
 8008842:	e7e3      	b.n	800880c <_strtod_l+0x248>
 8008844:	2200      	movs	r2, #0
 8008846:	920c      	str	r2, [sp, #48]	; 0x30
 8008848:	9205      	str	r2, [sp, #20]
 800884a:	3201      	adds	r2, #1
 800884c:	e7b0      	b.n	80087b0 <_strtod_l+0x1ec>
 800884e:	2400      	movs	r4, #0
 8008850:	9b07      	ldr	r3, [sp, #28]
 8008852:	3302      	adds	r3, #2
 8008854:	931b      	str	r3, [sp, #108]	; 0x6c
 8008856:	9b07      	ldr	r3, [sp, #28]
 8008858:	789b      	ldrb	r3, [r3, #2]
 800885a:	001a      	movs	r2, r3
 800885c:	3a30      	subs	r2, #48	; 0x30
 800885e:	2a09      	cmp	r2, #9
 8008860:	d914      	bls.n	800888c <_strtod_l+0x2c8>
 8008862:	9a07      	ldr	r2, [sp, #28]
 8008864:	921b      	str	r2, [sp, #108]	; 0x6c
 8008866:	2200      	movs	r2, #0
 8008868:	e033      	b.n	80088d2 <_strtod_l+0x30e>
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	0800a848 	.word	0x0800a848
 8008870:	7ff00000 	.word	0x7ff00000
 8008874:	ffefffff 	.word	0xffefffff
 8008878:	00000433 	.word	0x00000433
 800887c:	7fffffff 	.word	0x7fffffff
 8008880:	0800a844 	.word	0x0800a844
 8008884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	921b      	str	r2, [sp, #108]	; 0x6c
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b30      	cmp	r3, #48	; 0x30
 800888e:	d0f9      	beq.n	8008884 <_strtod_l+0x2c0>
 8008890:	2200      	movs	r2, #0
 8008892:	9206      	str	r2, [sp, #24]
 8008894:	001a      	movs	r2, r3
 8008896:	3a31      	subs	r2, #49	; 0x31
 8008898:	2a08      	cmp	r2, #8
 800889a:	d81b      	bhi.n	80088d4 <_strtod_l+0x310>
 800889c:	3b30      	subs	r3, #48	; 0x30
 800889e:	930e      	str	r3, [sp, #56]	; 0x38
 80088a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	911b      	str	r1, [sp, #108]	; 0x6c
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	001a      	movs	r2, r3
 80088ae:	3a30      	subs	r2, #48	; 0x30
 80088b0:	2a09      	cmp	r2, #9
 80088b2:	d93a      	bls.n	800892a <_strtod_l+0x366>
 80088b4:	9a06      	ldr	r2, [sp, #24]
 80088b6:	1a8a      	subs	r2, r1, r2
 80088b8:	49b2      	ldr	r1, [pc, #712]	; (8008b84 <_strtod_l+0x5c0>)
 80088ba:	9106      	str	r1, [sp, #24]
 80088bc:	2a08      	cmp	r2, #8
 80088be:	dc04      	bgt.n	80088ca <_strtod_l+0x306>
 80088c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088c2:	9206      	str	r2, [sp, #24]
 80088c4:	428a      	cmp	r2, r1
 80088c6:	dd00      	ble.n	80088ca <_strtod_l+0x306>
 80088c8:	9106      	str	r1, [sp, #24]
 80088ca:	2c00      	cmp	r4, #0
 80088cc:	d002      	beq.n	80088d4 <_strtod_l+0x310>
 80088ce:	9a06      	ldr	r2, [sp, #24]
 80088d0:	4252      	negs	r2, r2
 80088d2:	9206      	str	r2, [sp, #24]
 80088d4:	9a05      	ldr	r2, [sp, #20]
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	d14d      	bne.n	8008976 <_strtod_l+0x3b2>
 80088da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088dc:	4310      	orrs	r0, r2
 80088de:	d000      	beq.n	80088e2 <_strtod_l+0x31e>
 80088e0:	e6ab      	b.n	800863a <_strtod_l+0x76>
 80088e2:	4662      	mov	r2, ip
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d000      	beq.n	80088ea <_strtod_l+0x326>
 80088e8:	e6c5      	b.n	8008676 <_strtod_l+0xb2>
 80088ea:	2b69      	cmp	r3, #105	; 0x69
 80088ec:	d027      	beq.n	800893e <_strtod_l+0x37a>
 80088ee:	dc23      	bgt.n	8008938 <_strtod_l+0x374>
 80088f0:	2b49      	cmp	r3, #73	; 0x49
 80088f2:	d024      	beq.n	800893e <_strtod_l+0x37a>
 80088f4:	2b4e      	cmp	r3, #78	; 0x4e
 80088f6:	d000      	beq.n	80088fa <_strtod_l+0x336>
 80088f8:	e6bd      	b.n	8008676 <_strtod_l+0xb2>
 80088fa:	49a3      	ldr	r1, [pc, #652]	; (8008b88 <_strtod_l+0x5c4>)
 80088fc:	a81b      	add	r0, sp, #108	; 0x6c
 80088fe:	f001 fa47 	bl	8009d90 <__match>
 8008902:	2800      	cmp	r0, #0
 8008904:	d100      	bne.n	8008908 <_strtod_l+0x344>
 8008906:	e6b6      	b.n	8008676 <_strtod_l+0xb2>
 8008908:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b28      	cmp	r3, #40	; 0x28
 800890e:	d12c      	bne.n	800896a <_strtod_l+0x3a6>
 8008910:	499e      	ldr	r1, [pc, #632]	; (8008b8c <_strtod_l+0x5c8>)
 8008912:	aa1e      	add	r2, sp, #120	; 0x78
 8008914:	a81b      	add	r0, sp, #108	; 0x6c
 8008916:	f001 fa4f 	bl	8009db8 <__hexnan>
 800891a:	2805      	cmp	r0, #5
 800891c:	d125      	bne.n	800896a <_strtod_l+0x3a6>
 800891e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008920:	4a9b      	ldr	r2, [pc, #620]	; (8008b90 <_strtod_l+0x5cc>)
 8008922:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008924:	431a      	orrs	r2, r3
 8008926:	0017      	movs	r7, r2
 8008928:	e687      	b.n	800863a <_strtod_l+0x76>
 800892a:	220a      	movs	r2, #10
 800892c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800892e:	434a      	muls	r2, r1
 8008930:	18d2      	adds	r2, r2, r3
 8008932:	3a30      	subs	r2, #48	; 0x30
 8008934:	920e      	str	r2, [sp, #56]	; 0x38
 8008936:	e7b5      	b.n	80088a4 <_strtod_l+0x2e0>
 8008938:	2b6e      	cmp	r3, #110	; 0x6e
 800893a:	d0de      	beq.n	80088fa <_strtod_l+0x336>
 800893c:	e69b      	b.n	8008676 <_strtod_l+0xb2>
 800893e:	4995      	ldr	r1, [pc, #596]	; (8008b94 <_strtod_l+0x5d0>)
 8008940:	a81b      	add	r0, sp, #108	; 0x6c
 8008942:	f001 fa25 	bl	8009d90 <__match>
 8008946:	2800      	cmp	r0, #0
 8008948:	d100      	bne.n	800894c <_strtod_l+0x388>
 800894a:	e694      	b.n	8008676 <_strtod_l+0xb2>
 800894c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800894e:	4992      	ldr	r1, [pc, #584]	; (8008b98 <_strtod_l+0x5d4>)
 8008950:	3b01      	subs	r3, #1
 8008952:	a81b      	add	r0, sp, #108	; 0x6c
 8008954:	931b      	str	r3, [sp, #108]	; 0x6c
 8008956:	f001 fa1b 	bl	8009d90 <__match>
 800895a:	2800      	cmp	r0, #0
 800895c:	d102      	bne.n	8008964 <_strtod_l+0x3a0>
 800895e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008960:	3301      	adds	r3, #1
 8008962:	931b      	str	r3, [sp, #108]	; 0x6c
 8008964:	2600      	movs	r6, #0
 8008966:	4f8a      	ldr	r7, [pc, #552]	; (8008b90 <_strtod_l+0x5cc>)
 8008968:	e667      	b.n	800863a <_strtod_l+0x76>
 800896a:	488c      	ldr	r0, [pc, #560]	; (8008b9c <_strtod_l+0x5d8>)
 800896c:	f000 ff1e 	bl	80097ac <nan>
 8008970:	0006      	movs	r6, r0
 8008972:	000f      	movs	r7, r1
 8008974:	e661      	b.n	800863a <_strtod_l+0x76>
 8008976:	9b06      	ldr	r3, [sp, #24]
 8008978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	9309      	str	r3, [sp, #36]	; 0x24
 800897e:	9b08      	ldr	r3, [sp, #32]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <_strtod_l+0x3c4>
 8008984:	9b05      	ldr	r3, [sp, #20]
 8008986:	9308      	str	r3, [sp, #32]
 8008988:	9c05      	ldr	r4, [sp, #20]
 800898a:	2c10      	cmp	r4, #16
 800898c:	dd00      	ble.n	8008990 <_strtod_l+0x3cc>
 800898e:	2410      	movs	r4, #16
 8008990:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008992:	f7f9 fd35 	bl	8002400 <__aeabi_ui2d>
 8008996:	9b05      	ldr	r3, [sp, #20]
 8008998:	0006      	movs	r6, r0
 800899a:	000f      	movs	r7, r1
 800899c:	2b09      	cmp	r3, #9
 800899e:	dd15      	ble.n	80089cc <_strtod_l+0x408>
 80089a0:	0022      	movs	r2, r4
 80089a2:	4b7f      	ldr	r3, [pc, #508]	; (8008ba0 <_strtod_l+0x5dc>)
 80089a4:	3a09      	subs	r2, #9
 80089a6:	00d2      	lsls	r2, r2, #3
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f7f8 fe5f 	bl	8001670 <__aeabi_dmul>
 80089b2:	0006      	movs	r6, r0
 80089b4:	0028      	movs	r0, r5
 80089b6:	000f      	movs	r7, r1
 80089b8:	f7f9 fd22 	bl	8002400 <__aeabi_ui2d>
 80089bc:	0002      	movs	r2, r0
 80089be:	000b      	movs	r3, r1
 80089c0:	0030      	movs	r0, r6
 80089c2:	0039      	movs	r1, r7
 80089c4:	f7f7 fefa 	bl	80007bc <__aeabi_dadd>
 80089c8:	0006      	movs	r6, r0
 80089ca:	000f      	movs	r7, r1
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	2b0f      	cmp	r3, #15
 80089d0:	dc39      	bgt.n	8008a46 <_strtod_l+0x482>
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d100      	bne.n	80089da <_strtod_l+0x416>
 80089d8:	e62f      	b.n	800863a <_strtod_l+0x76>
 80089da:	dd24      	ble.n	8008a26 <_strtod_l+0x462>
 80089dc:	2b16      	cmp	r3, #22
 80089de:	dc09      	bgt.n	80089f4 <_strtod_l+0x430>
 80089e0:	496f      	ldr	r1, [pc, #444]	; (8008ba0 <_strtod_l+0x5dc>)
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	18c9      	adds	r1, r1, r3
 80089e6:	0032      	movs	r2, r6
 80089e8:	6808      	ldr	r0, [r1, #0]
 80089ea:	6849      	ldr	r1, [r1, #4]
 80089ec:	003b      	movs	r3, r7
 80089ee:	f7f8 fe3f 	bl	8001670 <__aeabi_dmul>
 80089f2:	e7bd      	b.n	8008970 <_strtod_l+0x3ac>
 80089f4:	2325      	movs	r3, #37	; 0x25
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089fc:	4293      	cmp	r3, r2
 80089fe:	db22      	blt.n	8008a46 <_strtod_l+0x482>
 8008a00:	240f      	movs	r4, #15
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	4d66      	ldr	r5, [pc, #408]	; (8008ba0 <_strtod_l+0x5dc>)
 8008a06:	1ae4      	subs	r4, r4, r3
 8008a08:	00e1      	lsls	r1, r4, #3
 8008a0a:	1869      	adds	r1, r5, r1
 8008a0c:	0032      	movs	r2, r6
 8008a0e:	6808      	ldr	r0, [r1, #0]
 8008a10:	6849      	ldr	r1, [r1, #4]
 8008a12:	003b      	movs	r3, r7
 8008a14:	f7f8 fe2c 	bl	8001670 <__aeabi_dmul>
 8008a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1a:	1b1c      	subs	r4, r3, r4
 8008a1c:	00e4      	lsls	r4, r4, #3
 8008a1e:	192d      	adds	r5, r5, r4
 8008a20:	682a      	ldr	r2, [r5, #0]
 8008a22:	686b      	ldr	r3, [r5, #4]
 8008a24:	e7e3      	b.n	80089ee <_strtod_l+0x42a>
 8008a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a28:	3316      	adds	r3, #22
 8008a2a:	db0c      	blt.n	8008a46 <_strtod_l+0x482>
 8008a2c:	9906      	ldr	r1, [sp, #24]
 8008a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a30:	4b5b      	ldr	r3, [pc, #364]	; (8008ba0 <_strtod_l+0x5dc>)
 8008a32:	1a52      	subs	r2, r2, r1
 8008a34:	00d2      	lsls	r2, r2, #3
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	0030      	movs	r0, r6
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	0039      	movs	r1, r7
 8008a40:	f7f8 fa1c 	bl	8000e7c <__aeabi_ddiv>
 8008a44:	e794      	b.n	8008970 <_strtod_l+0x3ac>
 8008a46:	9b05      	ldr	r3, [sp, #20]
 8008a48:	1b1c      	subs	r4, r3, r4
 8008a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4c:	18e4      	adds	r4, r4, r3
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	dd72      	ble.n	8008b38 <_strtod_l+0x574>
 8008a52:	220f      	movs	r2, #15
 8008a54:	0023      	movs	r3, r4
 8008a56:	4013      	ands	r3, r2
 8008a58:	4214      	tst	r4, r2
 8008a5a:	d00a      	beq.n	8008a72 <_strtod_l+0x4ae>
 8008a5c:	4950      	ldr	r1, [pc, #320]	; (8008ba0 <_strtod_l+0x5dc>)
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	18c9      	adds	r1, r1, r3
 8008a62:	0032      	movs	r2, r6
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	6849      	ldr	r1, [r1, #4]
 8008a68:	003b      	movs	r3, r7
 8008a6a:	f7f8 fe01 	bl	8001670 <__aeabi_dmul>
 8008a6e:	0006      	movs	r6, r0
 8008a70:	000f      	movs	r7, r1
 8008a72:	230f      	movs	r3, #15
 8008a74:	439c      	bics	r4, r3
 8008a76:	d04a      	beq.n	8008b0e <_strtod_l+0x54a>
 8008a78:	3326      	adds	r3, #38	; 0x26
 8008a7a:	33ff      	adds	r3, #255	; 0xff
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	dd22      	ble.n	8008ac6 <_strtod_l+0x502>
 8008a80:	2300      	movs	r3, #0
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	9306      	str	r3, [sp, #24]
 8008a86:	930d      	str	r3, [sp, #52]	; 0x34
 8008a88:	9308      	str	r3, [sp, #32]
 8008a8a:	2322      	movs	r3, #34	; 0x22
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	4f3f      	ldr	r7, [pc, #252]	; (8008b90 <_strtod_l+0x5cc>)
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a96:	42b3      	cmp	r3, r6
 8008a98:	d100      	bne.n	8008a9c <_strtod_l+0x4d8>
 8008a9a:	e5ce      	b.n	800863a <_strtod_l+0x76>
 8008a9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a9e:	9804      	ldr	r0, [sp, #16]
 8008aa0:	f7ff f900 	bl	8007ca4 <_Bfree>
 8008aa4:	9908      	ldr	r1, [sp, #32]
 8008aa6:	9804      	ldr	r0, [sp, #16]
 8008aa8:	f7ff f8fc 	bl	8007ca4 <_Bfree>
 8008aac:	9906      	ldr	r1, [sp, #24]
 8008aae:	9804      	ldr	r0, [sp, #16]
 8008ab0:	f7ff f8f8 	bl	8007ca4 <_Bfree>
 8008ab4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ab6:	9804      	ldr	r0, [sp, #16]
 8008ab8:	f7ff f8f4 	bl	8007ca4 <_Bfree>
 8008abc:	9905      	ldr	r1, [sp, #20]
 8008abe:	9804      	ldr	r0, [sp, #16]
 8008ac0:	f7ff f8f0 	bl	8007ca4 <_Bfree>
 8008ac4:	e5b9      	b.n	800863a <_strtod_l+0x76>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	0030      	movs	r0, r6
 8008aca:	0039      	movs	r1, r7
 8008acc:	4d35      	ldr	r5, [pc, #212]	; (8008ba4 <_strtod_l+0x5e0>)
 8008ace:	1124      	asrs	r4, r4, #4
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	2c01      	cmp	r4, #1
 8008ad4:	dc1e      	bgt.n	8008b14 <_strtod_l+0x550>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <_strtod_l+0x51a>
 8008ada:	0006      	movs	r6, r0
 8008adc:	000f      	movs	r7, r1
 8008ade:	4b32      	ldr	r3, [pc, #200]	; (8008ba8 <_strtod_l+0x5e4>)
 8008ae0:	9a07      	ldr	r2, [sp, #28]
 8008ae2:	18ff      	adds	r7, r7, r3
 8008ae4:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <_strtod_l+0x5e0>)
 8008ae6:	00d2      	lsls	r2, r2, #3
 8008ae8:	189d      	adds	r5, r3, r2
 8008aea:	6828      	ldr	r0, [r5, #0]
 8008aec:	6869      	ldr	r1, [r5, #4]
 8008aee:	0032      	movs	r2, r6
 8008af0:	003b      	movs	r3, r7
 8008af2:	f7f8 fdbd 	bl	8001670 <__aeabi_dmul>
 8008af6:	4b26      	ldr	r3, [pc, #152]	; (8008b90 <_strtod_l+0x5cc>)
 8008af8:	4a2c      	ldr	r2, [pc, #176]	; (8008bac <_strtod_l+0x5e8>)
 8008afa:	0006      	movs	r6, r0
 8008afc:	400b      	ands	r3, r1
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d8be      	bhi.n	8008a80 <_strtod_l+0x4bc>
 8008b02:	4a2b      	ldr	r2, [pc, #172]	; (8008bb0 <_strtod_l+0x5ec>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d913      	bls.n	8008b30 <_strtod_l+0x56c>
 8008b08:	2601      	movs	r6, #1
 8008b0a:	4f2a      	ldr	r7, [pc, #168]	; (8008bb4 <_strtod_l+0x5f0>)
 8008b0c:	4276      	negs	r6, r6
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	e088      	b.n	8008c26 <_strtod_l+0x662>
 8008b14:	2201      	movs	r2, #1
 8008b16:	4214      	tst	r4, r2
 8008b18:	d004      	beq.n	8008b24 <_strtod_l+0x560>
 8008b1a:	682a      	ldr	r2, [r5, #0]
 8008b1c:	686b      	ldr	r3, [r5, #4]
 8008b1e:	f7f8 fda7 	bl	8001670 <__aeabi_dmul>
 8008b22:	2301      	movs	r3, #1
 8008b24:	9a07      	ldr	r2, [sp, #28]
 8008b26:	1064      	asrs	r4, r4, #1
 8008b28:	3201      	adds	r2, #1
 8008b2a:	9207      	str	r2, [sp, #28]
 8008b2c:	3508      	adds	r5, #8
 8008b2e:	e7d0      	b.n	8008ad2 <_strtod_l+0x50e>
 8008b30:	23d4      	movs	r3, #212	; 0xd4
 8008b32:	049b      	lsls	r3, r3, #18
 8008b34:	18cf      	adds	r7, r1, r3
 8008b36:	e7ea      	b.n	8008b0e <_strtod_l+0x54a>
 8008b38:	2c00      	cmp	r4, #0
 8008b3a:	d0e8      	beq.n	8008b0e <_strtod_l+0x54a>
 8008b3c:	4264      	negs	r4, r4
 8008b3e:	230f      	movs	r3, #15
 8008b40:	0022      	movs	r2, r4
 8008b42:	401a      	ands	r2, r3
 8008b44:	421c      	tst	r4, r3
 8008b46:	d00a      	beq.n	8008b5e <_strtod_l+0x59a>
 8008b48:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <_strtod_l+0x5dc>)
 8008b4a:	00d2      	lsls	r2, r2, #3
 8008b4c:	189b      	adds	r3, r3, r2
 8008b4e:	0030      	movs	r0, r6
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	0039      	movs	r1, r7
 8008b56:	f7f8 f991 	bl	8000e7c <__aeabi_ddiv>
 8008b5a:	0006      	movs	r6, r0
 8008b5c:	000f      	movs	r7, r1
 8008b5e:	1124      	asrs	r4, r4, #4
 8008b60:	d0d5      	beq.n	8008b0e <_strtod_l+0x54a>
 8008b62:	2c1f      	cmp	r4, #31
 8008b64:	dd28      	ble.n	8008bb8 <_strtod_l+0x5f4>
 8008b66:	2300      	movs	r3, #0
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	9306      	str	r3, [sp, #24]
 8008b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	2322      	movs	r3, #34	; 0x22
 8008b72:	9a04      	ldr	r2, [sp, #16]
 8008b74:	2600      	movs	r6, #0
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7a:	2700      	movs	r7, #0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d18d      	bne.n	8008a9c <_strtod_l+0x4d8>
 8008b80:	e55b      	b.n	800863a <_strtod_l+0x76>
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	00004e1f 	.word	0x00004e1f
 8008b88:	0800a631 	.word	0x0800a631
 8008b8c:	0800a85c 	.word	0x0800a85c
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	0800a629 	.word	0x0800a629
 8008b98:	0800a660 	.word	0x0800a660
 8008b9c:	0800a9ed 	.word	0x0800a9ed
 8008ba0:	0800a770 	.word	0x0800a770
 8008ba4:	0800a748 	.word	0x0800a748
 8008ba8:	fcb00000 	.word	0xfcb00000
 8008bac:	7ca00000 	.word	0x7ca00000
 8008bb0:	7c900000 	.word	0x7c900000
 8008bb4:	7fefffff 	.word	0x7fefffff
 8008bb8:	2310      	movs	r3, #16
 8008bba:	0022      	movs	r2, r4
 8008bbc:	401a      	ands	r2, r3
 8008bbe:	9207      	str	r2, [sp, #28]
 8008bc0:	421c      	tst	r4, r3
 8008bc2:	d001      	beq.n	8008bc8 <_strtod_l+0x604>
 8008bc4:	335a      	adds	r3, #90	; 0x5a
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	0030      	movs	r0, r6
 8008bca:	0039      	movs	r1, r7
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4dc4      	ldr	r5, [pc, #784]	; (8008ee0 <_strtod_l+0x91c>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4214      	tst	r4, r2
 8008bd4:	d004      	beq.n	8008be0 <_strtod_l+0x61c>
 8008bd6:	682a      	ldr	r2, [r5, #0]
 8008bd8:	686b      	ldr	r3, [r5, #4]
 8008bda:	f7f8 fd49 	bl	8001670 <__aeabi_dmul>
 8008bde:	2301      	movs	r3, #1
 8008be0:	1064      	asrs	r4, r4, #1
 8008be2:	3508      	adds	r5, #8
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d1f3      	bne.n	8008bd0 <_strtod_l+0x60c>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <_strtod_l+0x62c>
 8008bec:	0006      	movs	r6, r0
 8008bee:	000f      	movs	r7, r1
 8008bf0:	9b07      	ldr	r3, [sp, #28]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00f      	beq.n	8008c16 <_strtod_l+0x652>
 8008bf6:	236b      	movs	r3, #107	; 0x6b
 8008bf8:	007a      	lsls	r2, r7, #1
 8008bfa:	0d52      	lsrs	r2, r2, #21
 8008bfc:	0039      	movs	r1, r7
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	dd08      	ble.n	8008c16 <_strtod_l+0x652>
 8008c04:	2b1f      	cmp	r3, #31
 8008c06:	dc00      	bgt.n	8008c0a <_strtod_l+0x646>
 8008c08:	e121      	b.n	8008e4e <_strtod_l+0x88a>
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	2b34      	cmp	r3, #52	; 0x34
 8008c0e:	dc00      	bgt.n	8008c12 <_strtod_l+0x64e>
 8008c10:	e116      	b.n	8008e40 <_strtod_l+0x87c>
 8008c12:	27dc      	movs	r7, #220	; 0xdc
 8008c14:	04bf      	lsls	r7, r7, #18
 8008c16:	2200      	movs	r2, #0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	0030      	movs	r0, r6
 8008c1c:	0039      	movs	r1, r7
 8008c1e:	f7f7 fc15 	bl	800044c <__aeabi_dcmpeq>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d19f      	bne.n	8008b66 <_strtod_l+0x5a2>
 8008c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c28:	9a08      	ldr	r2, [sp, #32]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	9804      	ldr	r0, [sp, #16]
 8008c32:	f7ff f89f 	bl	8007d74 <__s2b>
 8008c36:	900d      	str	r0, [sp, #52]	; 0x34
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d100      	bne.n	8008c3e <_strtod_l+0x67a>
 8008c3c:	e720      	b.n	8008a80 <_strtod_l+0x4bc>
 8008c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c40:	9906      	ldr	r1, [sp, #24]
 8008c42:	17da      	asrs	r2, r3, #31
 8008c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c46:	1a5b      	subs	r3, r3, r1
 8008c48:	401a      	ands	r2, r3
 8008c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c4c:	9215      	str	r2, [sp, #84]	; 0x54
 8008c4e:	43db      	mvns	r3, r3
 8008c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c52:	17db      	asrs	r3, r3, #31
 8008c54:	401a      	ands	r2, r3
 8008c56:	2300      	movs	r3, #0
 8008c58:	9218      	str	r2, [sp, #96]	; 0x60
 8008c5a:	9305      	str	r3, [sp, #20]
 8008c5c:	9306      	str	r3, [sp, #24]
 8008c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c60:	9804      	ldr	r0, [sp, #16]
 8008c62:	6859      	ldr	r1, [r3, #4]
 8008c64:	f7fe ffda 	bl	8007c1c <_Balloc>
 8008c68:	9008      	str	r0, [sp, #32]
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d100      	bne.n	8008c70 <_strtod_l+0x6ac>
 8008c6e:	e70c      	b.n	8008a8a <_strtod_l+0x4c6>
 8008c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c72:	300c      	adds	r0, #12
 8008c74:	0019      	movs	r1, r3
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	310c      	adds	r1, #12
 8008c7a:	3202      	adds	r2, #2
 8008c7c:	0092      	lsls	r2, r2, #2
 8008c7e:	f000 fd8b 	bl	8009798 <memcpy>
 8008c82:	ab1e      	add	r3, sp, #120	; 0x78
 8008c84:	9301      	str	r3, [sp, #4]
 8008c86:	ab1d      	add	r3, sp, #116	; 0x74
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	0032      	movs	r2, r6
 8008c8c:	003b      	movs	r3, r7
 8008c8e:	9804      	ldr	r0, [sp, #16]
 8008c90:	9610      	str	r6, [sp, #64]	; 0x40
 8008c92:	9711      	str	r7, [sp, #68]	; 0x44
 8008c94:	f7ff fbb0 	bl	80083f8 <__d2b>
 8008c98:	901c      	str	r0, [sp, #112]	; 0x70
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d100      	bne.n	8008ca0 <_strtod_l+0x6dc>
 8008c9e:	e6f4      	b.n	8008a8a <_strtod_l+0x4c6>
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	9804      	ldr	r0, [sp, #16]
 8008ca4:	f7ff f8fa 	bl	8007e9c <__i2b>
 8008ca8:	9006      	str	r0, [sp, #24]
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d100      	bne.n	8008cb0 <_strtod_l+0x6ec>
 8008cae:	e6ec      	b.n	8008a8a <_strtod_l+0x4c6>
 8008cb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cb4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008cb6:	1ad4      	subs	r4, r2, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db01      	blt.n	8008cc0 <_strtod_l+0x6fc>
 8008cbc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008cbe:	195d      	adds	r5, r3, r5
 8008cc0:	9907      	ldr	r1, [sp, #28]
 8008cc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008cc4:	1a5b      	subs	r3, r3, r1
 8008cc6:	2136      	movs	r1, #54	; 0x36
 8008cc8:	189b      	adds	r3, r3, r2
 8008cca:	1a8a      	subs	r2, r1, r2
 8008ccc:	4985      	ldr	r1, [pc, #532]	; (8008ee4 <_strtod_l+0x920>)
 8008cce:	2001      	movs	r0, #1
 8008cd0:	468c      	mov	ip, r1
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	9114      	str	r1, [sp, #80]	; 0x50
 8008cd8:	9012      	str	r0, [sp, #72]	; 0x48
 8008cda:	4563      	cmp	r3, ip
 8008cdc:	da07      	bge.n	8008cee <_strtod_l+0x72a>
 8008cde:	4661      	mov	r1, ip
 8008ce0:	1ac9      	subs	r1, r1, r3
 8008ce2:	1a52      	subs	r2, r2, r1
 8008ce4:	291f      	cmp	r1, #31
 8008ce6:	dd00      	ble.n	8008cea <_strtod_l+0x726>
 8008ce8:	e0b6      	b.n	8008e58 <_strtod_l+0x894>
 8008cea:	4088      	lsls	r0, r1
 8008cec:	9012      	str	r0, [sp, #72]	; 0x48
 8008cee:	18ab      	adds	r3, r5, r2
 8008cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf2:	18a4      	adds	r4, r4, r2
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cf8:	191c      	adds	r4, r3, r4
 8008cfa:	002b      	movs	r3, r5
 8008cfc:	4295      	cmp	r5, r2
 8008cfe:	dd00      	ble.n	8008d02 <_strtod_l+0x73e>
 8008d00:	0013      	movs	r3, r2
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	dd00      	ble.n	8008d08 <_strtod_l+0x744>
 8008d06:	0023      	movs	r3, r4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dd04      	ble.n	8008d16 <_strtod_l+0x752>
 8008d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d0e:	1ae4      	subs	r4, r4, r3
 8008d10:	1ad2      	subs	r2, r2, r3
 8008d12:	920c      	str	r2, [sp, #48]	; 0x30
 8008d14:	1aed      	subs	r5, r5, r3
 8008d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd17      	ble.n	8008d4c <_strtod_l+0x788>
 8008d1c:	001a      	movs	r2, r3
 8008d1e:	9906      	ldr	r1, [sp, #24]
 8008d20:	9804      	ldr	r0, [sp, #16]
 8008d22:	f7ff f983 	bl	800802c <__pow5mult>
 8008d26:	9006      	str	r0, [sp, #24]
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d100      	bne.n	8008d2e <_strtod_l+0x76a>
 8008d2c:	e6ad      	b.n	8008a8a <_strtod_l+0x4c6>
 8008d2e:	0001      	movs	r1, r0
 8008d30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008d32:	9804      	ldr	r0, [sp, #16]
 8008d34:	f7ff f8ca 	bl	8007ecc <__multiply>
 8008d38:	900e      	str	r0, [sp, #56]	; 0x38
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d100      	bne.n	8008d40 <_strtod_l+0x77c>
 8008d3e:	e6a4      	b.n	8008a8a <_strtod_l+0x4c6>
 8008d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d42:	9804      	ldr	r0, [sp, #16]
 8008d44:	f7fe ffae 	bl	8007ca4 <_Bfree>
 8008d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d4a:	931c      	str	r3, [sp, #112]	; 0x70
 8008d4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd00      	ble.n	8008d54 <_strtod_l+0x790>
 8008d52:	e087      	b.n	8008e64 <_strtod_l+0x8a0>
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dd08      	ble.n	8008d6c <_strtod_l+0x7a8>
 8008d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d5c:	9908      	ldr	r1, [sp, #32]
 8008d5e:	9804      	ldr	r0, [sp, #16]
 8008d60:	f7ff f964 	bl	800802c <__pow5mult>
 8008d64:	9008      	str	r0, [sp, #32]
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d100      	bne.n	8008d6c <_strtod_l+0x7a8>
 8008d6a:	e68e      	b.n	8008a8a <_strtod_l+0x4c6>
 8008d6c:	2c00      	cmp	r4, #0
 8008d6e:	dd08      	ble.n	8008d82 <_strtod_l+0x7be>
 8008d70:	0022      	movs	r2, r4
 8008d72:	9908      	ldr	r1, [sp, #32]
 8008d74:	9804      	ldr	r0, [sp, #16]
 8008d76:	f7ff f9b5 	bl	80080e4 <__lshift>
 8008d7a:	9008      	str	r0, [sp, #32]
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d100      	bne.n	8008d82 <_strtod_l+0x7be>
 8008d80:	e683      	b.n	8008a8a <_strtod_l+0x4c6>
 8008d82:	2d00      	cmp	r5, #0
 8008d84:	dd08      	ble.n	8008d98 <_strtod_l+0x7d4>
 8008d86:	002a      	movs	r2, r5
 8008d88:	9906      	ldr	r1, [sp, #24]
 8008d8a:	9804      	ldr	r0, [sp, #16]
 8008d8c:	f7ff f9aa 	bl	80080e4 <__lshift>
 8008d90:	9006      	str	r0, [sp, #24]
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d100      	bne.n	8008d98 <_strtod_l+0x7d4>
 8008d96:	e678      	b.n	8008a8a <_strtod_l+0x4c6>
 8008d98:	9a08      	ldr	r2, [sp, #32]
 8008d9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d9c:	9804      	ldr	r0, [sp, #16]
 8008d9e:	f7ff fa2b 	bl	80081f8 <__mdiff>
 8008da2:	9005      	str	r0, [sp, #20]
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d100      	bne.n	8008daa <_strtod_l+0x7e6>
 8008da8:	e66f      	b.n	8008a8a <_strtod_l+0x4c6>
 8008daa:	2200      	movs	r2, #0
 8008dac:	68c3      	ldr	r3, [r0, #12]
 8008dae:	9906      	ldr	r1, [sp, #24]
 8008db0:	60c2      	str	r2, [r0, #12]
 8008db2:	930c      	str	r3, [sp, #48]	; 0x30
 8008db4:	f7ff fa04 	bl	80081c0 <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	da5d      	bge.n	8008e78 <_strtod_l+0x8b4>
 8008dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dbe:	4333      	orrs	r3, r6
 8008dc0:	d000      	beq.n	8008dc4 <_strtod_l+0x800>
 8008dc2:	e088      	b.n	8008ed6 <_strtod_l+0x912>
 8008dc4:	033b      	lsls	r3, r7, #12
 8008dc6:	d000      	beq.n	8008dca <_strtod_l+0x806>
 8008dc8:	e085      	b.n	8008ed6 <_strtod_l+0x912>
 8008dca:	22d6      	movs	r2, #214	; 0xd6
 8008dcc:	4b46      	ldr	r3, [pc, #280]	; (8008ee8 <_strtod_l+0x924>)
 8008dce:	04d2      	lsls	r2, r2, #19
 8008dd0:	403b      	ands	r3, r7
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d97f      	bls.n	8008ed6 <_strtod_l+0x912>
 8008dd6:	9b05      	ldr	r3, [sp, #20]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d103      	bne.n	8008de6 <_strtod_l+0x822>
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	dd77      	ble.n	8008ed6 <_strtod_l+0x912>
 8008de6:	9905      	ldr	r1, [sp, #20]
 8008de8:	2201      	movs	r2, #1
 8008dea:	9804      	ldr	r0, [sp, #16]
 8008dec:	f7ff f97a 	bl	80080e4 <__lshift>
 8008df0:	9906      	ldr	r1, [sp, #24]
 8008df2:	9005      	str	r0, [sp, #20]
 8008df4:	f7ff f9e4 	bl	80081c0 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dd6c      	ble.n	8008ed6 <_strtod_l+0x912>
 8008dfc:	9907      	ldr	r1, [sp, #28]
 8008dfe:	003b      	movs	r3, r7
 8008e00:	4a39      	ldr	r2, [pc, #228]	; (8008ee8 <_strtod_l+0x924>)
 8008e02:	2900      	cmp	r1, #0
 8008e04:	d100      	bne.n	8008e08 <_strtod_l+0x844>
 8008e06:	e094      	b.n	8008f32 <_strtod_l+0x96e>
 8008e08:	0011      	movs	r1, r2
 8008e0a:	20d6      	movs	r0, #214	; 0xd6
 8008e0c:	4039      	ands	r1, r7
 8008e0e:	04c0      	lsls	r0, r0, #19
 8008e10:	4281      	cmp	r1, r0
 8008e12:	dd00      	ble.n	8008e16 <_strtod_l+0x852>
 8008e14:	e08d      	b.n	8008f32 <_strtod_l+0x96e>
 8008e16:	23dc      	movs	r3, #220	; 0xdc
 8008e18:	049b      	lsls	r3, r3, #18
 8008e1a:	4299      	cmp	r1, r3
 8008e1c:	dc00      	bgt.n	8008e20 <_strtod_l+0x85c>
 8008e1e:	e6a7      	b.n	8008b70 <_strtod_l+0x5ac>
 8008e20:	0030      	movs	r0, r6
 8008e22:	0039      	movs	r1, r7
 8008e24:	4b31      	ldr	r3, [pc, #196]	; (8008eec <_strtod_l+0x928>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	f7f8 fc22 	bl	8001670 <__aeabi_dmul>
 8008e2c:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <_strtod_l+0x924>)
 8008e2e:	0006      	movs	r6, r0
 8008e30:	000f      	movs	r7, r1
 8008e32:	420b      	tst	r3, r1
 8008e34:	d000      	beq.n	8008e38 <_strtod_l+0x874>
 8008e36:	e631      	b.n	8008a9c <_strtod_l+0x4d8>
 8008e38:	2322      	movs	r3, #34	; 0x22
 8008e3a:	9a04      	ldr	r2, [sp, #16]
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e62d      	b.n	8008a9c <_strtod_l+0x4d8>
 8008e40:	234b      	movs	r3, #75	; 0x4b
 8008e42:	1a9a      	subs	r2, r3, r2
 8008e44:	3b4c      	subs	r3, #76	; 0x4c
 8008e46:	4093      	lsls	r3, r2
 8008e48:	4019      	ands	r1, r3
 8008e4a:	000f      	movs	r7, r1
 8008e4c:	e6e3      	b.n	8008c16 <_strtod_l+0x652>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4252      	negs	r2, r2
 8008e52:	409a      	lsls	r2, r3
 8008e54:	4016      	ands	r6, r2
 8008e56:	e6de      	b.n	8008c16 <_strtod_l+0x652>
 8008e58:	4925      	ldr	r1, [pc, #148]	; (8008ef0 <_strtod_l+0x92c>)
 8008e5a:	1acb      	subs	r3, r1, r3
 8008e5c:	0001      	movs	r1, r0
 8008e5e:	4099      	lsls	r1, r3
 8008e60:	9114      	str	r1, [sp, #80]	; 0x50
 8008e62:	e743      	b.n	8008cec <_strtod_l+0x728>
 8008e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e68:	9804      	ldr	r0, [sp, #16]
 8008e6a:	f7ff f93b 	bl	80080e4 <__lshift>
 8008e6e:	901c      	str	r0, [sp, #112]	; 0x70
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d000      	beq.n	8008e76 <_strtod_l+0x8b2>
 8008e74:	e76e      	b.n	8008d54 <_strtod_l+0x790>
 8008e76:	e608      	b.n	8008a8a <_strtod_l+0x4c6>
 8008e78:	970e      	str	r7, [sp, #56]	; 0x38
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d177      	bne.n	8008f6e <_strtod_l+0x9aa>
 8008e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e80:	033b      	lsls	r3, r7, #12
 8008e82:	0b1b      	lsrs	r3, r3, #12
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	d039      	beq.n	8008efc <_strtod_l+0x938>
 8008e88:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <_strtod_l+0x930>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d139      	bne.n	8008f02 <_strtod_l+0x93e>
 8008e8e:	2101      	movs	r1, #1
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	4249      	negs	r1, r1
 8008e94:	0032      	movs	r2, r6
 8008e96:	0008      	movs	r0, r1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <_strtod_l+0x8f0>
 8008e9c:	24d4      	movs	r4, #212	; 0xd4
 8008e9e:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <_strtod_l+0x924>)
 8008ea0:	0008      	movs	r0, r1
 8008ea2:	403b      	ands	r3, r7
 8008ea4:	04e4      	lsls	r4, r4, #19
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	d804      	bhi.n	8008eb4 <_strtod_l+0x8f0>
 8008eaa:	306c      	adds	r0, #108	; 0x6c
 8008eac:	0d1b      	lsrs	r3, r3, #20
 8008eae:	1ac3      	subs	r3, r0, r3
 8008eb0:	4099      	lsls	r1, r3
 8008eb2:	0008      	movs	r0, r1
 8008eb4:	4282      	cmp	r2, r0
 8008eb6:	d124      	bne.n	8008f02 <_strtod_l+0x93e>
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <_strtod_l+0x934>)
 8008eba:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008ebc:	4299      	cmp	r1, r3
 8008ebe:	d102      	bne.n	8008ec6 <_strtod_l+0x902>
 8008ec0:	3201      	adds	r2, #1
 8008ec2:	d100      	bne.n	8008ec6 <_strtod_l+0x902>
 8008ec4:	e5e1      	b.n	8008a8a <_strtod_l+0x4c6>
 8008ec6:	4b08      	ldr	r3, [pc, #32]	; (8008ee8 <_strtod_l+0x924>)
 8008ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008eca:	2600      	movs	r6, #0
 8008ecc:	401a      	ands	r2, r3
 8008ece:	0013      	movs	r3, r2
 8008ed0:	2280      	movs	r2, #128	; 0x80
 8008ed2:	0352      	lsls	r2, r2, #13
 8008ed4:	189f      	adds	r7, r3, r2
 8008ed6:	9b07      	ldr	r3, [sp, #28]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1a1      	bne.n	8008e20 <_strtod_l+0x85c>
 8008edc:	e5de      	b.n	8008a9c <_strtod_l+0x4d8>
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	0800a870 	.word	0x0800a870
 8008ee4:	fffffc02 	.word	0xfffffc02
 8008ee8:	7ff00000 	.word	0x7ff00000
 8008eec:	39500000 	.word	0x39500000
 8008ef0:	fffffbe2 	.word	0xfffffbe2
 8008ef4:	000fffff 	.word	0x000fffff
 8008ef8:	7fefffff 	.word	0x7fefffff
 8008efc:	4333      	orrs	r3, r6
 8008efe:	d100      	bne.n	8008f02 <_strtod_l+0x93e>
 8008f00:	e77c      	b.n	8008dfc <_strtod_l+0x838>
 8008f02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01d      	beq.n	8008f44 <_strtod_l+0x980>
 8008f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f0c:	4213      	tst	r3, r2
 8008f0e:	d0e2      	beq.n	8008ed6 <_strtod_l+0x912>
 8008f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f12:	0030      	movs	r0, r6
 8008f14:	0039      	movs	r1, r7
 8008f16:	9a07      	ldr	r2, [sp, #28]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d017      	beq.n	8008f4c <_strtod_l+0x988>
 8008f1c:	f7ff fb3a 	bl	8008594 <sulp>
 8008f20:	0002      	movs	r2, r0
 8008f22:	000b      	movs	r3, r1
 8008f24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f28:	f7f7 fc48 	bl	80007bc <__aeabi_dadd>
 8008f2c:	0006      	movs	r6, r0
 8008f2e:	000f      	movs	r7, r1
 8008f30:	e7d1      	b.n	8008ed6 <_strtod_l+0x912>
 8008f32:	2601      	movs	r6, #1
 8008f34:	4013      	ands	r3, r2
 8008f36:	4a98      	ldr	r2, [pc, #608]	; (8009198 <_strtod_l+0xbd4>)
 8008f38:	4276      	negs	r6, r6
 8008f3a:	189b      	adds	r3, r3, r2
 8008f3c:	4a97      	ldr	r2, [pc, #604]	; (800919c <_strtod_l+0xbd8>)
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	0017      	movs	r7, r2
 8008f42:	e7c8      	b.n	8008ed6 <_strtod_l+0x912>
 8008f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f46:	4233      	tst	r3, r6
 8008f48:	d0c5      	beq.n	8008ed6 <_strtod_l+0x912>
 8008f4a:	e7e1      	b.n	8008f10 <_strtod_l+0x94c>
 8008f4c:	f7ff fb22 	bl	8008594 <sulp>
 8008f50:	0002      	movs	r2, r0
 8008f52:	000b      	movs	r3, r1
 8008f54:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008f58:	f7f8 fe4c 	bl	8001bf4 <__aeabi_dsub>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	0006      	movs	r6, r0
 8008f62:	000f      	movs	r7, r1
 8008f64:	f7f7 fa72 	bl	800044c <__aeabi_dcmpeq>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d0b4      	beq.n	8008ed6 <_strtod_l+0x912>
 8008f6c:	e600      	b.n	8008b70 <_strtod_l+0x5ac>
 8008f6e:	9906      	ldr	r1, [sp, #24]
 8008f70:	9805      	ldr	r0, [sp, #20]
 8008f72:	f7ff faa1 	bl	80084b8 <__ratio>
 8008f76:	2380      	movs	r3, #128	; 0x80
 8008f78:	2200      	movs	r2, #0
 8008f7a:	05db      	lsls	r3, r3, #23
 8008f7c:	0004      	movs	r4, r0
 8008f7e:	000d      	movs	r5, r1
 8008f80:	f7f7 fa74 	bl	800046c <__aeabi_dcmple>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d06d      	beq.n	8009064 <_strtod_l+0xaa0>
 8008f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d000      	beq.n	8008f90 <_strtod_l+0x9cc>
 8008f8e:	e07e      	b.n	800908e <_strtod_l+0xaca>
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	d158      	bne.n	8009046 <_strtod_l+0xa82>
 8008f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f96:	031b      	lsls	r3, r3, #12
 8008f98:	d000      	beq.n	8008f9c <_strtod_l+0x9d8>
 8008f9a:	e07f      	b.n	800909c <_strtod_l+0xad8>
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	0020      	movs	r0, r4
 8008fa0:	0029      	movs	r1, r5
 8008fa2:	4b7f      	ldr	r3, [pc, #508]	; (80091a0 <_strtod_l+0xbdc>)
 8008fa4:	f7f7 fa58 	bl	8000458 <__aeabi_dcmplt>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d158      	bne.n	800905e <_strtod_l+0xa9a>
 8008fac:	0020      	movs	r0, r4
 8008fae:	0029      	movs	r1, r5
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4b7c      	ldr	r3, [pc, #496]	; (80091a4 <_strtod_l+0xbe0>)
 8008fb4:	f7f8 fb5c 	bl	8001670 <__aeabi_dmul>
 8008fb8:	0004      	movs	r4, r0
 8008fba:	000d      	movs	r5, r1
 8008fbc:	2380      	movs	r3, #128	; 0x80
 8008fbe:	061b      	lsls	r3, r3, #24
 8008fc0:	940a      	str	r4, [sp, #40]	; 0x28
 8008fc2:	18eb      	adds	r3, r5, r3
 8008fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	9212      	str	r2, [sp, #72]	; 0x48
 8008fcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fce:	4a76      	ldr	r2, [pc, #472]	; (80091a8 <_strtod_l+0xbe4>)
 8008fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	9314      	str	r3, [sp, #80]	; 0x50
 8008fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fd8:	4b74      	ldr	r3, [pc, #464]	; (80091ac <_strtod_l+0xbe8>)
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d000      	beq.n	8008fe0 <_strtod_l+0xa1c>
 8008fde:	e091      	b.n	8009104 <_strtod_l+0xb40>
 8008fe0:	4a73      	ldr	r2, [pc, #460]	; (80091b0 <_strtod_l+0xbec>)
 8008fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe4:	4694      	mov	ip, r2
 8008fe6:	4463      	add	r3, ip
 8008fe8:	001f      	movs	r7, r3
 8008fea:	0030      	movs	r0, r6
 8008fec:	0019      	movs	r1, r3
 8008fee:	f7ff f99b 	bl	8008328 <__ulp>
 8008ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff6:	f7f8 fb3b 	bl	8001670 <__aeabi_dmul>
 8008ffa:	0032      	movs	r2, r6
 8008ffc:	003b      	movs	r3, r7
 8008ffe:	f7f7 fbdd 	bl	80007bc <__aeabi_dadd>
 8009002:	4a69      	ldr	r2, [pc, #420]	; (80091a8 <_strtod_l+0xbe4>)
 8009004:	4b6b      	ldr	r3, [pc, #428]	; (80091b4 <_strtod_l+0xbf0>)
 8009006:	0006      	movs	r6, r0
 8009008:	400a      	ands	r2, r1
 800900a:	429a      	cmp	r2, r3
 800900c:	d949      	bls.n	80090a2 <_strtod_l+0xade>
 800900e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009010:	4b69      	ldr	r3, [pc, #420]	; (80091b8 <_strtod_l+0xbf4>)
 8009012:	429a      	cmp	r2, r3
 8009014:	d103      	bne.n	800901e <_strtod_l+0xa5a>
 8009016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009018:	3301      	adds	r3, #1
 800901a:	d100      	bne.n	800901e <_strtod_l+0xa5a>
 800901c:	e535      	b.n	8008a8a <_strtod_l+0x4c6>
 800901e:	2601      	movs	r6, #1
 8009020:	4f65      	ldr	r7, [pc, #404]	; (80091b8 <_strtod_l+0xbf4>)
 8009022:	4276      	negs	r6, r6
 8009024:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009026:	9804      	ldr	r0, [sp, #16]
 8009028:	f7fe fe3c 	bl	8007ca4 <_Bfree>
 800902c:	9908      	ldr	r1, [sp, #32]
 800902e:	9804      	ldr	r0, [sp, #16]
 8009030:	f7fe fe38 	bl	8007ca4 <_Bfree>
 8009034:	9906      	ldr	r1, [sp, #24]
 8009036:	9804      	ldr	r0, [sp, #16]
 8009038:	f7fe fe34 	bl	8007ca4 <_Bfree>
 800903c:	9905      	ldr	r1, [sp, #20]
 800903e:	9804      	ldr	r0, [sp, #16]
 8009040:	f7fe fe30 	bl	8007ca4 <_Bfree>
 8009044:	e60b      	b.n	8008c5e <_strtod_l+0x69a>
 8009046:	2e01      	cmp	r6, #1
 8009048:	d103      	bne.n	8009052 <_strtod_l+0xa8e>
 800904a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d100      	bne.n	8009052 <_strtod_l+0xa8e>
 8009050:	e58e      	b.n	8008b70 <_strtod_l+0x5ac>
 8009052:	2300      	movs	r3, #0
 8009054:	4c59      	ldr	r4, [pc, #356]	; (80091bc <_strtod_l+0xbf8>)
 8009056:	930a      	str	r3, [sp, #40]	; 0x28
 8009058:	940b      	str	r4, [sp, #44]	; 0x2c
 800905a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800905c:	e01c      	b.n	8009098 <_strtod_l+0xad4>
 800905e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009060:	4d50      	ldr	r5, [pc, #320]	; (80091a4 <_strtod_l+0xbe0>)
 8009062:	e7ab      	b.n	8008fbc <_strtod_l+0x9f8>
 8009064:	2200      	movs	r2, #0
 8009066:	0020      	movs	r0, r4
 8009068:	0029      	movs	r1, r5
 800906a:	4b4e      	ldr	r3, [pc, #312]	; (80091a4 <_strtod_l+0xbe0>)
 800906c:	f7f8 fb00 	bl	8001670 <__aeabi_dmul>
 8009070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009072:	0004      	movs	r4, r0
 8009074:	000b      	movs	r3, r1
 8009076:	000d      	movs	r5, r1
 8009078:	2a00      	cmp	r2, #0
 800907a:	d104      	bne.n	8009086 <_strtod_l+0xac2>
 800907c:	2280      	movs	r2, #128	; 0x80
 800907e:	0612      	lsls	r2, r2, #24
 8009080:	900a      	str	r0, [sp, #40]	; 0x28
 8009082:	188b      	adds	r3, r1, r2
 8009084:	e79e      	b.n	8008fc4 <_strtod_l+0xa00>
 8009086:	0002      	movs	r2, r0
 8009088:	920a      	str	r2, [sp, #40]	; 0x28
 800908a:	930b      	str	r3, [sp, #44]	; 0x2c
 800908c:	e79b      	b.n	8008fc6 <_strtod_l+0xa02>
 800908e:	2300      	movs	r3, #0
 8009090:	4c43      	ldr	r4, [pc, #268]	; (80091a0 <_strtod_l+0xbdc>)
 8009092:	930a      	str	r3, [sp, #40]	; 0x28
 8009094:	940b      	str	r4, [sp, #44]	; 0x2c
 8009096:	2400      	movs	r4, #0
 8009098:	4d41      	ldr	r5, [pc, #260]	; (80091a0 <_strtod_l+0xbdc>)
 800909a:	e794      	b.n	8008fc6 <_strtod_l+0xa02>
 800909c:	2300      	movs	r3, #0
 800909e:	4c47      	ldr	r4, [pc, #284]	; (80091bc <_strtod_l+0xbf8>)
 80090a0:	e7f7      	b.n	8009092 <_strtod_l+0xace>
 80090a2:	23d4      	movs	r3, #212	; 0xd4
 80090a4:	049b      	lsls	r3, r3, #18
 80090a6:	18cf      	adds	r7, r1, r3
 80090a8:	9b07      	ldr	r3, [sp, #28]
 80090aa:	970e      	str	r7, [sp, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1b9      	bne.n	8009024 <_strtod_l+0xa60>
 80090b0:	4b3d      	ldr	r3, [pc, #244]	; (80091a8 <_strtod_l+0xbe4>)
 80090b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090b4:	403b      	ands	r3, r7
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d1b4      	bne.n	8009024 <_strtod_l+0xa60>
 80090ba:	0020      	movs	r0, r4
 80090bc:	0029      	movs	r1, r5
 80090be:	f7f7 fa5f 	bl	8000580 <__aeabi_d2lz>
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_l2d>
 80090c6:	0002      	movs	r2, r0
 80090c8:	000b      	movs	r3, r1
 80090ca:	0020      	movs	r0, r4
 80090cc:	0029      	movs	r1, r5
 80090ce:	f7f8 fd91 	bl	8001bf4 <__aeabi_dsub>
 80090d2:	033b      	lsls	r3, r7, #12
 80090d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090d6:	0b1b      	lsrs	r3, r3, #12
 80090d8:	4333      	orrs	r3, r6
 80090da:	4313      	orrs	r3, r2
 80090dc:	0004      	movs	r4, r0
 80090de:	000d      	movs	r5, r1
 80090e0:	4a37      	ldr	r2, [pc, #220]	; (80091c0 <_strtod_l+0xbfc>)
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d054      	beq.n	8009190 <_strtod_l+0xbcc>
 80090e6:	4b37      	ldr	r3, [pc, #220]	; (80091c4 <_strtod_l+0xc00>)
 80090e8:	f7f7 f9b6 	bl	8000458 <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d000      	beq.n	80090f2 <_strtod_l+0xb2e>
 80090f0:	e4d4      	b.n	8008a9c <_strtod_l+0x4d8>
 80090f2:	0020      	movs	r0, r4
 80090f4:	0029      	movs	r1, r5
 80090f6:	4a34      	ldr	r2, [pc, #208]	; (80091c8 <_strtod_l+0xc04>)
 80090f8:	4b2a      	ldr	r3, [pc, #168]	; (80091a4 <_strtod_l+0xbe0>)
 80090fa:	f7f7 f9c1 	bl	8000480 <__aeabi_dcmpgt>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d090      	beq.n	8009024 <_strtod_l+0xa60>
 8009102:	e4cb      	b.n	8008a9c <_strtod_l+0x4d8>
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d02b      	beq.n	8009162 <_strtod_l+0xb9e>
 800910a:	23d4      	movs	r3, #212	; 0xd4
 800910c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800910e:	04db      	lsls	r3, r3, #19
 8009110:	429a      	cmp	r2, r3
 8009112:	d826      	bhi.n	8009162 <_strtod_l+0xb9e>
 8009114:	0020      	movs	r0, r4
 8009116:	0029      	movs	r1, r5
 8009118:	4a2c      	ldr	r2, [pc, #176]	; (80091cc <_strtod_l+0xc08>)
 800911a:	4b2d      	ldr	r3, [pc, #180]	; (80091d0 <_strtod_l+0xc0c>)
 800911c:	f7f7 f9a6 	bl	800046c <__aeabi_dcmple>
 8009120:	2800      	cmp	r0, #0
 8009122:	d017      	beq.n	8009154 <_strtod_l+0xb90>
 8009124:	0020      	movs	r0, r4
 8009126:	0029      	movs	r1, r5
 8009128:	f7f7 fa0c 	bl	8000544 <__aeabi_d2uiz>
 800912c:	2800      	cmp	r0, #0
 800912e:	d100      	bne.n	8009132 <_strtod_l+0xb6e>
 8009130:	3001      	adds	r0, #1
 8009132:	f7f9 f965 	bl	8002400 <__aeabi_ui2d>
 8009136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009138:	0004      	movs	r4, r0
 800913a:	000b      	movs	r3, r1
 800913c:	000d      	movs	r5, r1
 800913e:	2a00      	cmp	r2, #0
 8009140:	d122      	bne.n	8009188 <_strtod_l+0xbc4>
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	0612      	lsls	r2, r2, #24
 8009146:	188b      	adds	r3, r1, r2
 8009148:	9016      	str	r0, [sp, #88]	; 0x58
 800914a:	9317      	str	r3, [sp, #92]	; 0x5c
 800914c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800914e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009150:	9212      	str	r2, [sp, #72]	; 0x48
 8009152:	9313      	str	r3, [sp, #76]	; 0x4c
 8009154:	22d6      	movs	r2, #214	; 0xd6
 8009156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009158:	04d2      	lsls	r2, r2, #19
 800915a:	189b      	adds	r3, r3, r2
 800915c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800915e:	1a9b      	subs	r3, r3, r2
 8009160:	9313      	str	r3, [sp, #76]	; 0x4c
 8009162:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009164:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009166:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009168:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800916a:	f7ff f8dd 	bl	8008328 <__ulp>
 800916e:	0002      	movs	r2, r0
 8009170:	000b      	movs	r3, r1
 8009172:	0030      	movs	r0, r6
 8009174:	0039      	movs	r1, r7
 8009176:	f7f8 fa7b 	bl	8001670 <__aeabi_dmul>
 800917a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800917c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800917e:	f7f7 fb1d 	bl	80007bc <__aeabi_dadd>
 8009182:	0006      	movs	r6, r0
 8009184:	000f      	movs	r7, r1
 8009186:	e78f      	b.n	80090a8 <_strtod_l+0xae4>
 8009188:	0002      	movs	r2, r0
 800918a:	9216      	str	r2, [sp, #88]	; 0x58
 800918c:	9317      	str	r3, [sp, #92]	; 0x5c
 800918e:	e7dd      	b.n	800914c <_strtod_l+0xb88>
 8009190:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <_strtod_l+0xc10>)
 8009192:	f7f7 f961 	bl	8000458 <__aeabi_dcmplt>
 8009196:	e7b2      	b.n	80090fe <_strtod_l+0xb3a>
 8009198:	fff00000 	.word	0xfff00000
 800919c:	000fffff 	.word	0x000fffff
 80091a0:	3ff00000 	.word	0x3ff00000
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	7ff00000 	.word	0x7ff00000
 80091ac:	7fe00000 	.word	0x7fe00000
 80091b0:	fcb00000 	.word	0xfcb00000
 80091b4:	7c9fffff 	.word	0x7c9fffff
 80091b8:	7fefffff 	.word	0x7fefffff
 80091bc:	bff00000 	.word	0xbff00000
 80091c0:	94a03595 	.word	0x94a03595
 80091c4:	3fdfffff 	.word	0x3fdfffff
 80091c8:	35afe535 	.word	0x35afe535
 80091cc:	ffc00000 	.word	0xffc00000
 80091d0:	41dfffff 	.word	0x41dfffff
 80091d4:	3fcfffff 	.word	0x3fcfffff

080091d8 <_strtod_r>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <_strtod_r+0xc>)
 80091dc:	f7ff f9f2 	bl	80085c4 <_strtod_l>
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	20000068 	.word	0x20000068

080091e8 <_strtol_l.constprop.0>:
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	b087      	sub	sp, #28
 80091ec:	001e      	movs	r6, r3
 80091ee:	9005      	str	r0, [sp, #20]
 80091f0:	9101      	str	r1, [sp, #4]
 80091f2:	9202      	str	r2, [sp, #8]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d048      	beq.n	800928a <_strtol_l.constprop.0+0xa2>
 80091f8:	000b      	movs	r3, r1
 80091fa:	2e24      	cmp	r6, #36	; 0x24
 80091fc:	d845      	bhi.n	800928a <_strtol_l.constprop.0+0xa2>
 80091fe:	4a3b      	ldr	r2, [pc, #236]	; (80092ec <_strtol_l.constprop.0+0x104>)
 8009200:	2108      	movs	r1, #8
 8009202:	4694      	mov	ip, r2
 8009204:	001a      	movs	r2, r3
 8009206:	4660      	mov	r0, ip
 8009208:	7814      	ldrb	r4, [r2, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	5d00      	ldrb	r0, [r0, r4]
 800920e:	001d      	movs	r5, r3
 8009210:	0007      	movs	r7, r0
 8009212:	400f      	ands	r7, r1
 8009214:	4208      	tst	r0, r1
 8009216:	d1f5      	bne.n	8009204 <_strtol_l.constprop.0+0x1c>
 8009218:	2c2d      	cmp	r4, #45	; 0x2d
 800921a:	d13d      	bne.n	8009298 <_strtol_l.constprop.0+0xb0>
 800921c:	2701      	movs	r7, #1
 800921e:	781c      	ldrb	r4, [r3, #0]
 8009220:	1c95      	adds	r5, r2, #2
 8009222:	2e00      	cmp	r6, #0
 8009224:	d05e      	beq.n	80092e4 <_strtol_l.constprop.0+0xfc>
 8009226:	2e10      	cmp	r6, #16
 8009228:	d109      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 800922a:	2c30      	cmp	r4, #48	; 0x30
 800922c:	d107      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 800922e:	2220      	movs	r2, #32
 8009230:	782b      	ldrb	r3, [r5, #0]
 8009232:	4393      	bics	r3, r2
 8009234:	2b58      	cmp	r3, #88	; 0x58
 8009236:	d150      	bne.n	80092da <_strtol_l.constprop.0+0xf2>
 8009238:	2610      	movs	r6, #16
 800923a:	786c      	ldrb	r4, [r5, #1]
 800923c:	3502      	adds	r5, #2
 800923e:	4b2c      	ldr	r3, [pc, #176]	; (80092f0 <_strtol_l.constprop.0+0x108>)
 8009240:	0031      	movs	r1, r6
 8009242:	18fb      	adds	r3, r7, r3
 8009244:	0018      	movs	r0, r3
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	f7f7 f800 	bl	800024c <__aeabi_uidivmod>
 800924c:	2200      	movs	r2, #0
 800924e:	9104      	str	r1, [sp, #16]
 8009250:	2101      	movs	r1, #1
 8009252:	4684      	mov	ip, r0
 8009254:	0010      	movs	r0, r2
 8009256:	4249      	negs	r1, r1
 8009258:	0023      	movs	r3, r4
 800925a:	3b30      	subs	r3, #48	; 0x30
 800925c:	2b09      	cmp	r3, #9
 800925e:	d903      	bls.n	8009268 <_strtol_l.constprop.0+0x80>
 8009260:	3b11      	subs	r3, #17
 8009262:	2b19      	cmp	r3, #25
 8009264:	d81d      	bhi.n	80092a2 <_strtol_l.constprop.0+0xba>
 8009266:	330a      	adds	r3, #10
 8009268:	429e      	cmp	r6, r3
 800926a:	dd1e      	ble.n	80092aa <_strtol_l.constprop.0+0xc2>
 800926c:	1c54      	adds	r4, r2, #1
 800926e:	d009      	beq.n	8009284 <_strtol_l.constprop.0+0x9c>
 8009270:	000a      	movs	r2, r1
 8009272:	4584      	cmp	ip, r0
 8009274:	d306      	bcc.n	8009284 <_strtol_l.constprop.0+0x9c>
 8009276:	d102      	bne.n	800927e <_strtol_l.constprop.0+0x96>
 8009278:	9c04      	ldr	r4, [sp, #16]
 800927a:	429c      	cmp	r4, r3
 800927c:	db02      	blt.n	8009284 <_strtol_l.constprop.0+0x9c>
 800927e:	2201      	movs	r2, #1
 8009280:	4370      	muls	r0, r6
 8009282:	1818      	adds	r0, r3, r0
 8009284:	782c      	ldrb	r4, [r5, #0]
 8009286:	3501      	adds	r5, #1
 8009288:	e7e6      	b.n	8009258 <_strtol_l.constprop.0+0x70>
 800928a:	f7fd fce5 	bl	8006c58 <__errno>
 800928e:	2316      	movs	r3, #22
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	2000      	movs	r0, #0
 8009294:	b007      	add	sp, #28
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	2c2b      	cmp	r4, #43	; 0x2b
 800929a:	d1c2      	bne.n	8009222 <_strtol_l.constprop.0+0x3a>
 800929c:	781c      	ldrb	r4, [r3, #0]
 800929e:	1c95      	adds	r5, r2, #2
 80092a0:	e7bf      	b.n	8009222 <_strtol_l.constprop.0+0x3a>
 80092a2:	0023      	movs	r3, r4
 80092a4:	3b61      	subs	r3, #97	; 0x61
 80092a6:	2b19      	cmp	r3, #25
 80092a8:	d9dd      	bls.n	8009266 <_strtol_l.constprop.0+0x7e>
 80092aa:	1c53      	adds	r3, r2, #1
 80092ac:	d109      	bne.n	80092c2 <_strtol_l.constprop.0+0xda>
 80092ae:	2322      	movs	r3, #34	; 0x22
 80092b0:	9a05      	ldr	r2, [sp, #20]
 80092b2:	9803      	ldr	r0, [sp, #12]
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	9b02      	ldr	r3, [sp, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0eb      	beq.n	8009294 <_strtol_l.constprop.0+0xac>
 80092bc:	1e6b      	subs	r3, r5, #1
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	e007      	b.n	80092d2 <_strtol_l.constprop.0+0xea>
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	d000      	beq.n	80092c8 <_strtol_l.constprop.0+0xe0>
 80092c6:	4240      	negs	r0, r0
 80092c8:	9b02      	ldr	r3, [sp, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0e2      	beq.n	8009294 <_strtol_l.constprop.0+0xac>
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1f4      	bne.n	80092bc <_strtol_l.constprop.0+0xd4>
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	9a01      	ldr	r2, [sp, #4]
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	e7dc      	b.n	8009294 <_strtol_l.constprop.0+0xac>
 80092da:	2430      	movs	r4, #48	; 0x30
 80092dc:	2e00      	cmp	r6, #0
 80092de:	d1ae      	bne.n	800923e <_strtol_l.constprop.0+0x56>
 80092e0:	3608      	adds	r6, #8
 80092e2:	e7ac      	b.n	800923e <_strtol_l.constprop.0+0x56>
 80092e4:	2c30      	cmp	r4, #48	; 0x30
 80092e6:	d0a2      	beq.n	800922e <_strtol_l.constprop.0+0x46>
 80092e8:	260a      	movs	r6, #10
 80092ea:	e7a8      	b.n	800923e <_strtol_l.constprop.0+0x56>
 80092ec:	0800a899 	.word	0x0800a899
 80092f0:	7fffffff 	.word	0x7fffffff

080092f4 <_strtol_r>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	f7ff ff77 	bl	80091e8 <_strtol_l.constprop.0>
 80092fa:	bd10      	pop	{r4, pc}

080092fc <__ssputs_r>:
 80092fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fe:	b085      	sub	sp, #20
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	9203      	str	r2, [sp, #12]
 8009304:	688e      	ldr	r6, [r1, #8]
 8009306:	9a01      	ldr	r2, [sp, #4]
 8009308:	0007      	movs	r7, r0
 800930a:	000c      	movs	r4, r1
 800930c:	680b      	ldr	r3, [r1, #0]
 800930e:	4296      	cmp	r6, r2
 8009310:	d831      	bhi.n	8009376 <__ssputs_r+0x7a>
 8009312:	898a      	ldrh	r2, [r1, #12]
 8009314:	2190      	movs	r1, #144	; 0x90
 8009316:	00c9      	lsls	r1, r1, #3
 8009318:	420a      	tst	r2, r1
 800931a:	d029      	beq.n	8009370 <__ssputs_r+0x74>
 800931c:	2003      	movs	r0, #3
 800931e:	6921      	ldr	r1, [r4, #16]
 8009320:	1a5b      	subs	r3, r3, r1
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	6963      	ldr	r3, [r4, #20]
 8009326:	4343      	muls	r3, r0
 8009328:	0fdd      	lsrs	r5, r3, #31
 800932a:	18ed      	adds	r5, r5, r3
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	9802      	ldr	r0, [sp, #8]
 8009330:	3301      	adds	r3, #1
 8009332:	181b      	adds	r3, r3, r0
 8009334:	106d      	asrs	r5, r5, #1
 8009336:	42ab      	cmp	r3, r5
 8009338:	d900      	bls.n	800933c <__ssputs_r+0x40>
 800933a:	001d      	movs	r5, r3
 800933c:	0552      	lsls	r2, r2, #21
 800933e:	d529      	bpl.n	8009394 <__ssputs_r+0x98>
 8009340:	0029      	movs	r1, r5
 8009342:	0038      	movs	r0, r7
 8009344:	f7fe fbd8 	bl	8007af8 <_malloc_r>
 8009348:	1e06      	subs	r6, r0, #0
 800934a:	d02d      	beq.n	80093a8 <__ssputs_r+0xac>
 800934c:	9a02      	ldr	r2, [sp, #8]
 800934e:	6921      	ldr	r1, [r4, #16]
 8009350:	f000 fa22 	bl	8009798 <memcpy>
 8009354:	89a2      	ldrh	r2, [r4, #12]
 8009356:	4b19      	ldr	r3, [pc, #100]	; (80093bc <__ssputs_r+0xc0>)
 8009358:	401a      	ands	r2, r3
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	4313      	orrs	r3, r2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	9b02      	ldr	r3, [sp, #8]
 8009362:	6126      	str	r6, [r4, #16]
 8009364:	18f6      	adds	r6, r6, r3
 8009366:	6026      	str	r6, [r4, #0]
 8009368:	6165      	str	r5, [r4, #20]
 800936a:	9e01      	ldr	r6, [sp, #4]
 800936c:	1aed      	subs	r5, r5, r3
 800936e:	60a5      	str	r5, [r4, #8]
 8009370:	9b01      	ldr	r3, [sp, #4]
 8009372:	429e      	cmp	r6, r3
 8009374:	d900      	bls.n	8009378 <__ssputs_r+0x7c>
 8009376:	9e01      	ldr	r6, [sp, #4]
 8009378:	0032      	movs	r2, r6
 800937a:	9903      	ldr	r1, [sp, #12]
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	f000 f9d4 	bl	800972a <memmove>
 8009382:	2000      	movs	r0, #0
 8009384:	68a3      	ldr	r3, [r4, #8]
 8009386:	1b9b      	subs	r3, r3, r6
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	199b      	adds	r3, r3, r6
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	b005      	add	sp, #20
 8009392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009394:	002a      	movs	r2, r5
 8009396:	0038      	movs	r0, r7
 8009398:	f000 fdc8 	bl	8009f2c <_realloc_r>
 800939c:	1e06      	subs	r6, r0, #0
 800939e:	d1df      	bne.n	8009360 <__ssputs_r+0x64>
 80093a0:	0038      	movs	r0, r7
 80093a2:	6921      	ldr	r1, [r4, #16]
 80093a4:	f7fe fb32 	bl	8007a0c <_free_r>
 80093a8:	230c      	movs	r3, #12
 80093aa:	2001      	movs	r0, #1
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	89a2      	ldrh	r2, [r4, #12]
 80093b0:	3334      	adds	r3, #52	; 0x34
 80093b2:	4313      	orrs	r3, r2
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	4240      	negs	r0, r0
 80093b8:	e7ea      	b.n	8009390 <__ssputs_r+0x94>
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	fffffb7f 	.word	0xfffffb7f

080093c0 <_svfiprintf_r>:
 80093c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c2:	b0a1      	sub	sp, #132	; 0x84
 80093c4:	9003      	str	r0, [sp, #12]
 80093c6:	001d      	movs	r5, r3
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	000f      	movs	r7, r1
 80093cc:	0016      	movs	r6, r2
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	d511      	bpl.n	80093f6 <_svfiprintf_r+0x36>
 80093d2:	690b      	ldr	r3, [r1, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10e      	bne.n	80093f6 <_svfiprintf_r+0x36>
 80093d8:	2140      	movs	r1, #64	; 0x40
 80093da:	f7fe fb8d 	bl	8007af8 <_malloc_r>
 80093de:	6038      	str	r0, [r7, #0]
 80093e0:	6138      	str	r0, [r7, #16]
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d105      	bne.n	80093f2 <_svfiprintf_r+0x32>
 80093e6:	230c      	movs	r3, #12
 80093e8:	9a03      	ldr	r2, [sp, #12]
 80093ea:	3801      	subs	r0, #1
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	b021      	add	sp, #132	; 0x84
 80093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	2300      	movs	r3, #0
 80093f8:	ac08      	add	r4, sp, #32
 80093fa:	6163      	str	r3, [r4, #20]
 80093fc:	3320      	adds	r3, #32
 80093fe:	7663      	strb	r3, [r4, #25]
 8009400:	3310      	adds	r3, #16
 8009402:	76a3      	strb	r3, [r4, #26]
 8009404:	9507      	str	r5, [sp, #28]
 8009406:	0035      	movs	r5, r6
 8009408:	782b      	ldrb	r3, [r5, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <_svfiprintf_r+0x52>
 800940e:	2b25      	cmp	r3, #37	; 0x25
 8009410:	d148      	bne.n	80094a4 <_svfiprintf_r+0xe4>
 8009412:	1bab      	subs	r3, r5, r6
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	42b5      	cmp	r5, r6
 8009418:	d00b      	beq.n	8009432 <_svfiprintf_r+0x72>
 800941a:	0032      	movs	r2, r6
 800941c:	0039      	movs	r1, r7
 800941e:	9803      	ldr	r0, [sp, #12]
 8009420:	f7ff ff6c 	bl	80092fc <__ssputs_r>
 8009424:	3001      	adds	r0, #1
 8009426:	d100      	bne.n	800942a <_svfiprintf_r+0x6a>
 8009428:	e0af      	b.n	800958a <_svfiprintf_r+0x1ca>
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	189b      	adds	r3, r3, r2
 8009430:	6163      	str	r3, [r4, #20]
 8009432:	782b      	ldrb	r3, [r5, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d100      	bne.n	800943a <_svfiprintf_r+0x7a>
 8009438:	e0a7      	b.n	800958a <_svfiprintf_r+0x1ca>
 800943a:	2201      	movs	r2, #1
 800943c:	2300      	movs	r3, #0
 800943e:	4252      	negs	r2, r2
 8009440:	6062      	str	r2, [r4, #4]
 8009442:	a904      	add	r1, sp, #16
 8009444:	3254      	adds	r2, #84	; 0x54
 8009446:	1852      	adds	r2, r2, r1
 8009448:	1c6e      	adds	r6, r5, #1
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	60e3      	str	r3, [r4, #12]
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	7013      	strb	r3, [r2, #0]
 8009452:	65a3      	str	r3, [r4, #88]	; 0x58
 8009454:	4b55      	ldr	r3, [pc, #340]	; (80095ac <_svfiprintf_r+0x1ec>)
 8009456:	2205      	movs	r2, #5
 8009458:	0018      	movs	r0, r3
 800945a:	7831      	ldrb	r1, [r6, #0]
 800945c:	9305      	str	r3, [sp, #20]
 800945e:	f7fd fc28 	bl	8006cb2 <memchr>
 8009462:	1c75      	adds	r5, r6, #1
 8009464:	2800      	cmp	r0, #0
 8009466:	d11f      	bne.n	80094a8 <_svfiprintf_r+0xe8>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	06d3      	lsls	r3, r2, #27
 800946c:	d504      	bpl.n	8009478 <_svfiprintf_r+0xb8>
 800946e:	2353      	movs	r3, #83	; 0x53
 8009470:	a904      	add	r1, sp, #16
 8009472:	185b      	adds	r3, r3, r1
 8009474:	2120      	movs	r1, #32
 8009476:	7019      	strb	r1, [r3, #0]
 8009478:	0713      	lsls	r3, r2, #28
 800947a:	d504      	bpl.n	8009486 <_svfiprintf_r+0xc6>
 800947c:	2353      	movs	r3, #83	; 0x53
 800947e:	a904      	add	r1, sp, #16
 8009480:	185b      	adds	r3, r3, r1
 8009482:	212b      	movs	r1, #43	; 0x2b
 8009484:	7019      	strb	r1, [r3, #0]
 8009486:	7833      	ldrb	r3, [r6, #0]
 8009488:	2b2a      	cmp	r3, #42	; 0x2a
 800948a:	d016      	beq.n	80094ba <_svfiprintf_r+0xfa>
 800948c:	0035      	movs	r5, r6
 800948e:	2100      	movs	r1, #0
 8009490:	200a      	movs	r0, #10
 8009492:	68e3      	ldr	r3, [r4, #12]
 8009494:	782a      	ldrb	r2, [r5, #0]
 8009496:	1c6e      	adds	r6, r5, #1
 8009498:	3a30      	subs	r2, #48	; 0x30
 800949a:	2a09      	cmp	r2, #9
 800949c:	d94e      	bls.n	800953c <_svfiprintf_r+0x17c>
 800949e:	2900      	cmp	r1, #0
 80094a0:	d111      	bne.n	80094c6 <_svfiprintf_r+0x106>
 80094a2:	e017      	b.n	80094d4 <_svfiprintf_r+0x114>
 80094a4:	3501      	adds	r5, #1
 80094a6:	e7af      	b.n	8009408 <_svfiprintf_r+0x48>
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	6822      	ldr	r2, [r4, #0]
 80094ac:	1ac0      	subs	r0, r0, r3
 80094ae:	2301      	movs	r3, #1
 80094b0:	4083      	lsls	r3, r0
 80094b2:	4313      	orrs	r3, r2
 80094b4:	002e      	movs	r6, r5
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	e7cc      	b.n	8009454 <_svfiprintf_r+0x94>
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	1d19      	adds	r1, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9107      	str	r1, [sp, #28]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	db01      	blt.n	80094ca <_svfiprintf_r+0x10a>
 80094c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c8:	e004      	b.n	80094d4 <_svfiprintf_r+0x114>
 80094ca:	425b      	negs	r3, r3
 80094cc:	60e3      	str	r3, [r4, #12]
 80094ce:	2302      	movs	r3, #2
 80094d0:	4313      	orrs	r3, r2
 80094d2:	6023      	str	r3, [r4, #0]
 80094d4:	782b      	ldrb	r3, [r5, #0]
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d10a      	bne.n	80094f0 <_svfiprintf_r+0x130>
 80094da:	786b      	ldrb	r3, [r5, #1]
 80094dc:	2b2a      	cmp	r3, #42	; 0x2a
 80094de:	d135      	bne.n	800954c <_svfiprintf_r+0x18c>
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	3502      	adds	r5, #2
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	9207      	str	r2, [sp, #28]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db2b      	blt.n	8009546 <_svfiprintf_r+0x186>
 80094ee:	9309      	str	r3, [sp, #36]	; 0x24
 80094f0:	4e2f      	ldr	r6, [pc, #188]	; (80095b0 <_svfiprintf_r+0x1f0>)
 80094f2:	2203      	movs	r2, #3
 80094f4:	0030      	movs	r0, r6
 80094f6:	7829      	ldrb	r1, [r5, #0]
 80094f8:	f7fd fbdb 	bl	8006cb2 <memchr>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d006      	beq.n	800950e <_svfiprintf_r+0x14e>
 8009500:	2340      	movs	r3, #64	; 0x40
 8009502:	1b80      	subs	r0, r0, r6
 8009504:	4083      	lsls	r3, r0
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	3501      	adds	r5, #1
 800950a:	4313      	orrs	r3, r2
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	7829      	ldrb	r1, [r5, #0]
 8009510:	2206      	movs	r2, #6
 8009512:	4828      	ldr	r0, [pc, #160]	; (80095b4 <_svfiprintf_r+0x1f4>)
 8009514:	1c6e      	adds	r6, r5, #1
 8009516:	7621      	strb	r1, [r4, #24]
 8009518:	f7fd fbcb 	bl	8006cb2 <memchr>
 800951c:	2800      	cmp	r0, #0
 800951e:	d03c      	beq.n	800959a <_svfiprintf_r+0x1da>
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <_svfiprintf_r+0x1f8>)
 8009522:	2b00      	cmp	r3, #0
 8009524:	d125      	bne.n	8009572 <_svfiprintf_r+0x1b2>
 8009526:	2207      	movs	r2, #7
 8009528:	9b07      	ldr	r3, [sp, #28]
 800952a:	3307      	adds	r3, #7
 800952c:	4393      	bics	r3, r2
 800952e:	3308      	adds	r3, #8
 8009530:	9307      	str	r3, [sp, #28]
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	9a04      	ldr	r2, [sp, #16]
 8009536:	189b      	adds	r3, r3, r2
 8009538:	6163      	str	r3, [r4, #20]
 800953a:	e764      	b.n	8009406 <_svfiprintf_r+0x46>
 800953c:	4343      	muls	r3, r0
 800953e:	0035      	movs	r5, r6
 8009540:	2101      	movs	r1, #1
 8009542:	189b      	adds	r3, r3, r2
 8009544:	e7a6      	b.n	8009494 <_svfiprintf_r+0xd4>
 8009546:	2301      	movs	r3, #1
 8009548:	425b      	negs	r3, r3
 800954a:	e7d0      	b.n	80094ee <_svfiprintf_r+0x12e>
 800954c:	2300      	movs	r3, #0
 800954e:	200a      	movs	r0, #10
 8009550:	001a      	movs	r2, r3
 8009552:	3501      	adds	r5, #1
 8009554:	6063      	str	r3, [r4, #4]
 8009556:	7829      	ldrb	r1, [r5, #0]
 8009558:	1c6e      	adds	r6, r5, #1
 800955a:	3930      	subs	r1, #48	; 0x30
 800955c:	2909      	cmp	r1, #9
 800955e:	d903      	bls.n	8009568 <_svfiprintf_r+0x1a8>
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0c5      	beq.n	80094f0 <_svfiprintf_r+0x130>
 8009564:	9209      	str	r2, [sp, #36]	; 0x24
 8009566:	e7c3      	b.n	80094f0 <_svfiprintf_r+0x130>
 8009568:	4342      	muls	r2, r0
 800956a:	0035      	movs	r5, r6
 800956c:	2301      	movs	r3, #1
 800956e:	1852      	adds	r2, r2, r1
 8009570:	e7f1      	b.n	8009556 <_svfiprintf_r+0x196>
 8009572:	aa07      	add	r2, sp, #28
 8009574:	9200      	str	r2, [sp, #0]
 8009576:	0021      	movs	r1, r4
 8009578:	003a      	movs	r2, r7
 800957a:	4b10      	ldr	r3, [pc, #64]	; (80095bc <_svfiprintf_r+0x1fc>)
 800957c:	9803      	ldr	r0, [sp, #12]
 800957e:	f7fc fc03 	bl	8005d88 <_printf_float>
 8009582:	9004      	str	r0, [sp, #16]
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	3301      	adds	r3, #1
 8009588:	d1d3      	bne.n	8009532 <_svfiprintf_r+0x172>
 800958a:	89bb      	ldrh	r3, [r7, #12]
 800958c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800958e:	065b      	lsls	r3, r3, #25
 8009590:	d400      	bmi.n	8009594 <_svfiprintf_r+0x1d4>
 8009592:	e72c      	b.n	80093ee <_svfiprintf_r+0x2e>
 8009594:	2001      	movs	r0, #1
 8009596:	4240      	negs	r0, r0
 8009598:	e729      	b.n	80093ee <_svfiprintf_r+0x2e>
 800959a:	aa07      	add	r2, sp, #28
 800959c:	9200      	str	r2, [sp, #0]
 800959e:	0021      	movs	r1, r4
 80095a0:	003a      	movs	r2, r7
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <_svfiprintf_r+0x1fc>)
 80095a4:	9803      	ldr	r0, [sp, #12]
 80095a6:	f7fc feb5 	bl	8006314 <_printf_i>
 80095aa:	e7ea      	b.n	8009582 <_svfiprintf_r+0x1c2>
 80095ac:	0800a999 	.word	0x0800a999
 80095b0:	0800a99f 	.word	0x0800a99f
 80095b4:	0800a9a3 	.word	0x0800a9a3
 80095b8:	08005d89 	.word	0x08005d89
 80095bc:	080092fd 	.word	0x080092fd

080095c0 <__sflush_r>:
 80095c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095c2:	898b      	ldrh	r3, [r1, #12]
 80095c4:	0005      	movs	r5, r0
 80095c6:	000c      	movs	r4, r1
 80095c8:	071a      	lsls	r2, r3, #28
 80095ca:	d45c      	bmi.n	8009686 <__sflush_r+0xc6>
 80095cc:	684a      	ldr	r2, [r1, #4]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	dc04      	bgt.n	80095dc <__sflush_r+0x1c>
 80095d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	dc01      	bgt.n	80095dc <__sflush_r+0x1c>
 80095d8:	2000      	movs	r0, #0
 80095da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80095de:	2f00      	cmp	r7, #0
 80095e0:	d0fa      	beq.n	80095d8 <__sflush_r+0x18>
 80095e2:	2200      	movs	r2, #0
 80095e4:	2080      	movs	r0, #128	; 0x80
 80095e6:	682e      	ldr	r6, [r5, #0]
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	001a      	movs	r2, r3
 80095ec:	0140      	lsls	r0, r0, #5
 80095ee:	6a21      	ldr	r1, [r4, #32]
 80095f0:	4002      	ands	r2, r0
 80095f2:	4203      	tst	r3, r0
 80095f4:	d034      	beq.n	8009660 <__sflush_r+0xa0>
 80095f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	075b      	lsls	r3, r3, #29
 80095fc:	d506      	bpl.n	800960c <__sflush_r+0x4c>
 80095fe:	6863      	ldr	r3, [r4, #4]
 8009600:	1ac0      	subs	r0, r0, r3
 8009602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <__sflush_r+0x4c>
 8009608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800960a:	1ac0      	subs	r0, r0, r3
 800960c:	0002      	movs	r2, r0
 800960e:	2300      	movs	r3, #0
 8009610:	0028      	movs	r0, r5
 8009612:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	47b8      	blx	r7
 8009618:	89a2      	ldrh	r2, [r4, #12]
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d106      	bne.n	800962c <__sflush_r+0x6c>
 800961e:	6829      	ldr	r1, [r5, #0]
 8009620:	291d      	cmp	r1, #29
 8009622:	d82c      	bhi.n	800967e <__sflush_r+0xbe>
 8009624:	4b2a      	ldr	r3, [pc, #168]	; (80096d0 <__sflush_r+0x110>)
 8009626:	410b      	asrs	r3, r1
 8009628:	07db      	lsls	r3, r3, #31
 800962a:	d428      	bmi.n	800967e <__sflush_r+0xbe>
 800962c:	2300      	movs	r3, #0
 800962e:	6063      	str	r3, [r4, #4]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	04d2      	lsls	r2, r2, #19
 8009636:	d505      	bpl.n	8009644 <__sflush_r+0x84>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <__sflush_r+0x82>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d100      	bne.n	8009644 <__sflush_r+0x84>
 8009642:	6560      	str	r0, [r4, #84]	; 0x54
 8009644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009646:	602e      	str	r6, [r5, #0]
 8009648:	2900      	cmp	r1, #0
 800964a:	d0c5      	beq.n	80095d8 <__sflush_r+0x18>
 800964c:	0023      	movs	r3, r4
 800964e:	3344      	adds	r3, #68	; 0x44
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <__sflush_r+0x9a>
 8009654:	0028      	movs	r0, r5
 8009656:	f7fe f9d9 	bl	8007a0c <_free_r>
 800965a:	2000      	movs	r0, #0
 800965c:	6360      	str	r0, [r4, #52]	; 0x34
 800965e:	e7bc      	b.n	80095da <__sflush_r+0x1a>
 8009660:	2301      	movs	r3, #1
 8009662:	0028      	movs	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d1c6      	bne.n	80095f8 <__sflush_r+0x38>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0c3      	beq.n	80095f8 <__sflush_r+0x38>
 8009670:	2b1d      	cmp	r3, #29
 8009672:	d001      	beq.n	8009678 <__sflush_r+0xb8>
 8009674:	2b16      	cmp	r3, #22
 8009676:	d101      	bne.n	800967c <__sflush_r+0xbc>
 8009678:	602e      	str	r6, [r5, #0]
 800967a:	e7ad      	b.n	80095d8 <__sflush_r+0x18>
 800967c:	89a2      	ldrh	r2, [r4, #12]
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	4313      	orrs	r3, r2
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	e7a9      	b.n	80095da <__sflush_r+0x1a>
 8009686:	690e      	ldr	r6, [r1, #16]
 8009688:	2e00      	cmp	r6, #0
 800968a:	d0a5      	beq.n	80095d8 <__sflush_r+0x18>
 800968c:	680f      	ldr	r7, [r1, #0]
 800968e:	600e      	str	r6, [r1, #0]
 8009690:	1bba      	subs	r2, r7, r6
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	079b      	lsls	r3, r3, #30
 8009698:	d100      	bne.n	800969c <__sflush_r+0xdc>
 800969a:	694a      	ldr	r2, [r1, #20]
 800969c:	60a2      	str	r2, [r4, #8]
 800969e:	9b01      	ldr	r3, [sp, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dd99      	ble.n	80095d8 <__sflush_r+0x18>
 80096a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096a6:	0032      	movs	r2, r6
 80096a8:	001f      	movs	r7, r3
 80096aa:	0028      	movs	r0, r5
 80096ac:	9b01      	ldr	r3, [sp, #4]
 80096ae:	6a21      	ldr	r1, [r4, #32]
 80096b0:	47b8      	blx	r7
 80096b2:	2800      	cmp	r0, #0
 80096b4:	dc06      	bgt.n	80096c4 <__sflush_r+0x104>
 80096b6:	2340      	movs	r3, #64	; 0x40
 80096b8:	2001      	movs	r0, #1
 80096ba:	89a2      	ldrh	r2, [r4, #12]
 80096bc:	4240      	negs	r0, r0
 80096be:	4313      	orrs	r3, r2
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	e78a      	b.n	80095da <__sflush_r+0x1a>
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	1836      	adds	r6, r6, r0
 80096c8:	1a1b      	subs	r3, r3, r0
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	e7e7      	b.n	800969e <__sflush_r+0xde>
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	dfbffffe 	.word	0xdfbffffe

080096d4 <_fflush_r>:
 80096d4:	690b      	ldr	r3, [r1, #16]
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	0005      	movs	r5, r0
 80096da:	000c      	movs	r4, r1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <_fflush_r+0x12>
 80096e0:	2500      	movs	r5, #0
 80096e2:	0028      	movs	r0, r5
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d004      	beq.n	80096f4 <_fflush_r+0x20>
 80096ea:	6a03      	ldr	r3, [r0, #32]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <_fflush_r+0x20>
 80096f0:	f7fd f9b8 	bl	8006a64 <__sinit>
 80096f4:	220c      	movs	r2, #12
 80096f6:	5ea3      	ldrsh	r3, [r4, r2]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f1      	beq.n	80096e0 <_fflush_r+0xc>
 80096fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096fe:	07d2      	lsls	r2, r2, #31
 8009700:	d404      	bmi.n	800970c <_fflush_r+0x38>
 8009702:	059b      	lsls	r3, r3, #22
 8009704:	d402      	bmi.n	800970c <_fflush_r+0x38>
 8009706:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009708:	f7fd fad1 	bl	8006cae <__retarget_lock_acquire_recursive>
 800970c:	0028      	movs	r0, r5
 800970e:	0021      	movs	r1, r4
 8009710:	f7ff ff56 	bl	80095c0 <__sflush_r>
 8009714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009716:	0005      	movs	r5, r0
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d4e2      	bmi.n	80096e2 <_fflush_r+0xe>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	059b      	lsls	r3, r3, #22
 8009720:	d4df      	bmi.n	80096e2 <_fflush_r+0xe>
 8009722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009724:	f7fd fac4 	bl	8006cb0 <__retarget_lock_release_recursive>
 8009728:	e7db      	b.n	80096e2 <_fflush_r+0xe>

0800972a <memmove>:
 800972a:	b510      	push	{r4, lr}
 800972c:	4288      	cmp	r0, r1
 800972e:	d902      	bls.n	8009736 <memmove+0xc>
 8009730:	188b      	adds	r3, r1, r2
 8009732:	4298      	cmp	r0, r3
 8009734:	d303      	bcc.n	800973e <memmove+0x14>
 8009736:	2300      	movs	r3, #0
 8009738:	e007      	b.n	800974a <memmove+0x20>
 800973a:	5c8b      	ldrb	r3, [r1, r2]
 800973c:	5483      	strb	r3, [r0, r2]
 800973e:	3a01      	subs	r2, #1
 8009740:	d2fb      	bcs.n	800973a <memmove+0x10>
 8009742:	bd10      	pop	{r4, pc}
 8009744:	5ccc      	ldrb	r4, [r1, r3]
 8009746:	54c4      	strb	r4, [r0, r3]
 8009748:	3301      	adds	r3, #1
 800974a:	429a      	cmp	r2, r3
 800974c:	d1fa      	bne.n	8009744 <memmove+0x1a>
 800974e:	e7f8      	b.n	8009742 <memmove+0x18>

08009750 <strncmp>:
 8009750:	b530      	push	{r4, r5, lr}
 8009752:	0005      	movs	r5, r0
 8009754:	1e10      	subs	r0, r2, #0
 8009756:	d00b      	beq.n	8009770 <strncmp+0x20>
 8009758:	2400      	movs	r4, #0
 800975a:	3a01      	subs	r2, #1
 800975c:	5d2b      	ldrb	r3, [r5, r4]
 800975e:	5d08      	ldrb	r0, [r1, r4]
 8009760:	4283      	cmp	r3, r0
 8009762:	d104      	bne.n	800976e <strncmp+0x1e>
 8009764:	42a2      	cmp	r2, r4
 8009766:	d002      	beq.n	800976e <strncmp+0x1e>
 8009768:	3401      	adds	r4, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1f6      	bne.n	800975c <strncmp+0xc>
 800976e:	1a18      	subs	r0, r3, r0
 8009770:	bd30      	pop	{r4, r5, pc}
	...

08009774 <_sbrk_r>:
 8009774:	2300      	movs	r3, #0
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_sbrk_r+0x20>)
 800977a:	0004      	movs	r4, r0
 800977c:	0008      	movs	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f9 fad2 	bl	8002d28 <_sbrk>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d103      	bne.n	8009790 <_sbrk_r+0x1c>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d000      	beq.n	8009790 <_sbrk_r+0x1c>
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	200003fc 	.word	0x200003fc

08009798 <memcpy>:
 8009798:	2300      	movs	r3, #0
 800979a:	b510      	push	{r4, lr}
 800979c:	429a      	cmp	r2, r3
 800979e:	d100      	bne.n	80097a2 <memcpy+0xa>
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	5ccc      	ldrb	r4, [r1, r3]
 80097a4:	54c4      	strb	r4, [r0, r3]
 80097a6:	3301      	adds	r3, #1
 80097a8:	e7f8      	b.n	800979c <memcpy+0x4>
	...

080097ac <nan>:
 80097ac:	2000      	movs	r0, #0
 80097ae:	4901      	ldr	r1, [pc, #4]	; (80097b4 <nan+0x8>)
 80097b0:	4770      	bx	lr
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	7ff80000 	.word	0x7ff80000

080097b8 <__assert_func>:
 80097b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80097ba:	0014      	movs	r4, r2
 80097bc:	001a      	movs	r2, r3
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <__assert_func+0x2c>)
 80097c0:	0005      	movs	r5, r0
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	000e      	movs	r6, r1
 80097c6:	68d8      	ldr	r0, [r3, #12]
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <__assert_func+0x30>)
 80097ca:	2c00      	cmp	r4, #0
 80097cc:	d101      	bne.n	80097d2 <__assert_func+0x1a>
 80097ce:	4b07      	ldr	r3, [pc, #28]	; (80097ec <__assert_func+0x34>)
 80097d0:	001c      	movs	r4, r3
 80097d2:	4907      	ldr	r1, [pc, #28]	; (80097f0 <__assert_func+0x38>)
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	9402      	str	r4, [sp, #8]
 80097d8:	002b      	movs	r3, r5
 80097da:	9600      	str	r6, [sp, #0]
 80097dc:	f000 fbe2 	bl	8009fa4 <fiprintf>
 80097e0:	f000 fbf0 	bl	8009fc4 <abort>
 80097e4:	20000064 	.word	0x20000064
 80097e8:	0800a9b2 	.word	0x0800a9b2
 80097ec:	0800a9ed 	.word	0x0800a9ed
 80097f0:	0800a9bf 	.word	0x0800a9bf

080097f4 <_calloc_r>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	0c0b      	lsrs	r3, r1, #16
 80097f8:	0c15      	lsrs	r5, r2, #16
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11e      	bne.n	800983c <_calloc_r+0x48>
 80097fe:	2d00      	cmp	r5, #0
 8009800:	d10c      	bne.n	800981c <_calloc_r+0x28>
 8009802:	b289      	uxth	r1, r1
 8009804:	b294      	uxth	r4, r2
 8009806:	434c      	muls	r4, r1
 8009808:	0021      	movs	r1, r4
 800980a:	f7fe f975 	bl	8007af8 <_malloc_r>
 800980e:	1e05      	subs	r5, r0, #0
 8009810:	d01b      	beq.n	800984a <_calloc_r+0x56>
 8009812:	0022      	movs	r2, r4
 8009814:	2100      	movs	r1, #0
 8009816:	f7fd f9c5 	bl	8006ba4 <memset>
 800981a:	e016      	b.n	800984a <_calloc_r+0x56>
 800981c:	1c2b      	adds	r3, r5, #0
 800981e:	1c0c      	adds	r4, r1, #0
 8009820:	b289      	uxth	r1, r1
 8009822:	b292      	uxth	r2, r2
 8009824:	434a      	muls	r2, r1
 8009826:	b2a1      	uxth	r1, r4
 8009828:	b29c      	uxth	r4, r3
 800982a:	434c      	muls	r4, r1
 800982c:	0c13      	lsrs	r3, r2, #16
 800982e:	18e4      	adds	r4, r4, r3
 8009830:	0c23      	lsrs	r3, r4, #16
 8009832:	d107      	bne.n	8009844 <_calloc_r+0x50>
 8009834:	0424      	lsls	r4, r4, #16
 8009836:	b292      	uxth	r2, r2
 8009838:	4314      	orrs	r4, r2
 800983a:	e7e5      	b.n	8009808 <_calloc_r+0x14>
 800983c:	2d00      	cmp	r5, #0
 800983e:	d101      	bne.n	8009844 <_calloc_r+0x50>
 8009840:	1c14      	adds	r4, r2, #0
 8009842:	e7ed      	b.n	8009820 <_calloc_r+0x2c>
 8009844:	230c      	movs	r3, #12
 8009846:	2500      	movs	r5, #0
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	0028      	movs	r0, r5
 800984c:	bd70      	pop	{r4, r5, r6, pc}

0800984e <rshift>:
 800984e:	0002      	movs	r2, r0
 8009850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009852:	6904      	ldr	r4, [r0, #16]
 8009854:	114b      	asrs	r3, r1, #5
 8009856:	b085      	sub	sp, #20
 8009858:	3214      	adds	r2, #20
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	114d      	asrs	r5, r1, #5
 800985e:	0013      	movs	r3, r2
 8009860:	42ac      	cmp	r4, r5
 8009862:	dd32      	ble.n	80098ca <rshift+0x7c>
 8009864:	261f      	movs	r6, #31
 8009866:	000f      	movs	r7, r1
 8009868:	114b      	asrs	r3, r1, #5
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	00a5      	lsls	r5, r4, #2
 800986e:	18d3      	adds	r3, r2, r3
 8009870:	4037      	ands	r7, r6
 8009872:	1955      	adds	r5, r2, r5
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	9701      	str	r7, [sp, #4]
 8009878:	4231      	tst	r1, r6
 800987a:	d10d      	bne.n	8009898 <rshift+0x4a>
 800987c:	0016      	movs	r6, r2
 800987e:	0019      	movs	r1, r3
 8009880:	428d      	cmp	r5, r1
 8009882:	d836      	bhi.n	80098f2 <rshift+0xa4>
 8009884:	9900      	ldr	r1, [sp, #0]
 8009886:	2300      	movs	r3, #0
 8009888:	3903      	subs	r1, #3
 800988a:	428d      	cmp	r5, r1
 800988c:	d302      	bcc.n	8009894 <rshift+0x46>
 800988e:	9b02      	ldr	r3, [sp, #8]
 8009890:	1ae4      	subs	r4, r4, r3
 8009892:	00a3      	lsls	r3, r4, #2
 8009894:	18d3      	adds	r3, r2, r3
 8009896:	e018      	b.n	80098ca <rshift+0x7c>
 8009898:	2120      	movs	r1, #32
 800989a:	9e01      	ldr	r6, [sp, #4]
 800989c:	9f01      	ldr	r7, [sp, #4]
 800989e:	1b89      	subs	r1, r1, r6
 80098a0:	9e00      	ldr	r6, [sp, #0]
 80098a2:	9103      	str	r1, [sp, #12]
 80098a4:	ce02      	ldmia	r6!, {r1}
 80098a6:	4694      	mov	ip, r2
 80098a8:	40f9      	lsrs	r1, r7
 80098aa:	42b5      	cmp	r5, r6
 80098ac:	d816      	bhi.n	80098dc <rshift+0x8e>
 80098ae:	9e00      	ldr	r6, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	3601      	adds	r6, #1
 80098b4:	42b5      	cmp	r5, r6
 80098b6:	d303      	bcc.n	80098c0 <rshift+0x72>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	1ae3      	subs	r3, r4, r3
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	3b04      	subs	r3, #4
 80098c0:	18d3      	adds	r3, r2, r3
 80098c2:	6019      	str	r1, [r3, #0]
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d000      	beq.n	80098ca <rshift+0x7c>
 80098c8:	3304      	adds	r3, #4
 80098ca:	1a99      	subs	r1, r3, r2
 80098cc:	1089      	asrs	r1, r1, #2
 80098ce:	6101      	str	r1, [r0, #16]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d101      	bne.n	80098d8 <rshift+0x8a>
 80098d4:	2300      	movs	r3, #0
 80098d6:	6143      	str	r3, [r0, #20]
 80098d8:	b005      	add	sp, #20
 80098da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098dc:	6837      	ldr	r7, [r6, #0]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	409f      	lsls	r7, r3
 80098e2:	430f      	orrs	r7, r1
 80098e4:	4661      	mov	r1, ip
 80098e6:	c180      	stmia	r1!, {r7}
 80098e8:	468c      	mov	ip, r1
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	ce02      	ldmia	r6!, {r1}
 80098ee:	40d9      	lsrs	r1, r3
 80098f0:	e7db      	b.n	80098aa <rshift+0x5c>
 80098f2:	c980      	ldmia	r1!, {r7}
 80098f4:	c680      	stmia	r6!, {r7}
 80098f6:	e7c3      	b.n	8009880 <rshift+0x32>

080098f8 <__hexdig_fun>:
 80098f8:	0002      	movs	r2, r0
 80098fa:	3a30      	subs	r2, #48	; 0x30
 80098fc:	0003      	movs	r3, r0
 80098fe:	2a09      	cmp	r2, #9
 8009900:	d802      	bhi.n	8009908 <__hexdig_fun+0x10>
 8009902:	3b20      	subs	r3, #32
 8009904:	b2d8      	uxtb	r0, r3
 8009906:	4770      	bx	lr
 8009908:	0002      	movs	r2, r0
 800990a:	3a61      	subs	r2, #97	; 0x61
 800990c:	2a05      	cmp	r2, #5
 800990e:	d801      	bhi.n	8009914 <__hexdig_fun+0x1c>
 8009910:	3b47      	subs	r3, #71	; 0x47
 8009912:	e7f7      	b.n	8009904 <__hexdig_fun+0xc>
 8009914:	001a      	movs	r2, r3
 8009916:	3a41      	subs	r2, #65	; 0x41
 8009918:	2000      	movs	r0, #0
 800991a:	2a05      	cmp	r2, #5
 800991c:	d8f3      	bhi.n	8009906 <__hexdig_fun+0xe>
 800991e:	3b27      	subs	r3, #39	; 0x27
 8009920:	e7f0      	b.n	8009904 <__hexdig_fun+0xc>
	...

08009924 <__gethex>:
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	b089      	sub	sp, #36	; 0x24
 8009928:	9307      	str	r3, [sp, #28]
 800992a:	2302      	movs	r3, #2
 800992c:	9201      	str	r2, [sp, #4]
 800992e:	680a      	ldr	r2, [r1, #0]
 8009930:	425b      	negs	r3, r3
 8009932:	9003      	str	r0, [sp, #12]
 8009934:	9106      	str	r1, [sp, #24]
 8009936:	1c96      	adds	r6, r2, #2
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	199a      	adds	r2, r3, r6
 800993c:	9600      	str	r6, [sp, #0]
 800993e:	9205      	str	r2, [sp, #20]
 8009940:	9a00      	ldr	r2, [sp, #0]
 8009942:	3601      	adds	r6, #1
 8009944:	7810      	ldrb	r0, [r2, #0]
 8009946:	2830      	cmp	r0, #48	; 0x30
 8009948:	d0f7      	beq.n	800993a <__gethex+0x16>
 800994a:	f7ff ffd5 	bl	80098f8 <__hexdig_fun>
 800994e:	2300      	movs	r3, #0
 8009950:	001d      	movs	r5, r3
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	4298      	cmp	r0, r3
 8009956:	d11d      	bne.n	8009994 <__gethex+0x70>
 8009958:	2201      	movs	r2, #1
 800995a:	49a6      	ldr	r1, [pc, #664]	; (8009bf4 <__gethex+0x2d0>)
 800995c:	9800      	ldr	r0, [sp, #0]
 800995e:	f7ff fef7 	bl	8009750 <strncmp>
 8009962:	0007      	movs	r7, r0
 8009964:	42a8      	cmp	r0, r5
 8009966:	d169      	bne.n	8009a3c <__gethex+0x118>
 8009968:	9b00      	ldr	r3, [sp, #0]
 800996a:	0034      	movs	r4, r6
 800996c:	7858      	ldrb	r0, [r3, #1]
 800996e:	f7ff ffc3 	bl	80098f8 <__hexdig_fun>
 8009972:	2301      	movs	r3, #1
 8009974:	9302      	str	r3, [sp, #8]
 8009976:	42a8      	cmp	r0, r5
 8009978:	d02f      	beq.n	80099da <__gethex+0xb6>
 800997a:	9600      	str	r6, [sp, #0]
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	7818      	ldrb	r0, [r3, #0]
 8009980:	2830      	cmp	r0, #48	; 0x30
 8009982:	d009      	beq.n	8009998 <__gethex+0x74>
 8009984:	f7ff ffb8 	bl	80098f8 <__hexdig_fun>
 8009988:	4242      	negs	r2, r0
 800998a:	4142      	adcs	r2, r0
 800998c:	2301      	movs	r3, #1
 800998e:	0035      	movs	r5, r6
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	9c00      	ldr	r4, [sp, #0]
 8009996:	e004      	b.n	80099a2 <__gethex+0x7e>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	e7ed      	b.n	800997c <__gethex+0x58>
 80099a0:	3401      	adds	r4, #1
 80099a2:	7820      	ldrb	r0, [r4, #0]
 80099a4:	f7ff ffa8 	bl	80098f8 <__hexdig_fun>
 80099a8:	1e07      	subs	r7, r0, #0
 80099aa:	d1f9      	bne.n	80099a0 <__gethex+0x7c>
 80099ac:	2201      	movs	r2, #1
 80099ae:	0020      	movs	r0, r4
 80099b0:	4990      	ldr	r1, [pc, #576]	; (8009bf4 <__gethex+0x2d0>)
 80099b2:	f7ff fecd 	bl	8009750 <strncmp>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d10d      	bne.n	80099d6 <__gethex+0xb2>
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	d106      	bne.n	80099cc <__gethex+0xa8>
 80099be:	3401      	adds	r4, #1
 80099c0:	0025      	movs	r5, r4
 80099c2:	7820      	ldrb	r0, [r4, #0]
 80099c4:	f7ff ff98 	bl	80098f8 <__hexdig_fun>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d102      	bne.n	80099d2 <__gethex+0xae>
 80099cc:	1b2d      	subs	r5, r5, r4
 80099ce:	00af      	lsls	r7, r5, #2
 80099d0:	e003      	b.n	80099da <__gethex+0xb6>
 80099d2:	3401      	adds	r4, #1
 80099d4:	e7f5      	b.n	80099c2 <__gethex+0x9e>
 80099d6:	2d00      	cmp	r5, #0
 80099d8:	d1f8      	bne.n	80099cc <__gethex+0xa8>
 80099da:	2220      	movs	r2, #32
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	0026      	movs	r6, r4
 80099e0:	4393      	bics	r3, r2
 80099e2:	2b50      	cmp	r3, #80	; 0x50
 80099e4:	d11d      	bne.n	8009a22 <__gethex+0xfe>
 80099e6:	7863      	ldrb	r3, [r4, #1]
 80099e8:	2b2b      	cmp	r3, #43	; 0x2b
 80099ea:	d02c      	beq.n	8009a46 <__gethex+0x122>
 80099ec:	2b2d      	cmp	r3, #45	; 0x2d
 80099ee:	d02e      	beq.n	8009a4e <__gethex+0x12a>
 80099f0:	2300      	movs	r3, #0
 80099f2:	1c66      	adds	r6, r4, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	7830      	ldrb	r0, [r6, #0]
 80099f8:	f7ff ff7e 	bl	80098f8 <__hexdig_fun>
 80099fc:	1e43      	subs	r3, r0, #1
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b18      	cmp	r3, #24
 8009a02:	d82b      	bhi.n	8009a5c <__gethex+0x138>
 8009a04:	3810      	subs	r0, #16
 8009a06:	0005      	movs	r5, r0
 8009a08:	7870      	ldrb	r0, [r6, #1]
 8009a0a:	f7ff ff75 	bl	80098f8 <__hexdig_fun>
 8009a0e:	1e43      	subs	r3, r0, #1
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	3601      	adds	r6, #1
 8009a14:	2b18      	cmp	r3, #24
 8009a16:	d91c      	bls.n	8009a52 <__gethex+0x12e>
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d000      	beq.n	8009a20 <__gethex+0xfc>
 8009a1e:	426d      	negs	r5, r5
 8009a20:	197f      	adds	r7, r7, r5
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	601e      	str	r6, [r3, #0]
 8009a26:	9b02      	ldr	r3, [sp, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d019      	beq.n	8009a60 <__gethex+0x13c>
 8009a2c:	2600      	movs	r6, #0
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	42b3      	cmp	r3, r6
 8009a32:	d100      	bne.n	8009a36 <__gethex+0x112>
 8009a34:	3606      	adds	r6, #6
 8009a36:	0030      	movs	r0, r6
 8009a38:	b009      	add	sp, #36	; 0x24
 8009a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	2700      	movs	r7, #0
 8009a40:	9c00      	ldr	r4, [sp, #0]
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	e7c9      	b.n	80099da <__gethex+0xb6>
 8009a46:	2300      	movs	r3, #0
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	1ca6      	adds	r6, r4, #2
 8009a4c:	e7d3      	b.n	80099f6 <__gethex+0xd2>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7fa      	b.n	8009a48 <__gethex+0x124>
 8009a52:	230a      	movs	r3, #10
 8009a54:	435d      	muls	r5, r3
 8009a56:	182d      	adds	r5, r5, r0
 8009a58:	3d10      	subs	r5, #16
 8009a5a:	e7d5      	b.n	8009a08 <__gethex+0xe4>
 8009a5c:	0026      	movs	r6, r4
 8009a5e:	e7e0      	b.n	8009a22 <__gethex+0xfe>
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	9902      	ldr	r1, [sp, #8]
 8009a64:	1ae3      	subs	r3, r4, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	dc0a      	bgt.n	8009a82 <__gethex+0x15e>
 8009a6c:	9803      	ldr	r0, [sp, #12]
 8009a6e:	f7fe f8d5 	bl	8007c1c <_Balloc>
 8009a72:	1e05      	subs	r5, r0, #0
 8009a74:	d108      	bne.n	8009a88 <__gethex+0x164>
 8009a76:	002a      	movs	r2, r5
 8009a78:	21e4      	movs	r1, #228	; 0xe4
 8009a7a:	4b5f      	ldr	r3, [pc, #380]	; (8009bf8 <__gethex+0x2d4>)
 8009a7c:	485f      	ldr	r0, [pc, #380]	; (8009bfc <__gethex+0x2d8>)
 8009a7e:	f7ff fe9b 	bl	80097b8 <__assert_func>
 8009a82:	3101      	adds	r1, #1
 8009a84:	105b      	asrs	r3, r3, #1
 8009a86:	e7ef      	b.n	8009a68 <__gethex+0x144>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	3314      	adds	r3, #20
 8009a8c:	9302      	str	r3, [sp, #8]
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	2300      	movs	r3, #0
 8009a92:	001e      	movs	r6, r3
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9b00      	ldr	r3, [sp, #0]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d33f      	bcc.n	8009b1c <__gethex+0x1f8>
 8009a9c:	9c05      	ldr	r4, [sp, #20]
 8009a9e:	9b02      	ldr	r3, [sp, #8]
 8009aa0:	c440      	stmia	r4!, {r6}
 8009aa2:	1ae4      	subs	r4, r4, r3
 8009aa4:	10a4      	asrs	r4, r4, #2
 8009aa6:	0030      	movs	r0, r6
 8009aa8:	612c      	str	r4, [r5, #16]
 8009aaa:	f7fe f9af 	bl	8007e0c <__hi0bits>
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	0164      	lsls	r4, r4, #5
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	1a26      	subs	r6, r4, r0
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	dd51      	ble.n	8009b60 <__gethex+0x23c>
 8009abc:	1af6      	subs	r6, r6, r3
 8009abe:	0031      	movs	r1, r6
 8009ac0:	0028      	movs	r0, r5
 8009ac2:	f7fe fd43 	bl	800854c <__any_on>
 8009ac6:	1e04      	subs	r4, r0, #0
 8009ac8:	d016      	beq.n	8009af8 <__gethex+0x1d4>
 8009aca:	2401      	movs	r4, #1
 8009acc:	231f      	movs	r3, #31
 8009ace:	0020      	movs	r0, r4
 8009ad0:	1e72      	subs	r2, r6, #1
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	4098      	lsls	r0, r3
 8009ad6:	0003      	movs	r3, r0
 8009ad8:	1151      	asrs	r1, r2, #5
 8009ada:	9802      	ldr	r0, [sp, #8]
 8009adc:	0089      	lsls	r1, r1, #2
 8009ade:	5809      	ldr	r1, [r1, r0]
 8009ae0:	4219      	tst	r1, r3
 8009ae2:	d009      	beq.n	8009af8 <__gethex+0x1d4>
 8009ae4:	42a2      	cmp	r2, r4
 8009ae6:	dd06      	ble.n	8009af6 <__gethex+0x1d2>
 8009ae8:	0028      	movs	r0, r5
 8009aea:	1eb1      	subs	r1, r6, #2
 8009aec:	f7fe fd2e 	bl	800854c <__any_on>
 8009af0:	3402      	adds	r4, #2
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d100      	bne.n	8009af8 <__gethex+0x1d4>
 8009af6:	2402      	movs	r4, #2
 8009af8:	0031      	movs	r1, r6
 8009afa:	0028      	movs	r0, r5
 8009afc:	f7ff fea7 	bl	800984e <rshift>
 8009b00:	19bf      	adds	r7, r7, r6
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	42bb      	cmp	r3, r7
 8009b08:	da3a      	bge.n	8009b80 <__gethex+0x25c>
 8009b0a:	0029      	movs	r1, r5
 8009b0c:	9803      	ldr	r0, [sp, #12]
 8009b0e:	f7fe f8c9 	bl	8007ca4 <_Bfree>
 8009b12:	2300      	movs	r3, #0
 8009b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b16:	26a3      	movs	r6, #163	; 0xa3
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e78c      	b.n	8009a36 <__gethex+0x112>
 8009b1c:	3c01      	subs	r4, #1
 8009b1e:	7823      	ldrb	r3, [r4, #0]
 8009b20:	2b2e      	cmp	r3, #46	; 0x2e
 8009b22:	d012      	beq.n	8009b4a <__gethex+0x226>
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d104      	bne.n	8009b34 <__gethex+0x210>
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	c340      	stmia	r3!, {r6}
 8009b2e:	2600      	movs	r6, #0
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	9604      	str	r6, [sp, #16]
 8009b34:	7820      	ldrb	r0, [r4, #0]
 8009b36:	f7ff fedf 	bl	80098f8 <__hexdig_fun>
 8009b3a:	230f      	movs	r3, #15
 8009b3c:	4018      	ands	r0, r3
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	4098      	lsls	r0, r3
 8009b42:	3304      	adds	r3, #4
 8009b44:	4306      	orrs	r6, r0
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	e7a5      	b.n	8009a96 <__gethex+0x172>
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d8e9      	bhi.n	8009b24 <__gethex+0x200>
 8009b50:	2201      	movs	r2, #1
 8009b52:	0020      	movs	r0, r4
 8009b54:	4927      	ldr	r1, [pc, #156]	; (8009bf4 <__gethex+0x2d0>)
 8009b56:	f7ff fdfb 	bl	8009750 <strncmp>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1e2      	bne.n	8009b24 <__gethex+0x200>
 8009b5e:	e79a      	b.n	8009a96 <__gethex+0x172>
 8009b60:	9b00      	ldr	r3, [sp, #0]
 8009b62:	2400      	movs	r4, #0
 8009b64:	429e      	cmp	r6, r3
 8009b66:	dacc      	bge.n	8009b02 <__gethex+0x1de>
 8009b68:	1b9e      	subs	r6, r3, r6
 8009b6a:	0029      	movs	r1, r5
 8009b6c:	0032      	movs	r2, r6
 8009b6e:	9803      	ldr	r0, [sp, #12]
 8009b70:	f7fe fab8 	bl	80080e4 <__lshift>
 8009b74:	0003      	movs	r3, r0
 8009b76:	3314      	adds	r3, #20
 8009b78:	0005      	movs	r5, r0
 8009b7a:	1bbf      	subs	r7, r7, r6
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	e7c0      	b.n	8009b02 <__gethex+0x1de>
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	685e      	ldr	r6, [r3, #4]
 8009b84:	42be      	cmp	r6, r7
 8009b86:	dd70      	ble.n	8009c6a <__gethex+0x346>
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	1bf6      	subs	r6, r6, r7
 8009b8c:	42b3      	cmp	r3, r6
 8009b8e:	dc37      	bgt.n	8009c00 <__gethex+0x2dc>
 8009b90:	9b01      	ldr	r3, [sp, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d024      	beq.n	8009be2 <__gethex+0x2be>
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d026      	beq.n	8009bea <__gethex+0x2c6>
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d117      	bne.n	8009bd0 <__gethex+0x2ac>
 8009ba0:	9b00      	ldr	r3, [sp, #0]
 8009ba2:	42b3      	cmp	r3, r6
 8009ba4:	d114      	bne.n	8009bd0 <__gethex+0x2ac>
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d10b      	bne.n	8009bc2 <__gethex+0x29e>
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	9a07      	ldr	r2, [sp, #28]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2662      	movs	r6, #98	; 0x62
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	9a02      	ldr	r2, [sp, #8]
 8009bb8:	612b      	str	r3, [r5, #16]
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbe:	601d      	str	r5, [r3, #0]
 8009bc0:	e739      	b.n	8009a36 <__gethex+0x112>
 8009bc2:	9900      	ldr	r1, [sp, #0]
 8009bc4:	0028      	movs	r0, r5
 8009bc6:	3901      	subs	r1, #1
 8009bc8:	f7fe fcc0 	bl	800854c <__any_on>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1ec      	bne.n	8009baa <__gethex+0x286>
 8009bd0:	0029      	movs	r1, r5
 8009bd2:	9803      	ldr	r0, [sp, #12]
 8009bd4:	f7fe f866 	bl	8007ca4 <_Bfree>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bdc:	2650      	movs	r6, #80	; 0x50
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	e729      	b.n	8009a36 <__gethex+0x112>
 8009be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f3      	bne.n	8009bd0 <__gethex+0x2ac>
 8009be8:	e7df      	b.n	8009baa <__gethex+0x286>
 8009bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1dc      	bne.n	8009baa <__gethex+0x286>
 8009bf0:	e7ee      	b.n	8009bd0 <__gethex+0x2ac>
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	0800a844 	.word	0x0800a844
 8009bf8:	0800a6d9 	.word	0x0800a6d9
 8009bfc:	0800a9ee 	.word	0x0800a9ee
 8009c00:	1e77      	subs	r7, r6, #1
 8009c02:	2c00      	cmp	r4, #0
 8009c04:	d12f      	bne.n	8009c66 <__gethex+0x342>
 8009c06:	2f00      	cmp	r7, #0
 8009c08:	d004      	beq.n	8009c14 <__gethex+0x2f0>
 8009c0a:	0039      	movs	r1, r7
 8009c0c:	0028      	movs	r0, r5
 8009c0e:	f7fe fc9d 	bl	800854c <__any_on>
 8009c12:	0004      	movs	r4, r0
 8009c14:	231f      	movs	r3, #31
 8009c16:	117a      	asrs	r2, r7, #5
 8009c18:	401f      	ands	r7, r3
 8009c1a:	3b1e      	subs	r3, #30
 8009c1c:	40bb      	lsls	r3, r7
 8009c1e:	9902      	ldr	r1, [sp, #8]
 8009c20:	0092      	lsls	r2, r2, #2
 8009c22:	5852      	ldr	r2, [r2, r1]
 8009c24:	421a      	tst	r2, r3
 8009c26:	d001      	beq.n	8009c2c <__gethex+0x308>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	431c      	orrs	r4, r3
 8009c2c:	9b00      	ldr	r3, [sp, #0]
 8009c2e:	0031      	movs	r1, r6
 8009c30:	1b9b      	subs	r3, r3, r6
 8009c32:	2602      	movs	r6, #2
 8009c34:	0028      	movs	r0, r5
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	f7ff fe09 	bl	800984e <rshift>
 8009c3c:	9b01      	ldr	r3, [sp, #4]
 8009c3e:	685f      	ldr	r7, [r3, #4]
 8009c40:	2c00      	cmp	r4, #0
 8009c42:	d041      	beq.n	8009cc8 <__gethex+0x3a4>
 8009c44:	9b01      	ldr	r3, [sp, #4]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d010      	beq.n	8009c6e <__gethex+0x34a>
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d012      	beq.n	8009c76 <__gethex+0x352>
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d106      	bne.n	8009c62 <__gethex+0x33e>
 8009c54:	07a2      	lsls	r2, r4, #30
 8009c56:	d504      	bpl.n	8009c62 <__gethex+0x33e>
 8009c58:	9a02      	ldr	r2, [sp, #8]
 8009c5a:	6812      	ldr	r2, [r2, #0]
 8009c5c:	4314      	orrs	r4, r2
 8009c5e:	421c      	tst	r4, r3
 8009c60:	d10c      	bne.n	8009c7c <__gethex+0x358>
 8009c62:	2310      	movs	r3, #16
 8009c64:	e02f      	b.n	8009cc6 <__gethex+0x3a2>
 8009c66:	2401      	movs	r4, #1
 8009c68:	e7d4      	b.n	8009c14 <__gethex+0x2f0>
 8009c6a:	2601      	movs	r6, #1
 8009c6c:	e7e8      	b.n	8009c40 <__gethex+0x31c>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f2      	beq.n	8009c62 <__gethex+0x33e>
 8009c7c:	692b      	ldr	r3, [r5, #16]
 8009c7e:	2000      	movs	r0, #0
 8009c80:	9302      	str	r3, [sp, #8]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	002b      	movs	r3, r5
 8009c88:	9a04      	ldr	r2, [sp, #16]
 8009c8a:	3314      	adds	r3, #20
 8009c8c:	1899      	adds	r1, r3, r2
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	1c54      	adds	r4, r2, #1
 8009c92:	d01e      	beq.n	8009cd2 <__gethex+0x3ae>
 8009c94:	3201      	adds	r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	002b      	movs	r3, r5
 8009c9a:	3314      	adds	r3, #20
 8009c9c:	2e02      	cmp	r6, #2
 8009c9e:	d141      	bne.n	8009d24 <__gethex+0x400>
 8009ca0:	9a01      	ldr	r2, [sp, #4]
 8009ca2:	9900      	ldr	r1, [sp, #0]
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	3a01      	subs	r2, #1
 8009ca8:	428a      	cmp	r2, r1
 8009caa:	d10b      	bne.n	8009cc4 <__gethex+0x3a0>
 8009cac:	221f      	movs	r2, #31
 8009cae:	9800      	ldr	r0, [sp, #0]
 8009cb0:	1149      	asrs	r1, r1, #5
 8009cb2:	4002      	ands	r2, r0
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	0004      	movs	r4, r0
 8009cb8:	4094      	lsls	r4, r2
 8009cba:	0089      	lsls	r1, r1, #2
 8009cbc:	58cb      	ldr	r3, [r1, r3]
 8009cbe:	4223      	tst	r3, r4
 8009cc0:	d000      	beq.n	8009cc4 <__gethex+0x3a0>
 8009cc2:	2601      	movs	r6, #1
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	431e      	orrs	r6, r3
 8009cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cca:	601d      	str	r5, [r3, #0]
 8009ccc:	9b07      	ldr	r3, [sp, #28]
 8009cce:	601f      	str	r7, [r3, #0]
 8009cd0:	e6b1      	b.n	8009a36 <__gethex+0x112>
 8009cd2:	c301      	stmia	r3!, {r0}
 8009cd4:	4299      	cmp	r1, r3
 8009cd6:	d8da      	bhi.n	8009c8e <__gethex+0x36a>
 8009cd8:	68ab      	ldr	r3, [r5, #8]
 8009cda:	9a02      	ldr	r2, [sp, #8]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	db18      	blt.n	8009d12 <__gethex+0x3ee>
 8009ce0:	6869      	ldr	r1, [r5, #4]
 8009ce2:	9803      	ldr	r0, [sp, #12]
 8009ce4:	3101      	adds	r1, #1
 8009ce6:	f7fd ff99 	bl	8007c1c <_Balloc>
 8009cea:	1e04      	subs	r4, r0, #0
 8009cec:	d104      	bne.n	8009cf8 <__gethex+0x3d4>
 8009cee:	0022      	movs	r2, r4
 8009cf0:	2184      	movs	r1, #132	; 0x84
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <__gethex+0x440>)
 8009cf4:	481c      	ldr	r0, [pc, #112]	; (8009d68 <__gethex+0x444>)
 8009cf6:	e6c2      	b.n	8009a7e <__gethex+0x15a>
 8009cf8:	0029      	movs	r1, r5
 8009cfa:	692a      	ldr	r2, [r5, #16]
 8009cfc:	310c      	adds	r1, #12
 8009cfe:	3202      	adds	r2, #2
 8009d00:	0092      	lsls	r2, r2, #2
 8009d02:	300c      	adds	r0, #12
 8009d04:	f7ff fd48 	bl	8009798 <memcpy>
 8009d08:	0029      	movs	r1, r5
 8009d0a:	9803      	ldr	r0, [sp, #12]
 8009d0c:	f7fd ffca 	bl	8007ca4 <_Bfree>
 8009d10:	0025      	movs	r5, r4
 8009d12:	692b      	ldr	r3, [r5, #16]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	612a      	str	r2, [r5, #16]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	18eb      	adds	r3, r5, r3
 8009d20:	605a      	str	r2, [r3, #4]
 8009d22:	e7b9      	b.n	8009c98 <__gethex+0x374>
 8009d24:	692a      	ldr	r2, [r5, #16]
 8009d26:	9902      	ldr	r1, [sp, #8]
 8009d28:	428a      	cmp	r2, r1
 8009d2a:	dd09      	ble.n	8009d40 <__gethex+0x41c>
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	0028      	movs	r0, r5
 8009d30:	f7ff fd8d 	bl	800984e <rshift>
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	3701      	adds	r7, #1
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	42bb      	cmp	r3, r7
 8009d3c:	dac1      	bge.n	8009cc2 <__gethex+0x39e>
 8009d3e:	e6e4      	b.n	8009b0a <__gethex+0x1e6>
 8009d40:	221f      	movs	r2, #31
 8009d42:	9c00      	ldr	r4, [sp, #0]
 8009d44:	9900      	ldr	r1, [sp, #0]
 8009d46:	2601      	movs	r6, #1
 8009d48:	4014      	ands	r4, r2
 8009d4a:	4211      	tst	r1, r2
 8009d4c:	d0ba      	beq.n	8009cc4 <__gethex+0x3a0>
 8009d4e:	9a04      	ldr	r2, [sp, #16]
 8009d50:	189b      	adds	r3, r3, r2
 8009d52:	3b04      	subs	r3, #4
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	f7fe f859 	bl	8007e0c <__hi0bits>
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	1b1b      	subs	r3, r3, r4
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	dbe4      	blt.n	8009d2c <__gethex+0x408>
 8009d62:	e7af      	b.n	8009cc4 <__gethex+0x3a0>
 8009d64:	0800a6d9 	.word	0x0800a6d9
 8009d68:	0800a9ee 	.word	0x0800a9ee

08009d6c <L_shift>:
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	b570      	push	{r4, r5, r6, lr}
 8009d70:	2520      	movs	r5, #32
 8009d72:	1a9a      	subs	r2, r3, r2
 8009d74:	0092      	lsls	r2, r2, #2
 8009d76:	1aad      	subs	r5, r5, r2
 8009d78:	6843      	ldr	r3, [r0, #4]
 8009d7a:	6804      	ldr	r4, [r0, #0]
 8009d7c:	001e      	movs	r6, r3
 8009d7e:	40ae      	lsls	r6, r5
 8009d80:	40d3      	lsrs	r3, r2
 8009d82:	4334      	orrs	r4, r6
 8009d84:	6004      	str	r4, [r0, #0]
 8009d86:	6043      	str	r3, [r0, #4]
 8009d88:	3004      	adds	r0, #4
 8009d8a:	4288      	cmp	r0, r1
 8009d8c:	d3f4      	bcc.n	8009d78 <L_shift+0xc>
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}

08009d90 <__match>:
 8009d90:	b530      	push	{r4, r5, lr}
 8009d92:	6803      	ldr	r3, [r0, #0]
 8009d94:	780c      	ldrb	r4, [r1, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	2c00      	cmp	r4, #0
 8009d9a:	d102      	bne.n	8009da2 <__match+0x12>
 8009d9c:	6003      	str	r3, [r0, #0]
 8009d9e:	2001      	movs	r0, #1
 8009da0:	bd30      	pop	{r4, r5, pc}
 8009da2:	781a      	ldrb	r2, [r3, #0]
 8009da4:	0015      	movs	r5, r2
 8009da6:	3d41      	subs	r5, #65	; 0x41
 8009da8:	2d19      	cmp	r5, #25
 8009daa:	d800      	bhi.n	8009dae <__match+0x1e>
 8009dac:	3220      	adds	r2, #32
 8009dae:	3101      	adds	r1, #1
 8009db0:	42a2      	cmp	r2, r4
 8009db2:	d0ef      	beq.n	8009d94 <__match+0x4>
 8009db4:	2000      	movs	r0, #0
 8009db6:	e7f3      	b.n	8009da0 <__match+0x10>

08009db8 <__hexnan>:
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	680b      	ldr	r3, [r1, #0]
 8009dbc:	b08b      	sub	sp, #44	; 0x2c
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9901      	ldr	r1, [sp, #4]
 8009dc2:	115a      	asrs	r2, r3, #5
 8009dc4:	0092      	lsls	r2, r2, #2
 8009dc6:	188a      	adds	r2, r1, r2
 8009dc8:	9202      	str	r2, [sp, #8]
 8009dca:	0019      	movs	r1, r3
 8009dcc:	221f      	movs	r2, #31
 8009dce:	4011      	ands	r1, r2
 8009dd0:	9008      	str	r0, [sp, #32]
 8009dd2:	9106      	str	r1, [sp, #24]
 8009dd4:	4213      	tst	r3, r2
 8009dd6:	d002      	beq.n	8009dde <__hexnan+0x26>
 8009dd8:	9b02      	ldr	r3, [sp, #8]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	2500      	movs	r5, #0
 8009de2:	1f1f      	subs	r7, r3, #4
 8009de4:	003e      	movs	r6, r7
 8009de6:	003c      	movs	r4, r7
 8009de8:	9b08      	ldr	r3, [sp, #32]
 8009dea:	603d      	str	r5, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	9507      	str	r5, [sp, #28]
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	9503      	str	r5, [sp, #12]
 8009df4:	9b05      	ldr	r3, [sp, #20]
 8009df6:	3301      	adds	r3, #1
 8009df8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfa:	9b05      	ldr	r3, [sp, #20]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	9304      	str	r3, [sp, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d028      	beq.n	8009e56 <__hexnan+0x9e>
 8009e04:	9804      	ldr	r0, [sp, #16]
 8009e06:	f7ff fd77 	bl	80098f8 <__hexdig_fun>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d154      	bne.n	8009eb8 <__hexnan+0x100>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d819      	bhi.n	8009e48 <__hexnan+0x90>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	9a07      	ldr	r2, [sp, #28]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	dd12      	ble.n	8009e42 <__hexnan+0x8a>
 8009e1c:	42b4      	cmp	r4, r6
 8009e1e:	d206      	bcs.n	8009e2e <__hexnan+0x76>
 8009e20:	2d07      	cmp	r5, #7
 8009e22:	dc04      	bgt.n	8009e2e <__hexnan+0x76>
 8009e24:	002a      	movs	r2, r5
 8009e26:	0031      	movs	r1, r6
 8009e28:	0020      	movs	r0, r4
 8009e2a:	f7ff ff9f 	bl	8009d6c <L_shift>
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	2508      	movs	r5, #8
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d905      	bls.n	8009e42 <__hexnan+0x8a>
 8009e36:	1f26      	subs	r6, r4, #4
 8009e38:	2500      	movs	r5, #0
 8009e3a:	0034      	movs	r4, r6
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	6035      	str	r5, [r6, #0]
 8009e40:	9307      	str	r3, [sp, #28]
 8009e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e44:	9305      	str	r3, [sp, #20]
 8009e46:	e7d5      	b.n	8009df4 <__hexnan+0x3c>
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	2b29      	cmp	r3, #41	; 0x29
 8009e4c:	d159      	bne.n	8009f02 <__hexnan+0x14a>
 8009e4e:	9b05      	ldr	r3, [sp, #20]
 8009e50:	9a08      	ldr	r2, [sp, #32]
 8009e52:	3302      	adds	r3, #2
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d052      	beq.n	8009f02 <__hexnan+0x14a>
 8009e5c:	42b4      	cmp	r4, r6
 8009e5e:	d206      	bcs.n	8009e6e <__hexnan+0xb6>
 8009e60:	2d07      	cmp	r5, #7
 8009e62:	dc04      	bgt.n	8009e6e <__hexnan+0xb6>
 8009e64:	002a      	movs	r2, r5
 8009e66:	0031      	movs	r1, r6
 8009e68:	0020      	movs	r0, r4
 8009e6a:	f7ff ff7f 	bl	8009d6c <L_shift>
 8009e6e:	9b01      	ldr	r3, [sp, #4]
 8009e70:	429c      	cmp	r4, r3
 8009e72:	d935      	bls.n	8009ee0 <__hexnan+0x128>
 8009e74:	001a      	movs	r2, r3
 8009e76:	0023      	movs	r3, r4
 8009e78:	cb02      	ldmia	r3!, {r1}
 8009e7a:	c202      	stmia	r2!, {r1}
 8009e7c:	429f      	cmp	r7, r3
 8009e7e:	d2fb      	bcs.n	8009e78 <__hexnan+0xc0>
 8009e80:	9b02      	ldr	r3, [sp, #8]
 8009e82:	1c62      	adds	r2, r4, #1
 8009e84:	1ed9      	subs	r1, r3, #3
 8009e86:	2304      	movs	r3, #4
 8009e88:	4291      	cmp	r1, r2
 8009e8a:	d305      	bcc.n	8009e98 <__hexnan+0xe0>
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	3b04      	subs	r3, #4
 8009e90:	1b1b      	subs	r3, r3, r4
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	3301      	adds	r3, #1
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	18d3      	adds	r3, r2, r3
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	c304      	stmia	r3!, {r2}
 8009ea0:	429f      	cmp	r7, r3
 8009ea2:	d2fc      	bcs.n	8009e9e <__hexnan+0xe6>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d104      	bne.n	8009eb4 <__hexnan+0xfc>
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	429f      	cmp	r7, r3
 8009eae:	d126      	bne.n	8009efe <__hexnan+0x146>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	2005      	movs	r0, #5
 8009eb6:	e025      	b.n	8009f04 <__hexnan+0x14c>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	3501      	adds	r5, #1
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	9303      	str	r3, [sp, #12]
 8009ec0:	2d08      	cmp	r5, #8
 8009ec2:	dd06      	ble.n	8009ed2 <__hexnan+0x11a>
 8009ec4:	9b01      	ldr	r3, [sp, #4]
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d9bb      	bls.n	8009e42 <__hexnan+0x8a>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2501      	movs	r5, #1
 8009ece:	3c04      	subs	r4, #4
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	220f      	movs	r2, #15
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	4010      	ands	r0, r2
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	4303      	orrs	r3, r0
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	e7b0      	b.n	8009e42 <__hexnan+0x8a>
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0de      	beq.n	8009ea4 <__hexnan+0xec>
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	9902      	ldr	r1, [sp, #8]
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4252      	negs	r2, r2
 8009ef2:	40da      	lsrs	r2, r3
 8009ef4:	3904      	subs	r1, #4
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	600b      	str	r3, [r1, #0]
 8009efc:	e7d2      	b.n	8009ea4 <__hexnan+0xec>
 8009efe:	3f04      	subs	r7, #4
 8009f00:	e7d0      	b.n	8009ea4 <__hexnan+0xec>
 8009f02:	2004      	movs	r0, #4
 8009f04:	b00b      	add	sp, #44	; 0x2c
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f08 <__ascii_mbtowc>:
 8009f08:	b082      	sub	sp, #8
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	d100      	bne.n	8009f10 <__ascii_mbtowc+0x8>
 8009f0e:	a901      	add	r1, sp, #4
 8009f10:	1e10      	subs	r0, r2, #0
 8009f12:	d006      	beq.n	8009f22 <__ascii_mbtowc+0x1a>
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <__ascii_mbtowc+0x1e>
 8009f18:	7813      	ldrb	r3, [r2, #0]
 8009f1a:	600b      	str	r3, [r1, #0]
 8009f1c:	7810      	ldrb	r0, [r2, #0]
 8009f1e:	1e43      	subs	r3, r0, #1
 8009f20:	4198      	sbcs	r0, r3
 8009f22:	b002      	add	sp, #8
 8009f24:	4770      	bx	lr
 8009f26:	2002      	movs	r0, #2
 8009f28:	4240      	negs	r0, r0
 8009f2a:	e7fa      	b.n	8009f22 <__ascii_mbtowc+0x1a>

08009f2c <_realloc_r>:
 8009f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f2e:	0007      	movs	r7, r0
 8009f30:	000e      	movs	r6, r1
 8009f32:	0014      	movs	r4, r2
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d105      	bne.n	8009f44 <_realloc_r+0x18>
 8009f38:	0011      	movs	r1, r2
 8009f3a:	f7fd fddd 	bl	8007af8 <_malloc_r>
 8009f3e:	0005      	movs	r5, r0
 8009f40:	0028      	movs	r0, r5
 8009f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d103      	bne.n	8009f50 <_realloc_r+0x24>
 8009f48:	f7fd fd60 	bl	8007a0c <_free_r>
 8009f4c:	0025      	movs	r5, r4
 8009f4e:	e7f7      	b.n	8009f40 <_realloc_r+0x14>
 8009f50:	f000 f83f 	bl	8009fd2 <_malloc_usable_size_r>
 8009f54:	9001      	str	r0, [sp, #4]
 8009f56:	4284      	cmp	r4, r0
 8009f58:	d803      	bhi.n	8009f62 <_realloc_r+0x36>
 8009f5a:	0035      	movs	r5, r6
 8009f5c:	0843      	lsrs	r3, r0, #1
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	d3ee      	bcc.n	8009f40 <_realloc_r+0x14>
 8009f62:	0021      	movs	r1, r4
 8009f64:	0038      	movs	r0, r7
 8009f66:	f7fd fdc7 	bl	8007af8 <_malloc_r>
 8009f6a:	1e05      	subs	r5, r0, #0
 8009f6c:	d0e8      	beq.n	8009f40 <_realloc_r+0x14>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	0022      	movs	r2, r4
 8009f72:	429c      	cmp	r4, r3
 8009f74:	d900      	bls.n	8009f78 <_realloc_r+0x4c>
 8009f76:	001a      	movs	r2, r3
 8009f78:	0031      	movs	r1, r6
 8009f7a:	0028      	movs	r0, r5
 8009f7c:	f7ff fc0c 	bl	8009798 <memcpy>
 8009f80:	0031      	movs	r1, r6
 8009f82:	0038      	movs	r0, r7
 8009f84:	f7fd fd42 	bl	8007a0c <_free_r>
 8009f88:	e7da      	b.n	8009f40 <_realloc_r+0x14>

08009f8a <__ascii_wctomb>:
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	1e08      	subs	r0, r1, #0
 8009f8e:	d005      	beq.n	8009f9c <__ascii_wctomb+0x12>
 8009f90:	2aff      	cmp	r2, #255	; 0xff
 8009f92:	d904      	bls.n	8009f9e <__ascii_wctomb+0x14>
 8009f94:	228a      	movs	r2, #138	; 0x8a
 8009f96:	2001      	movs	r0, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	4240      	negs	r0, r0
 8009f9c:	4770      	bx	lr
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	700a      	strb	r2, [r1, #0]
 8009fa2:	e7fb      	b.n	8009f9c <__ascii_wctomb+0x12>

08009fa4 <fiprintf>:
 8009fa4:	b40e      	push	{r1, r2, r3}
 8009fa6:	b517      	push	{r0, r1, r2, r4, lr}
 8009fa8:	4c05      	ldr	r4, [pc, #20]	; (8009fc0 <fiprintf+0x1c>)
 8009faa:	ab05      	add	r3, sp, #20
 8009fac:	cb04      	ldmia	r3!, {r2}
 8009fae:	0001      	movs	r1, r0
 8009fb0:	6820      	ldr	r0, [r4, #0]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	f000 f83c 	bl	800a030 <_vfiprintf_r>
 8009fb8:	bc1e      	pop	{r1, r2, r3, r4}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	b003      	add	sp, #12
 8009fbe:	4718      	bx	r3
 8009fc0:	20000064 	.word	0x20000064

08009fc4 <abort>:
 8009fc4:	2006      	movs	r0, #6
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	f000 fa1e 	bl	800a408 <raise>
 8009fcc:	2001      	movs	r0, #1
 8009fce:	f7f8 fe39 	bl	8002c44 <_exit>

08009fd2 <_malloc_usable_size_r>:
 8009fd2:	1f0b      	subs	r3, r1, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1f18      	subs	r0, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	da01      	bge.n	8009fe0 <_malloc_usable_size_r+0xe>
 8009fdc:	580b      	ldr	r3, [r1, r0]
 8009fde:	18c0      	adds	r0, r0, r3
 8009fe0:	4770      	bx	lr

08009fe2 <__sfputc_r>:
 8009fe2:	6893      	ldr	r3, [r2, #8]
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	6093      	str	r3, [r2, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da04      	bge.n	8009ff8 <__sfputc_r+0x16>
 8009fee:	6994      	ldr	r4, [r2, #24]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	db07      	blt.n	800a004 <__sfputc_r+0x22>
 8009ff4:	290a      	cmp	r1, #10
 8009ff6:	d005      	beq.n	800a004 <__sfputc_r+0x22>
 8009ff8:	6813      	ldr	r3, [r2, #0]
 8009ffa:	1c58      	adds	r0, r3, #1
 8009ffc:	6010      	str	r0, [r2, #0]
 8009ffe:	7019      	strb	r1, [r3, #0]
 800a000:	0008      	movs	r0, r1
 800a002:	bd10      	pop	{r4, pc}
 800a004:	f000 f930 	bl	800a268 <__swbuf_r>
 800a008:	0001      	movs	r1, r0
 800a00a:	e7f9      	b.n	800a000 <__sfputc_r+0x1e>

0800a00c <__sfputs_r>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	0006      	movs	r6, r0
 800a010:	000f      	movs	r7, r1
 800a012:	0014      	movs	r4, r2
 800a014:	18d5      	adds	r5, r2, r3
 800a016:	42ac      	cmp	r4, r5
 800a018:	d101      	bne.n	800a01e <__sfputs_r+0x12>
 800a01a:	2000      	movs	r0, #0
 800a01c:	e007      	b.n	800a02e <__sfputs_r+0x22>
 800a01e:	7821      	ldrb	r1, [r4, #0]
 800a020:	003a      	movs	r2, r7
 800a022:	0030      	movs	r0, r6
 800a024:	f7ff ffdd 	bl	8009fe2 <__sfputc_r>
 800a028:	3401      	adds	r4, #1
 800a02a:	1c43      	adds	r3, r0, #1
 800a02c:	d1f3      	bne.n	800a016 <__sfputs_r+0xa>
 800a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a030 <_vfiprintf_r>:
 800a030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a032:	b0a1      	sub	sp, #132	; 0x84
 800a034:	000f      	movs	r7, r1
 800a036:	0015      	movs	r5, r2
 800a038:	001e      	movs	r6, r3
 800a03a:	9003      	str	r0, [sp, #12]
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d004      	beq.n	800a04a <_vfiprintf_r+0x1a>
 800a040:	6a03      	ldr	r3, [r0, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <_vfiprintf_r+0x1a>
 800a046:	f7fc fd0d 	bl	8006a64 <__sinit>
 800a04a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a04c:	07db      	lsls	r3, r3, #31
 800a04e:	d405      	bmi.n	800a05c <_vfiprintf_r+0x2c>
 800a050:	89bb      	ldrh	r3, [r7, #12]
 800a052:	059b      	lsls	r3, r3, #22
 800a054:	d402      	bmi.n	800a05c <_vfiprintf_r+0x2c>
 800a056:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a058:	f7fc fe29 	bl	8006cae <__retarget_lock_acquire_recursive>
 800a05c:	89bb      	ldrh	r3, [r7, #12]
 800a05e:	071b      	lsls	r3, r3, #28
 800a060:	d502      	bpl.n	800a068 <_vfiprintf_r+0x38>
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d113      	bne.n	800a090 <_vfiprintf_r+0x60>
 800a068:	0039      	movs	r1, r7
 800a06a:	9803      	ldr	r0, [sp, #12]
 800a06c:	f000 f93e 	bl	800a2ec <__swsetup_r>
 800a070:	2800      	cmp	r0, #0
 800a072:	d00d      	beq.n	800a090 <_vfiprintf_r+0x60>
 800a074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d503      	bpl.n	800a082 <_vfiprintf_r+0x52>
 800a07a:	2001      	movs	r0, #1
 800a07c:	4240      	negs	r0, r0
 800a07e:	b021      	add	sp, #132	; 0x84
 800a080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a082:	89bb      	ldrh	r3, [r7, #12]
 800a084:	059b      	lsls	r3, r3, #22
 800a086:	d4f8      	bmi.n	800a07a <_vfiprintf_r+0x4a>
 800a088:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a08a:	f7fc fe11 	bl	8006cb0 <__retarget_lock_release_recursive>
 800a08e:	e7f4      	b.n	800a07a <_vfiprintf_r+0x4a>
 800a090:	2300      	movs	r3, #0
 800a092:	ac08      	add	r4, sp, #32
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	3320      	adds	r3, #32
 800a098:	7663      	strb	r3, [r4, #25]
 800a09a:	3310      	adds	r3, #16
 800a09c:	76a3      	strb	r3, [r4, #26]
 800a09e:	9607      	str	r6, [sp, #28]
 800a0a0:	002e      	movs	r6, r5
 800a0a2:	7833      	ldrb	r3, [r6, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <_vfiprintf_r+0x7c>
 800a0a8:	2b25      	cmp	r3, #37	; 0x25
 800a0aa:	d148      	bne.n	800a13e <_vfiprintf_r+0x10e>
 800a0ac:	1b73      	subs	r3, r6, r5
 800a0ae:	9305      	str	r3, [sp, #20]
 800a0b0:	42ae      	cmp	r6, r5
 800a0b2:	d00b      	beq.n	800a0cc <_vfiprintf_r+0x9c>
 800a0b4:	002a      	movs	r2, r5
 800a0b6:	0039      	movs	r1, r7
 800a0b8:	9803      	ldr	r0, [sp, #12]
 800a0ba:	f7ff ffa7 	bl	800a00c <__sfputs_r>
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d100      	bne.n	800a0c4 <_vfiprintf_r+0x94>
 800a0c2:	e0af      	b.n	800a224 <_vfiprintf_r+0x1f4>
 800a0c4:	6963      	ldr	r3, [r4, #20]
 800a0c6:	9a05      	ldr	r2, [sp, #20]
 800a0c8:	189b      	adds	r3, r3, r2
 800a0ca:	6163      	str	r3, [r4, #20]
 800a0cc:	7833      	ldrb	r3, [r6, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d100      	bne.n	800a0d4 <_vfiprintf_r+0xa4>
 800a0d2:	e0a7      	b.n	800a224 <_vfiprintf_r+0x1f4>
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4252      	negs	r2, r2
 800a0da:	6062      	str	r2, [r4, #4]
 800a0dc:	a904      	add	r1, sp, #16
 800a0de:	3254      	adds	r2, #84	; 0x54
 800a0e0:	1852      	adds	r2, r2, r1
 800a0e2:	1c75      	adds	r5, r6, #1
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	60e3      	str	r3, [r4, #12]
 800a0e8:	60a3      	str	r3, [r4, #8]
 800a0ea:	7013      	strb	r3, [r2, #0]
 800a0ec:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0ee:	4b59      	ldr	r3, [pc, #356]	; (800a254 <_vfiprintf_r+0x224>)
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	7829      	ldrb	r1, [r5, #0]
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	f7fc fddb 	bl	8006cb2 <memchr>
 800a0fc:	1c6e      	adds	r6, r5, #1
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d11f      	bne.n	800a142 <_vfiprintf_r+0x112>
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	06d3      	lsls	r3, r2, #27
 800a106:	d504      	bpl.n	800a112 <_vfiprintf_r+0xe2>
 800a108:	2353      	movs	r3, #83	; 0x53
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	185b      	adds	r3, r3, r1
 800a10e:	2120      	movs	r1, #32
 800a110:	7019      	strb	r1, [r3, #0]
 800a112:	0713      	lsls	r3, r2, #28
 800a114:	d504      	bpl.n	800a120 <_vfiprintf_r+0xf0>
 800a116:	2353      	movs	r3, #83	; 0x53
 800a118:	a904      	add	r1, sp, #16
 800a11a:	185b      	adds	r3, r3, r1
 800a11c:	212b      	movs	r1, #43	; 0x2b
 800a11e:	7019      	strb	r1, [r3, #0]
 800a120:	782b      	ldrb	r3, [r5, #0]
 800a122:	2b2a      	cmp	r3, #42	; 0x2a
 800a124:	d016      	beq.n	800a154 <_vfiprintf_r+0x124>
 800a126:	002e      	movs	r6, r5
 800a128:	2100      	movs	r1, #0
 800a12a:	200a      	movs	r0, #10
 800a12c:	68e3      	ldr	r3, [r4, #12]
 800a12e:	7832      	ldrb	r2, [r6, #0]
 800a130:	1c75      	adds	r5, r6, #1
 800a132:	3a30      	subs	r2, #48	; 0x30
 800a134:	2a09      	cmp	r2, #9
 800a136:	d94e      	bls.n	800a1d6 <_vfiprintf_r+0x1a6>
 800a138:	2900      	cmp	r1, #0
 800a13a:	d111      	bne.n	800a160 <_vfiprintf_r+0x130>
 800a13c:	e017      	b.n	800a16e <_vfiprintf_r+0x13e>
 800a13e:	3601      	adds	r6, #1
 800a140:	e7af      	b.n	800a0a2 <_vfiprintf_r+0x72>
 800a142:	9b05      	ldr	r3, [sp, #20]
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	1ac0      	subs	r0, r0, r3
 800a148:	2301      	movs	r3, #1
 800a14a:	4083      	lsls	r3, r0
 800a14c:	4313      	orrs	r3, r2
 800a14e:	0035      	movs	r5, r6
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	e7cc      	b.n	800a0ee <_vfiprintf_r+0xbe>
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	1d19      	adds	r1, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9107      	str	r1, [sp, #28]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	db01      	blt.n	800a164 <_vfiprintf_r+0x134>
 800a160:	930b      	str	r3, [sp, #44]	; 0x2c
 800a162:	e004      	b.n	800a16e <_vfiprintf_r+0x13e>
 800a164:	425b      	negs	r3, r3
 800a166:	60e3      	str	r3, [r4, #12]
 800a168:	2302      	movs	r3, #2
 800a16a:	4313      	orrs	r3, r2
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	7833      	ldrb	r3, [r6, #0]
 800a170:	2b2e      	cmp	r3, #46	; 0x2e
 800a172:	d10a      	bne.n	800a18a <_vfiprintf_r+0x15a>
 800a174:	7873      	ldrb	r3, [r6, #1]
 800a176:	2b2a      	cmp	r3, #42	; 0x2a
 800a178:	d135      	bne.n	800a1e6 <_vfiprintf_r+0x1b6>
 800a17a:	9b07      	ldr	r3, [sp, #28]
 800a17c:	3602      	adds	r6, #2
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9207      	str	r2, [sp, #28]
 800a184:	2b00      	cmp	r3, #0
 800a186:	db2b      	blt.n	800a1e0 <_vfiprintf_r+0x1b0>
 800a188:	9309      	str	r3, [sp, #36]	; 0x24
 800a18a:	4d33      	ldr	r5, [pc, #204]	; (800a258 <_vfiprintf_r+0x228>)
 800a18c:	2203      	movs	r2, #3
 800a18e:	0028      	movs	r0, r5
 800a190:	7831      	ldrb	r1, [r6, #0]
 800a192:	f7fc fd8e 	bl	8006cb2 <memchr>
 800a196:	2800      	cmp	r0, #0
 800a198:	d006      	beq.n	800a1a8 <_vfiprintf_r+0x178>
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	1b40      	subs	r0, r0, r5
 800a19e:	4083      	lsls	r3, r0
 800a1a0:	6822      	ldr	r2, [r4, #0]
 800a1a2:	3601      	adds	r6, #1
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	6023      	str	r3, [r4, #0]
 800a1a8:	7831      	ldrb	r1, [r6, #0]
 800a1aa:	2206      	movs	r2, #6
 800a1ac:	482b      	ldr	r0, [pc, #172]	; (800a25c <_vfiprintf_r+0x22c>)
 800a1ae:	1c75      	adds	r5, r6, #1
 800a1b0:	7621      	strb	r1, [r4, #24]
 800a1b2:	f7fc fd7e 	bl	8006cb2 <memchr>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d043      	beq.n	800a242 <_vfiprintf_r+0x212>
 800a1ba:	4b29      	ldr	r3, [pc, #164]	; (800a260 <_vfiprintf_r+0x230>)
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d125      	bne.n	800a20c <_vfiprintf_r+0x1dc>
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	9b07      	ldr	r3, [sp, #28]
 800a1c4:	3307      	adds	r3, #7
 800a1c6:	4393      	bics	r3, r2
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	9a04      	ldr	r2, [sp, #16]
 800a1d0:	189b      	adds	r3, r3, r2
 800a1d2:	6163      	str	r3, [r4, #20]
 800a1d4:	e764      	b.n	800a0a0 <_vfiprintf_r+0x70>
 800a1d6:	4343      	muls	r3, r0
 800a1d8:	002e      	movs	r6, r5
 800a1da:	2101      	movs	r1, #1
 800a1dc:	189b      	adds	r3, r3, r2
 800a1de:	e7a6      	b.n	800a12e <_vfiprintf_r+0xfe>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	425b      	negs	r3, r3
 800a1e4:	e7d0      	b.n	800a188 <_vfiprintf_r+0x158>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	200a      	movs	r0, #10
 800a1ea:	001a      	movs	r2, r3
 800a1ec:	3601      	adds	r6, #1
 800a1ee:	6063      	str	r3, [r4, #4]
 800a1f0:	7831      	ldrb	r1, [r6, #0]
 800a1f2:	1c75      	adds	r5, r6, #1
 800a1f4:	3930      	subs	r1, #48	; 0x30
 800a1f6:	2909      	cmp	r1, #9
 800a1f8:	d903      	bls.n	800a202 <_vfiprintf_r+0x1d2>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0c5      	beq.n	800a18a <_vfiprintf_r+0x15a>
 800a1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a200:	e7c3      	b.n	800a18a <_vfiprintf_r+0x15a>
 800a202:	4342      	muls	r2, r0
 800a204:	002e      	movs	r6, r5
 800a206:	2301      	movs	r3, #1
 800a208:	1852      	adds	r2, r2, r1
 800a20a:	e7f1      	b.n	800a1f0 <_vfiprintf_r+0x1c0>
 800a20c:	aa07      	add	r2, sp, #28
 800a20e:	9200      	str	r2, [sp, #0]
 800a210:	0021      	movs	r1, r4
 800a212:	003a      	movs	r2, r7
 800a214:	4b13      	ldr	r3, [pc, #76]	; (800a264 <_vfiprintf_r+0x234>)
 800a216:	9803      	ldr	r0, [sp, #12]
 800a218:	f7fb fdb6 	bl	8005d88 <_printf_float>
 800a21c:	9004      	str	r0, [sp, #16]
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	3301      	adds	r3, #1
 800a222:	d1d3      	bne.n	800a1cc <_vfiprintf_r+0x19c>
 800a224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a226:	07db      	lsls	r3, r3, #31
 800a228:	d405      	bmi.n	800a236 <_vfiprintf_r+0x206>
 800a22a:	89bb      	ldrh	r3, [r7, #12]
 800a22c:	059b      	lsls	r3, r3, #22
 800a22e:	d402      	bmi.n	800a236 <_vfiprintf_r+0x206>
 800a230:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a232:	f7fc fd3d 	bl	8006cb0 <__retarget_lock_release_recursive>
 800a236:	89bb      	ldrh	r3, [r7, #12]
 800a238:	065b      	lsls	r3, r3, #25
 800a23a:	d500      	bpl.n	800a23e <_vfiprintf_r+0x20e>
 800a23c:	e71d      	b.n	800a07a <_vfiprintf_r+0x4a>
 800a23e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a240:	e71d      	b.n	800a07e <_vfiprintf_r+0x4e>
 800a242:	aa07      	add	r2, sp, #28
 800a244:	9200      	str	r2, [sp, #0]
 800a246:	0021      	movs	r1, r4
 800a248:	003a      	movs	r2, r7
 800a24a:	4b06      	ldr	r3, [pc, #24]	; (800a264 <_vfiprintf_r+0x234>)
 800a24c:	9803      	ldr	r0, [sp, #12]
 800a24e:	f7fc f861 	bl	8006314 <_printf_i>
 800a252:	e7e3      	b.n	800a21c <_vfiprintf_r+0x1ec>
 800a254:	0800a999 	.word	0x0800a999
 800a258:	0800a99f 	.word	0x0800a99f
 800a25c:	0800a9a3 	.word	0x0800a9a3
 800a260:	08005d89 	.word	0x08005d89
 800a264:	0800a00d 	.word	0x0800a00d

0800a268 <__swbuf_r>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	0006      	movs	r6, r0
 800a26c:	000d      	movs	r5, r1
 800a26e:	0014      	movs	r4, r2
 800a270:	2800      	cmp	r0, #0
 800a272:	d004      	beq.n	800a27e <__swbuf_r+0x16>
 800a274:	6a03      	ldr	r3, [r0, #32]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <__swbuf_r+0x16>
 800a27a:	f7fc fbf3 	bl	8006a64 <__sinit>
 800a27e:	69a3      	ldr	r3, [r4, #24]
 800a280:	60a3      	str	r3, [r4, #8]
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	071b      	lsls	r3, r3, #28
 800a286:	d528      	bpl.n	800a2da <__swbuf_r+0x72>
 800a288:	6923      	ldr	r3, [r4, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d025      	beq.n	800a2da <__swbuf_r+0x72>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	b2ef      	uxtb	r7, r5
 800a294:	1ac0      	subs	r0, r0, r3
 800a296:	6963      	ldr	r3, [r4, #20]
 800a298:	b2ed      	uxtb	r5, r5
 800a29a:	4283      	cmp	r3, r0
 800a29c:	dc05      	bgt.n	800a2aa <__swbuf_r+0x42>
 800a29e:	0021      	movs	r1, r4
 800a2a0:	0030      	movs	r0, r6
 800a2a2:	f7ff fa17 	bl	80096d4 <_fflush_r>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d11d      	bne.n	800a2e6 <__swbuf_r+0x7e>
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	60a3      	str	r3, [r4, #8]
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	6022      	str	r2, [r4, #0]
 800a2b8:	701f      	strb	r7, [r3, #0]
 800a2ba:	6963      	ldr	r3, [r4, #20]
 800a2bc:	4283      	cmp	r3, r0
 800a2be:	d004      	beq.n	800a2ca <__swbuf_r+0x62>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	07db      	lsls	r3, r3, #31
 800a2c4:	d507      	bpl.n	800a2d6 <__swbuf_r+0x6e>
 800a2c6:	2d0a      	cmp	r5, #10
 800a2c8:	d105      	bne.n	800a2d6 <__swbuf_r+0x6e>
 800a2ca:	0021      	movs	r1, r4
 800a2cc:	0030      	movs	r0, r6
 800a2ce:	f7ff fa01 	bl	80096d4 <_fflush_r>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d107      	bne.n	800a2e6 <__swbuf_r+0x7e>
 800a2d6:	0028      	movs	r0, r5
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2da:	0021      	movs	r1, r4
 800a2dc:	0030      	movs	r0, r6
 800a2de:	f000 f805 	bl	800a2ec <__swsetup_r>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d0d3      	beq.n	800a28e <__swbuf_r+0x26>
 800a2e6:	2501      	movs	r5, #1
 800a2e8:	426d      	negs	r5, r5
 800a2ea:	e7f4      	b.n	800a2d6 <__swbuf_r+0x6e>

0800a2ec <__swsetup_r>:
 800a2ec:	4b30      	ldr	r3, [pc, #192]	; (800a3b0 <__swsetup_r+0xc4>)
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	0005      	movs	r5, r0
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	000c      	movs	r4, r1
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d004      	beq.n	800a304 <__swsetup_r+0x18>
 800a2fa:	6a03      	ldr	r3, [r0, #32]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <__swsetup_r+0x18>
 800a300:	f7fc fbb0 	bl	8006a64 <__sinit>
 800a304:	230c      	movs	r3, #12
 800a306:	5ee2      	ldrsh	r2, [r4, r3]
 800a308:	b293      	uxth	r3, r2
 800a30a:	0711      	lsls	r1, r2, #28
 800a30c:	d423      	bmi.n	800a356 <__swsetup_r+0x6a>
 800a30e:	06d9      	lsls	r1, r3, #27
 800a310:	d407      	bmi.n	800a322 <__swsetup_r+0x36>
 800a312:	2309      	movs	r3, #9
 800a314:	2001      	movs	r0, #1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	3337      	adds	r3, #55	; 0x37
 800a31a:	4313      	orrs	r3, r2
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	4240      	negs	r0, r0
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	075b      	lsls	r3, r3, #29
 800a324:	d513      	bpl.n	800a34e <__swsetup_r+0x62>
 800a326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a328:	2900      	cmp	r1, #0
 800a32a:	d008      	beq.n	800a33e <__swsetup_r+0x52>
 800a32c:	0023      	movs	r3, r4
 800a32e:	3344      	adds	r3, #68	; 0x44
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <__swsetup_r+0x4e>
 800a334:	0028      	movs	r0, r5
 800a336:	f7fd fb69 	bl	8007a0c <_free_r>
 800a33a:	2300      	movs	r3, #0
 800a33c:	6363      	str	r3, [r4, #52]	; 0x34
 800a33e:	2224      	movs	r2, #36	; 0x24
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	4393      	bics	r3, r2
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	6063      	str	r3, [r4, #4]
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	2308      	movs	r3, #8
 800a350:	89a2      	ldrh	r2, [r4, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10b      	bne.n	800a374 <__swsetup_r+0x88>
 800a35c:	21a0      	movs	r1, #160	; 0xa0
 800a35e:	2280      	movs	r2, #128	; 0x80
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	0089      	lsls	r1, r1, #2
 800a364:	0092      	lsls	r2, r2, #2
 800a366:	400b      	ands	r3, r1
 800a368:	4293      	cmp	r3, r2
 800a36a:	d003      	beq.n	800a374 <__swsetup_r+0x88>
 800a36c:	0021      	movs	r1, r4
 800a36e:	0028      	movs	r0, r5
 800a370:	f000 f892 	bl	800a498 <__smakebuf_r>
 800a374:	220c      	movs	r2, #12
 800a376:	5ea3      	ldrsh	r3, [r4, r2]
 800a378:	2001      	movs	r0, #1
 800a37a:	001a      	movs	r2, r3
 800a37c:	b299      	uxth	r1, r3
 800a37e:	4002      	ands	r2, r0
 800a380:	4203      	tst	r3, r0
 800a382:	d00f      	beq.n	800a3a4 <__swsetup_r+0xb8>
 800a384:	2200      	movs	r2, #0
 800a386:	60a2      	str	r2, [r4, #8]
 800a388:	6962      	ldr	r2, [r4, #20]
 800a38a:	4252      	negs	r2, r2
 800a38c:	61a2      	str	r2, [r4, #24]
 800a38e:	2000      	movs	r0, #0
 800a390:	6922      	ldr	r2, [r4, #16]
 800a392:	4282      	cmp	r2, r0
 800a394:	d1c4      	bne.n	800a320 <__swsetup_r+0x34>
 800a396:	0609      	lsls	r1, r1, #24
 800a398:	d5c2      	bpl.n	800a320 <__swsetup_r+0x34>
 800a39a:	2240      	movs	r2, #64	; 0x40
 800a39c:	4313      	orrs	r3, r2
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	3801      	subs	r0, #1
 800a3a2:	e7bd      	b.n	800a320 <__swsetup_r+0x34>
 800a3a4:	0788      	lsls	r0, r1, #30
 800a3a6:	d400      	bmi.n	800a3aa <__swsetup_r+0xbe>
 800a3a8:	6962      	ldr	r2, [r4, #20]
 800a3aa:	60a2      	str	r2, [r4, #8]
 800a3ac:	e7ef      	b.n	800a38e <__swsetup_r+0xa2>
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	20000064 	.word	0x20000064

0800a3b4 <_raise_r>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	0004      	movs	r4, r0
 800a3b8:	000d      	movs	r5, r1
 800a3ba:	291f      	cmp	r1, #31
 800a3bc:	d904      	bls.n	800a3c8 <_raise_r+0x14>
 800a3be:	2316      	movs	r3, #22
 800a3c0:	6003      	str	r3, [r0, #0]
 800a3c2:	2001      	movs	r0, #1
 800a3c4:	4240      	negs	r0, r0
 800a3c6:	bd70      	pop	{r4, r5, r6, pc}
 800a3c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d004      	beq.n	800a3d8 <_raise_r+0x24>
 800a3ce:	008a      	lsls	r2, r1, #2
 800a3d0:	189b      	adds	r3, r3, r2
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	d108      	bne.n	800a3ea <_raise_r+0x36>
 800a3d8:	0020      	movs	r0, r4
 800a3da:	f000 f831 	bl	800a440 <_getpid_r>
 800a3de:	002a      	movs	r2, r5
 800a3e0:	0001      	movs	r1, r0
 800a3e2:	0020      	movs	r0, r4
 800a3e4:	f000 f81a 	bl	800a41c <_kill_r>
 800a3e8:	e7ed      	b.n	800a3c6 <_raise_r+0x12>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	2a01      	cmp	r2, #1
 800a3ee:	d0ea      	beq.n	800a3c6 <_raise_r+0x12>
 800a3f0:	1c51      	adds	r1, r2, #1
 800a3f2:	d103      	bne.n	800a3fc <_raise_r+0x48>
 800a3f4:	2316      	movs	r3, #22
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	e7e4      	b.n	800a3c6 <_raise_r+0x12>
 800a3fc:	2400      	movs	r4, #0
 800a3fe:	0028      	movs	r0, r5
 800a400:	601c      	str	r4, [r3, #0]
 800a402:	4790      	blx	r2
 800a404:	0020      	movs	r0, r4
 800a406:	e7de      	b.n	800a3c6 <_raise_r+0x12>

0800a408 <raise>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	4b03      	ldr	r3, [pc, #12]	; (800a418 <raise+0x10>)
 800a40c:	0001      	movs	r1, r0
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	f7ff ffd0 	bl	800a3b4 <_raise_r>
 800a414:	bd10      	pop	{r4, pc}
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	20000064 	.word	0x20000064

0800a41c <_kill_r>:
 800a41c:	2300      	movs	r3, #0
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_kill_r+0x20>)
 800a422:	0004      	movs	r4, r0
 800a424:	0008      	movs	r0, r1
 800a426:	0011      	movs	r1, r2
 800a428:	602b      	str	r3, [r5, #0]
 800a42a:	f7f8 fbfb 	bl	8002c24 <_kill>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	d103      	bne.n	800a43a <_kill_r+0x1e>
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d000      	beq.n	800a43a <_kill_r+0x1e>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	200003fc 	.word	0x200003fc

0800a440 <_getpid_r>:
 800a440:	b510      	push	{r4, lr}
 800a442:	f7f8 fbe9 	bl	8002c18 <_getpid>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <__swhatbuf_r>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	000e      	movs	r6, r1
 800a44c:	001d      	movs	r5, r3
 800a44e:	230e      	movs	r3, #14
 800a450:	5ec9      	ldrsh	r1, [r1, r3]
 800a452:	0014      	movs	r4, r2
 800a454:	b096      	sub	sp, #88	; 0x58
 800a456:	2900      	cmp	r1, #0
 800a458:	da0c      	bge.n	800a474 <__swhatbuf_r+0x2c>
 800a45a:	89b2      	ldrh	r2, [r6, #12]
 800a45c:	2380      	movs	r3, #128	; 0x80
 800a45e:	0011      	movs	r1, r2
 800a460:	4019      	ands	r1, r3
 800a462:	421a      	tst	r2, r3
 800a464:	d013      	beq.n	800a48e <__swhatbuf_r+0x46>
 800a466:	2100      	movs	r1, #0
 800a468:	3b40      	subs	r3, #64	; 0x40
 800a46a:	2000      	movs	r0, #0
 800a46c:	6029      	str	r1, [r5, #0]
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	b016      	add	sp, #88	; 0x58
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	466a      	mov	r2, sp
 800a476:	f000 f84d 	bl	800a514 <_fstat_r>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	dbed      	blt.n	800a45a <__swhatbuf_r+0x12>
 800a47e:	23f0      	movs	r3, #240	; 0xf0
 800a480:	9901      	ldr	r1, [sp, #4]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	4019      	ands	r1, r3
 800a486:	4b03      	ldr	r3, [pc, #12]	; (800a494 <__swhatbuf_r+0x4c>)
 800a488:	18c9      	adds	r1, r1, r3
 800a48a:	424b      	negs	r3, r1
 800a48c:	4159      	adcs	r1, r3
 800a48e:	2380      	movs	r3, #128	; 0x80
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	e7ea      	b.n	800a46a <__swhatbuf_r+0x22>
 800a494:	ffffe000 	.word	0xffffe000

0800a498 <__smakebuf_r>:
 800a498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a49a:	2602      	movs	r6, #2
 800a49c:	898b      	ldrh	r3, [r1, #12]
 800a49e:	0005      	movs	r5, r0
 800a4a0:	000c      	movs	r4, r1
 800a4a2:	4233      	tst	r3, r6
 800a4a4:	d006      	beq.n	800a4b4 <__smakebuf_r+0x1c>
 800a4a6:	0023      	movs	r3, r4
 800a4a8:	3347      	adds	r3, #71	; 0x47
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	6123      	str	r3, [r4, #16]
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	6163      	str	r3, [r4, #20]
 800a4b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a4b4:	466a      	mov	r2, sp
 800a4b6:	ab01      	add	r3, sp, #4
 800a4b8:	f7ff ffc6 	bl	800a448 <__swhatbuf_r>
 800a4bc:	9900      	ldr	r1, [sp, #0]
 800a4be:	0007      	movs	r7, r0
 800a4c0:	0028      	movs	r0, r5
 800a4c2:	f7fd fb19 	bl	8007af8 <_malloc_r>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d108      	bne.n	800a4dc <__smakebuf_r+0x44>
 800a4ca:	220c      	movs	r2, #12
 800a4cc:	5ea3      	ldrsh	r3, [r4, r2]
 800a4ce:	059a      	lsls	r2, r3, #22
 800a4d0:	d4ef      	bmi.n	800a4b2 <__smakebuf_r+0x1a>
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	4393      	bics	r3, r2
 800a4d6:	431e      	orrs	r6, r3
 800a4d8:	81a6      	strh	r6, [r4, #12]
 800a4da:	e7e4      	b.n	800a4a6 <__smakebuf_r+0xe>
 800a4dc:	2380      	movs	r3, #128	; 0x80
 800a4de:	89a2      	ldrh	r2, [r4, #12]
 800a4e0:	6020      	str	r0, [r4, #0]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	81a3      	strh	r3, [r4, #12]
 800a4e6:	9b00      	ldr	r3, [sp, #0]
 800a4e8:	6120      	str	r0, [r4, #16]
 800a4ea:	6163      	str	r3, [r4, #20]
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00c      	beq.n	800a50c <__smakebuf_r+0x74>
 800a4f2:	0028      	movs	r0, r5
 800a4f4:	230e      	movs	r3, #14
 800a4f6:	5ee1      	ldrsh	r1, [r4, r3]
 800a4f8:	f000 f81e 	bl	800a538 <_isatty_r>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d005      	beq.n	800a50c <__smakebuf_r+0x74>
 800a500:	2303      	movs	r3, #3
 800a502:	89a2      	ldrh	r2, [r4, #12]
 800a504:	439a      	bics	r2, r3
 800a506:	3b02      	subs	r3, #2
 800a508:	4313      	orrs	r3, r2
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	433b      	orrs	r3, r7
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	e7ce      	b.n	800a4b2 <__smakebuf_r+0x1a>

0800a514 <_fstat_r>:
 800a514:	2300      	movs	r3, #0
 800a516:	b570      	push	{r4, r5, r6, lr}
 800a518:	4d06      	ldr	r5, [pc, #24]	; (800a534 <_fstat_r+0x20>)
 800a51a:	0004      	movs	r4, r0
 800a51c:	0008      	movs	r0, r1
 800a51e:	0011      	movs	r1, r2
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	f7f8 fbde 	bl	8002ce2 <_fstat>
 800a526:	1c43      	adds	r3, r0, #1
 800a528:	d103      	bne.n	800a532 <_fstat_r+0x1e>
 800a52a:	682b      	ldr	r3, [r5, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d000      	beq.n	800a532 <_fstat_r+0x1e>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	200003fc 	.word	0x200003fc

0800a538 <_isatty_r>:
 800a538:	2300      	movs	r3, #0
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_isatty_r+0x20>)
 800a53e:	0004      	movs	r4, r0
 800a540:	0008      	movs	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f8 fbdb 	bl	8002cfe <_isatty>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d103      	bne.n	800a554 <_isatty_r+0x1c>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d000      	beq.n	800a554 <_isatty_r+0x1c>
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	200003fc 	.word	0x200003fc

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
